/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InternalValue } from "./components/field-time/field-time";
export namespace Components {
    interface CalendarDay {
        /**
          * PROPERTIES
         */
        "active": boolean;
        "clickable": boolean;
        "date": Date;
        /**
          * METHODS
         */
        "day": (val: any) => Promise<unknown>;
        "disabled": boolean;
        "month": (val: any) => Promise<unknown>;
        "year": (val: any) => Promise<unknown>;
    }
    interface CalendarMonth {
        /**
          * PROPERTIES
         */
        "active": boolean;
        "clickable": boolean;
        "date": string | Date;
        /**
          * METHODS
         */
        "day": (val: any) => Promise<unknown>;
        "disabled": boolean;
        "month": (val: any) => Promise<unknown>;
        "year": (val: any) => Promise<unknown>;
    }
    interface DropDown {
        "align": string;
    }
    interface FieldButton {
        "disabled": boolean;
        "kind": string;
        "size": string;
        "spinner": boolean;
        "theme": string;
        /**
          * PROPS
         */
        "type": string;
    }
    interface FieldCheckbox {
        /**
          * PROPS
         */
        "autofocus": boolean;
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "mixed": boolean;
        "name": string;
        "novalidate": boolean;
        "readonly": boolean;
        "required": boolean;
        "slim": boolean;
        "value": boolean;
    }
    interface FieldDate {
        /**
          * PROPS
         */
        "autocomplete": string;
        "autofocus": boolean;
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "labelup": boolean;
        "max": number;
        "min": number;
        "name": string;
        "readonly": boolean;
        "required": boolean;
        "slim": boolean;
        "value": number | undefined;
    }
    interface FieldMultiselect {
        /**
          * PROPS
         */
        "autofocus": boolean;
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "name": string;
        "options": string | any[];
        "readonly": boolean;
        "required": boolean;
        "slim": boolean;
        "value": any[];
    }
    interface FieldNumber {
        /**
          * PROPS
         */
        "autocomplete": string;
        "autofocus": boolean;
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "labelup": boolean;
        "max": number;
        "min": number;
        "name": string;
        "readonly": boolean;
        "required": boolean;
        "slim": boolean;
        "value": number | undefined;
    }
    interface FieldRadio {
        /**
          * PROPS
         */
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "name": string;
        "options": string | any[];
        "readonly": boolean;
        "required": boolean;
        "slim": boolean;
        "value": string | undefined;
    }
    interface FieldSelect {
        /**
          * PROPS
         */
        "autocomplete": string;
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "labelup": boolean;
        "name": string;
        "options": string | any[];
        "readonly": boolean;
        "required": boolean;
        "slim": boolean;
        "value": string;
    }
    interface FieldText {
        /**
          * PROPS
         */
        "autocomplete": string;
        "autofocus": boolean;
        "autowidth": boolean;
        "count": number;
        "disabled": boolean;
        "error": string;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "labelup": boolean;
        "max": number;
        "min": number;
        "name": string;
        "readonly": boolean;
        "required": boolean;
        "showcount": boolean;
        "slim": boolean;
        "type": string;
        "value": string;
    }
    interface FieldTextarea {
        /**
          * PROPS
         */
        "autocomplete": string;
        "autofocus": boolean;
        "autowidth": boolean;
        "count": number;
        "disabled": boolean;
        "error": string;
        "fullwidth": boolean;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "inputid": string;
        "label": string;
        "labelup": boolean;
        "max": number;
        "min": number;
        "name": string;
        "readonly": boolean;
        "required": boolean;
        "resize": string;
        "showcount": boolean;
        "slim": boolean;
        "value": string;
    }
    interface FieldTime {
        /**
          * PROPS
         */
        "autowidth": boolean;
        "disabled": boolean;
        "error": string;
        "getInternal": () => Promise<InternalValue>;
        "getValidationMessage": () => Promise<string>;
        /**
          * METHODS
         */
        "getValidity": () => Promise<ValidityState>;
        "helptext": string;
        "hour": (value?: any) => Promise<unknown>;
        "inputid": string;
        "label": string;
        "labelup": boolean;
        "max": string;
        "meridien": (value?: any) => Promise<unknown>;
        "min": string;
        "minute": (value?: any) => Promise<unknown>;
        "name": string;
        "readonly": boolean;
        "required": boolean;
        "second": (value?: any) => Promise<unknown>;
        "showseconds": boolean;
        "slim": boolean;
        "value": string;
    }
    interface RootElement {
    }
}
declare global {
    interface HTMLCalendarDayElement extends Components.CalendarDay, HTMLStencilElement {
    }
    var HTMLCalendarDayElement: {
        prototype: HTMLCalendarDayElement;
        new (): HTMLCalendarDayElement;
    };
    interface HTMLCalendarMonthElement extends Components.CalendarMonth, HTMLStencilElement {
    }
    var HTMLCalendarMonthElement: {
        prototype: HTMLCalendarMonthElement;
        new (): HTMLCalendarMonthElement;
    };
    interface HTMLDropDownElement extends Components.DropDown, HTMLStencilElement {
    }
    var HTMLDropDownElement: {
        prototype: HTMLDropDownElement;
        new (): HTMLDropDownElement;
    };
    interface HTMLFieldButtonElement extends Components.FieldButton, HTMLStencilElement {
    }
    var HTMLFieldButtonElement: {
        prototype: HTMLFieldButtonElement;
        new (): HTMLFieldButtonElement;
    };
    interface HTMLFieldCheckboxElement extends Components.FieldCheckbox, HTMLStencilElement {
    }
    var HTMLFieldCheckboxElement: {
        prototype: HTMLFieldCheckboxElement;
        new (): HTMLFieldCheckboxElement;
    };
    interface HTMLFieldDateElement extends Components.FieldDate, HTMLStencilElement {
    }
    var HTMLFieldDateElement: {
        prototype: HTMLFieldDateElement;
        new (): HTMLFieldDateElement;
    };
    interface HTMLFieldMultiselectElement extends Components.FieldMultiselect, HTMLStencilElement {
    }
    var HTMLFieldMultiselectElement: {
        prototype: HTMLFieldMultiselectElement;
        new (): HTMLFieldMultiselectElement;
    };
    interface HTMLFieldNumberElement extends Components.FieldNumber, HTMLStencilElement {
    }
    var HTMLFieldNumberElement: {
        prototype: HTMLFieldNumberElement;
        new (): HTMLFieldNumberElement;
    };
    interface HTMLFieldRadioElement extends Components.FieldRadio, HTMLStencilElement {
    }
    var HTMLFieldRadioElement: {
        prototype: HTMLFieldRadioElement;
        new (): HTMLFieldRadioElement;
    };
    interface HTMLFieldSelectElement extends Components.FieldSelect, HTMLStencilElement {
    }
    var HTMLFieldSelectElement: {
        prototype: HTMLFieldSelectElement;
        new (): HTMLFieldSelectElement;
    };
    interface HTMLFieldTextElement extends Components.FieldText, HTMLStencilElement {
    }
    var HTMLFieldTextElement: {
        prototype: HTMLFieldTextElement;
        new (): HTMLFieldTextElement;
    };
    interface HTMLFieldTextareaElement extends Components.FieldTextarea, HTMLStencilElement {
    }
    var HTMLFieldTextareaElement: {
        prototype: HTMLFieldTextareaElement;
        new (): HTMLFieldTextareaElement;
    };
    interface HTMLFieldTimeElement extends Components.FieldTime, HTMLStencilElement {
    }
    var HTMLFieldTimeElement: {
        prototype: HTMLFieldTimeElement;
        new (): HTMLFieldTimeElement;
    };
    interface HTMLRootElementElement extends Components.RootElement, HTMLStencilElement {
    }
    var HTMLRootElementElement: {
        prototype: HTMLRootElementElement;
        new (): HTMLRootElementElement;
    };
    interface HTMLElementTagNameMap {
        "calendar-day": HTMLCalendarDayElement;
        "calendar-month": HTMLCalendarMonthElement;
        "drop-down": HTMLDropDownElement;
        "field-button": HTMLFieldButtonElement;
        "field-checkbox": HTMLFieldCheckboxElement;
        "field-date": HTMLFieldDateElement;
        "field-multiselect": HTMLFieldMultiselectElement;
        "field-number": HTMLFieldNumberElement;
        "field-radio": HTMLFieldRadioElement;
        "field-select": HTMLFieldSelectElement;
        "field-text": HTMLFieldTextElement;
        "field-textarea": HTMLFieldTextareaElement;
        "field-time": HTMLFieldTimeElement;
        "root-element": HTMLRootElementElement;
    }
}
declare namespace LocalJSX {
    interface CalendarDay {
        /**
          * PROPERTIES
         */
        "active"?: boolean;
        "clickable"?: boolean;
        "date"?: Date;
        "disabled"?: boolean;
    }
    interface CalendarMonth {
        /**
          * PROPERTIES
         */
        "active"?: boolean;
        "clickable"?: boolean;
        "date"?: string | Date;
        "disabled"?: boolean;
    }
    interface DropDown {
        "align"?: string;
    }
    interface FieldButton {
        "disabled"?: boolean;
        "kind"?: string;
        "size"?: string;
        "spinner"?: boolean;
        "theme"?: string;
        /**
          * PROPS
         */
        "type"?: string;
    }
    interface FieldCheckbox {
        /**
          * PROPS
         */
        "autofocus"?: boolean;
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "mixed"?: boolean;
        "name"?: string;
        "novalidate"?: boolean;
        "readonly"?: boolean;
        "required"?: boolean;
        "slim"?: boolean;
        "value"?: boolean;
    }
    interface FieldDate {
        /**
          * PROPS
         */
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "labelup"?: boolean;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "slim"?: boolean;
        "value"?: number | undefined;
    }
    interface FieldMultiselect {
        /**
          * PROPS
         */
        "autofocus"?: boolean;
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "name"?: string;
        "options"?: string | any[];
        "readonly"?: boolean;
        "required"?: boolean;
        "slim"?: boolean;
        "value"?: any[];
    }
    interface FieldNumber {
        /**
          * PROPS
         */
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "labelup"?: boolean;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "slim"?: boolean;
        "value"?: number | undefined;
    }
    interface FieldRadio {
        /**
          * PROPS
         */
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "name"?: string;
        "options"?: string | any[];
        "readonly"?: boolean;
        "required"?: boolean;
        "slim"?: boolean;
        "value"?: string | undefined;
    }
    interface FieldSelect {
        /**
          * PROPS
         */
        "autocomplete"?: string;
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "labelup"?: boolean;
        "name"?: string;
        "options"?: string | any[];
        "readonly"?: boolean;
        "required"?: boolean;
        "slim"?: boolean;
        "value"?: string;
    }
    interface FieldText {
        /**
          * PROPS
         */
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "autowidth"?: boolean;
        "count"?: number;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "labelup"?: boolean;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "showcount"?: boolean;
        "slim"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface FieldTextarea {
        /**
          * PROPS
         */
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "autowidth"?: boolean;
        "count"?: number;
        "disabled"?: boolean;
        "error"?: string;
        "fullwidth"?: boolean;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "labelup"?: boolean;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "resize"?: string;
        "showcount"?: boolean;
        "slim"?: boolean;
        "value"?: string;
    }
    interface FieldTime {
        /**
          * PROPS
         */
        "autowidth"?: boolean;
        "disabled"?: boolean;
        "error"?: string;
        "helptext"?: string;
        "inputid"?: string;
        "label"?: string;
        "labelup"?: boolean;
        "max"?: string;
        "min"?: string;
        "name"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "showseconds"?: boolean;
        "slim"?: boolean;
        "value"?: string;
    }
    interface RootElement {
    }
    interface IntrinsicElements {
        "calendar-day": CalendarDay;
        "calendar-month": CalendarMonth;
        "drop-down": DropDown;
        "field-button": FieldButton;
        "field-checkbox": FieldCheckbox;
        "field-date": FieldDate;
        "field-multiselect": FieldMultiselect;
        "field-number": FieldNumber;
        "field-radio": FieldRadio;
        "field-select": FieldSelect;
        "field-text": FieldText;
        "field-textarea": FieldTextarea;
        "field-time": FieldTime;
        "root-element": RootElement;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calendar-day": LocalJSX.CalendarDay & JSXBase.HTMLAttributes<HTMLCalendarDayElement>;
            "calendar-month": LocalJSX.CalendarMonth & JSXBase.HTMLAttributes<HTMLCalendarMonthElement>;
            "drop-down": LocalJSX.DropDown & JSXBase.HTMLAttributes<HTMLDropDownElement>;
            "field-button": LocalJSX.FieldButton & JSXBase.HTMLAttributes<HTMLFieldButtonElement>;
            "field-checkbox": LocalJSX.FieldCheckbox & JSXBase.HTMLAttributes<HTMLFieldCheckboxElement>;
            "field-date": LocalJSX.FieldDate & JSXBase.HTMLAttributes<HTMLFieldDateElement>;
            "field-multiselect": LocalJSX.FieldMultiselect & JSXBase.HTMLAttributes<HTMLFieldMultiselectElement>;
            "field-number": LocalJSX.FieldNumber & JSXBase.HTMLAttributes<HTMLFieldNumberElement>;
            "field-radio": LocalJSX.FieldRadio & JSXBase.HTMLAttributes<HTMLFieldRadioElement>;
            "field-select": LocalJSX.FieldSelect & JSXBase.HTMLAttributes<HTMLFieldSelectElement>;
            "field-text": LocalJSX.FieldText & JSXBase.HTMLAttributes<HTMLFieldTextElement>;
            "field-textarea": LocalJSX.FieldTextarea & JSXBase.HTMLAttributes<HTMLFieldTextareaElement>;
            "field-time": LocalJSX.FieldTime & JSXBase.HTMLAttributes<HTMLFieldTimeElement>;
            "root-element": LocalJSX.RootElement & JSXBase.HTMLAttributes<HTMLRootElementElement>;
        }
    }
}
