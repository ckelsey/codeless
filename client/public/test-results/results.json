{"/components/field-text":[{"name":"FIELD-TEXT label: is not clickable","pass":true,"coverage":{"/dist/components/field-text/index.js":{"source":"import Observer from \"../../utils/observe/observer.js\";\nimport EventObserver from \"../../utils/observe/event-observer.js\";\nimport Type from \"../../utils/types/type.js\";\nimport Pipe from \"../../utils/function-helpers/pipe.js\";\nimport ToBool from \"../../utils/conversion/to-bool.js\";\nimport ToNumber from \"../../utils/conversion/to-number.js\";\nimport IfInvalid from \"../../utils/checks/if-invalid.js\";\nimport { SantizedHTML } from \"../../utils/validate/html.js\";\nimport Create from \"../../utils/dom/create.js\";\nimport ID from \"../../utils/id.js\";\nimport SetAttribute from \"../../utils/dom/set-attribute.js\";\nimport IsNothing from \"../../utils/checks/is-nothing.js\";\nimport Get from \"../../utils/objects/get.js\";\nimport DispatchEvent from \"../../utils/dom/dispatch-event.js\";\nimport IfSelector from \"../../utils/checks/if-selector.js\";\nimport RemoveElement from \"../../utils/dom/remove-element.js\";\nimport IndexOf from \"../../utils/checks/index-of.js\";\nimport Try from \"../../utils/try.js\";\nconst html = \"<div class=\\\"field-element-container\\\"><div class=\\\"field-element-container-inner\\\"><span class=\\\"icon-container icon-padding\\\"><slot name=\\\"iconleft\\\"></slot></span><div class=\\\"field-input-label\\\"><div class=\\\"field-label\\\"><slot name=\\\"label\\\"></slot></div><div class=\\\"field-input\\\"><slot name=\\\"input\\\"></slot></div></div><span class=\\\"icon-container error-icon\\\"><slot name=\\\"error-icon\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" viewBox=\\\"0 0 24 24\\\" style=\\\"width:100%;fill:currentColor\\\"><path d=\\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\\"></path></svg></slot></span><span class=\\\"icon-container\\\"><slot name=\\\"iconright\\\"></slot></span></div><span class=\\\"field-input-bottom-container\\\"><span class=\\\"field-error-text\\\"><slot name=\\\"error\\\"></slot></span><span class=\\\"field-input-bottom\\\"><span class=\\\"field-help-text\\\"><slot name=\\\"help\\\"></slot></span><span class=\\\"field-count-text\\\"></span></span></span></div>\";\nconst styles = \"@keyframes rotating{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}@keyframes onAutoFillStart{from{background:transparent}to{background:transparent}}@keyframes onAutoFillCancel{from{background:transparent}to{background:transparent}}@keyframes delayOverflowIn{0%{overflow:hidden}99%{overflow:hidden}100%{overflow:visible}}@keyframes delayOverflowOut{0%{overflow:visible}99%{overflow:visible}100%{overflow:hidden}}@keyframes fadeIn{0%{opacity:0}10%{opacity:0}100%{opacity:1}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}:host{display:inline-block;max-width:100%;box-sizing:border-box;vertical-align:text-bottom;line-height:150%;font-size:inherit;color:inherit}:host *{box-sizing:border-box}:host([focused=\\\"true\\\"]) .field-element-container-inner{background-color:#fff}:host([disabled=\\\"true\\\"]) .field-element-container-inner{opacity:0.62}:host([error-message]:not([error-message=\\\"\\\"])) .field-element-container-inner{box-shadow:0 0 0 1px #df0700}:host .field-input-label{flex:1 0 50%;display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start;min-height:2.725em}:host .field-input{width:100%}:host .icon-container{position:relative;top:0;left:0;margin:0;width:auto;height:1.5em;max-width:2.5em;display:inline-flex;line-height:100%;font-size:inherit;pointer-events:none;color:rgba(34,34,34,0.75)}:host .icon-container slot[name=\\\"icon\\\"]{display:flex;height:1.5em;width:auto;max-width:2em;align-items:center;justify-content:flex-start;font-size:initial}:host .icon-container.icon-padding{padding-left:0.25em;margin-right:-0.25em}::slotted([slot=\\\"icon\\\"]){height:1.5em;width:1.5em;min-width:1.5em;min-height:1.5em;margin:0 0 0 0.62em}:host .field-input-bottom-container{display:block;padding:0em 0.125em;flex-grow:1;width:100%;color:inherit;font-size:70%;line-height:150%}:host .field-input-bottom-container .field-input-bottom{display:flex;justify-content:space-between;align-items:flex-start;flex-grow:1;width:100%;font-weight:100;opacity:0.62;color:inherit}:host .field-error-text{display:block;color:#df0700}.field-element-container-inner{position:relative;width:auto;max-width:100%;min-height:2.725em;display:flex;align-items:center;justify-content:flex-start;flex-wrap:wrap;background-color:#eee;border-radius:3px;transition:background-color 0.2s}:host .field-label{width:100%;min-height:1.05em;text-align:left;display:flex;align-items:center;transform:translateX(-0.2em) translateY(0.7em) translateZ(0px) scale(1);transform-origin:0 0;font-size:inherit;pointer-events:none;position:relative;line-height:150%;padding:0 0 0 0.75em;margin-bottom:-1.5em;color:rgba(34,34,34,0.62);transition:transform 0.2s, opacity 0.2s ease-in 0.062s}:host([focused=\\\"true\\\"]) .field-label,:host([empty=\\\"false\\\"]) .field-label{transform:translateX(0.2em) translateY(0.25em) translateZ(0) scale(0.7)}:host([required=\\\"true\\\"]) .field-label ::before{content:\\\"*\\\";color:#df0700;line-height:100%;position:relative;top:0.25em;margin-right:0.25em;font-style:italic}:host .error-icon{width:0em;color:#df0700;transition:width 0.2s}:host([error-message]:not([error-message=\\\"\\\"])) .error-icon{width:1.5em}::slotted([slot=\\\"input\\\"]){padding:1.3em 0.7em 0.3em;position:relative;margin:0;height:auto;width:100%;border-radius:3px;background-color:transparent;color:#222;border:none !important;box-sizing:border-box;height:100%;flex-grow:1;font-size:inherit;font-family:inherit;line-height:initial;outline:none !important;appearance:none;transition:color 0.2s, background-color 0.2s, background-position 0.2s, transform 0.2s}::slotted([slot=\\\"input\\\"])::-webkit-input-placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"]):-webkit-input-placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"]):-ms-input-placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"])::placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"]:focus){background-color:transparent}::slotted([slot=\\\"input\\\"]:-internal-autofill-selected){background-color:transparent !important}::slotted([slot=\\\"input\\\"]:-webkit-autofill),::slotted([slot=\\\"input\\\"]:-webkit-autofill:hover),::slotted([slot=\\\"input\\\"]:-webkit-autofill:focus),::slotted([slot=\\\"input\\\"]:-webkit-autofill:active){animation-name:onAutoFillStart;transition:background-color 50000s ease-in-out 0s}::slotted([slot=\\\"input\\\"]:not(:-webkit-autofill)){animation-name:onAutoFillCancel}\";\nconst slotProperties = ['label', 'error', 'help', 'input', 'iconleft', 'iconright'];\nconst types = ['text', 'email', 'search', 'tel', 'url', 'password'];\nconst boolOrFalse = Pipe(ToBool, IfInvalid(false));\nfunction htmlValue(value) { return typeof value === 'string' ? SantizedHTML(value) : SantizedHTML(Get(value, 'innerHTML', '')); }\nfunction append(el) { return function (element) { el && !el.contains(element) ? el.appendChild(element) : undefined; }; }\nfunction trueOrNull(value) { return value === true ? true : null; }\nfunction stringOrNull(value) { return !!value && typeof value === 'string' ? value : null; }\nfunction numberOrNull(value) { return IsNothing(value) ? null : Pipe(ToNumber, IfInvalid(null))(value); }\nfunction setCountTextContent(countElement, text) { return countElement ? countElement.textContent = text : undefined; }\nfunction setCountText(el) { return el.count ? setCountTextContent(el.countElement, `${Get(el.value, 'length', 0)}${el.max ? `/${el.max}` : ''}`) : undefined; }\nfunction orRevert(conditionFunction, modifierFunction = (value) => value) {\n    return function (value, observer) {\n        return conditionFunction(value) ? modifierFunction(value) : observer ? observer.changed : undefined;\n    };\n}\nfunction initialValue(host, key) {\n    if (slotProperties.indexOf(key) > -1) {\n        const child = host.querySelector(`[slot=\"${key}\"]`);\n        if (child) {\n            return child;\n        }\n    }\n    const attrValue = host.getAttribute(key);\n    if (attrValue !== null) {\n        return attrValue;\n    }\n    if (key === 'inputid') {\n        return ID();\n    }\n    return propertyMeta[key].initial;\n}\nfunction queryShadow(el, selector) { return !el || !el.shadowRoot ? null : el.shadowRoot.querySelector(selector); }\nfunction getSlot(el, name) { return queryShadow(el, `[name=\"${name}\"]`); }\nfunction elementCreateOptions(tag, slot) {\n    return function (value) {\n        return Create({ tag, attributes: { slot }, properties: { innerHTML: htmlValue(value) } });\n    };\n}\nfunction createInput(_value) {\n    return Create({ tag: 'input', attributes: { slot: 'input', placeholder: ' ' } });\n}\nfunction applyCreated(element) {\n    element.createdOn = element.createdOn || new Date().getTime();\n    return element;\n}\nfunction slotFormatter(createFn, applyFn = (v) => v, key) {\n    return function formatter(value) {\n        const type = Type(value);\n        if (['string', 'dom'].indexOf(type) === -1) {\n            value = '';\n        }\n        if (type === 'dom') {\n            if (value.slot !== key) {\n                value.slot = key;\n            }\n            return applyFn(value);\n        }\n        if (IfSelector(value)) {\n            const element = document.body.querySelector(value);\n            if (element) {\n                if (element.slot !== key) {\n                    element.slot = key;\n                }\n                return applyFn(element);\n            }\n        }\n        const created = createFn(value);\n        return applyFn(created);\n    };\n}\nfunction slotEvent(host, name) {\n    const slot = getSlot(host, name);\n    if (!slot) {\n        return;\n    }\n    const eventName = `${name}SlotChange`;\n    if (!host.events[eventName]) {\n        host.events[eventName] = EventObserver(slot, 'slotchange');\n        host.events[eventName].subscribe(() => {\n            const assigned = Array.from(slot.assignedNodes()).sort((a, b) => {\n                const createdOnA = a.createdOn;\n                const createdOnB = b.createdOn;\n                return !createdOnA && !createdOnB ? 0 : !createdOnA ? 1 : !createdOnB ? -1 : createdOnA > createdOnB ? 1 : -1;\n            });\n            const next = assigned.pop();\n            if (next && !next.isSameNode(host.state[name].value)) {\n                host.state[name].next(next);\n            }\n            while (assigned.length) {\n                RemoveElement(assigned.pop());\n            }\n        });\n    }\n}\nconst propertyMeta = {\n    autocomplete: {\n        initial: 'on',\n        inputAttribute: true,\n        formatter: (value) => {\n            if (value === 'true' || value === true) {\n                return 'on';\n            }\n            if (value === 'false' || value === false) {\n                return 'off';\n            }\n            if (typeof value !== 'string') {\n                return null;\n            }\n            return value;\n        }\n    },\n    autofocus: {\n        initial: false,\n        inputAttribute: true,\n        formatter: boolOrFalse,\n        matchType: true\n    },\n    count: {\n        initial: false,\n        formatter: boolOrFalse,\n        matchType: true\n    },\n    disabled: {\n        initial: false,\n        inputAttribute: true,\n        formatter: boolOrFalse,\n        matchType: true\n    },\n    error: {\n        initial: '',\n        formatter: slotFormatter(elementCreateOptions('div', 'error'), applyCreated, 'error')\n    },\n    help: {\n        initial: '',\n        formatter: slotFormatter(elementCreateOptions('div', 'help'), applyCreated, 'help')\n    },\n    iconleft: {\n        initial: '',\n        formatter: slotFormatter(elementCreateOptions('div', 'iconleft'), applyCreated, 'iconleft')\n    },\n    iconright: {\n        initial: '',\n        formatter: slotFormatter(elementCreateOptions('div', 'iconright'), applyCreated, 'iconright')\n    },\n    input: {\n        initial: null,\n        formatter: slotFormatter(createInput, applyCreated, 'input')\n    },\n    inputid: {\n        initial: '',\n        inputAttribute: true,\n        matchType: true,\n        formatter: orRevert(value => !!value && typeof value === 'string')\n    },\n    label: {\n        initial: '',\n        formatter: slotFormatter(elementCreateOptions('label', 'label'), applyCreated, 'label')\n    },\n    max: {\n        initial: null,\n        inputAttribute: true,\n        formatter: numberOrNull\n    },\n    min: {\n        initial: null,\n        inputAttribute: true,\n        formatter: numberOrNull\n    },\n    name: {\n        initial: '',\n        inputAttribute: true,\n        formatter: stringOrNull\n    },\n    pattern: {\n        initial: null,\n        inputAttribute: true,\n        formatter: stringOrNull\n    },\n    required: {\n        initial: false,\n        inputAttribute: true,\n        formatter: boolOrFalse,\n        matchType: true\n    },\n    type: {\n        initial: 'text',\n        inputAttribute: true,\n        matchType: true,\n        formatter: Pipe((value) => Try(() => value.toLowerCase()), IndexOf(types), IfInvalid(types[0]))\n    },\n    value: {\n        initial: null,\n        inputAttribute: true,\n        formatter: (host) => (newValue, observer) => {\n            if (!host.state.disabled || !host.disabled) {\n                if (typeof newValue === 'string') {\n                    return newValue;\n                }\n            }\n            if (observer) {\n                return observer.changed;\n            }\n        }\n    }\n};\nfunction getInputAttributes() {\n    return Object.keys(propertyMeta)\n        .reduce((result, key) => propertyMeta[key].inputAttribute ? result.concat([key]) : result, []);\n}\nfunction updateInputAttributes(el, changedAttributeKeys = getInputAttributes()) {\n    if (!el || !el.state) {\n        return;\n    }\n    const input = el.input;\n    const label = el.label;\n    if (!input) {\n        return;\n    }\n    changedAttributeKeys.forEach(attr => {\n        const value = el.state[attr].value;\n        if (attr === 'value') {\n            if (el.state.disabled && el.state.disabled.value === true) {\n                return;\n            }\n            if (input.value !== value && value !== undefined) {\n                input.value = value;\n            }\n            setCountText(el);\n            el.setLabelPosition();\n            const validationMessage = el.validationMessage;\n            if (el.error && !validationMessage) {\n                el.error = validationMessage;\n            }\n            return;\n        }\n        if (attr === 'max') {\n            setCountText(el);\n            return SetAttribute(input, 'maxlength', value);\n        }\n        if (attr === 'min') {\n            return SetAttribute(input, 'minlength', value);\n        }\n        if (attr === 'inputid') {\n            SetAttribute(label, 'for', value);\n            return SetAttribute(input, 'id', value);\n        }\n        if (['required', 'disabled'].indexOf(attr) > -1) {\n            return SetAttribute(input, attr, trueOrNull(value));\n        }\n        if (attr === 'autofocus') {\n            const autofocus = trueOrNull(value);\n            SetAttribute(input, attr, autofocus);\n            if (autofocus) {\n                input.focus();\n            }\n            else if (el.focused) {\n                input.blur();\n            }\n            return;\n        }\n        SetAttribute(input, attr, value);\n    });\n}\nfunction subscribeStates(el) {\n    el.state.input.subscribe((input) => {\n        SetAttribute(input, 'placeholder', ' ');\n        append(el)(input);\n        el.inputid = input.id || el.inputid;\n        updateInputAttributes(el);\n    });\n    el.state.label.subscribe((label) => {\n        append(el)(label);\n        updateInputAttributes(el);\n    });\n    el.state.help.subscribe(append(el));\n    el.state.iconleft.subscribe(append(el));\n    el.state.iconright.subscribe(append(el));\n    el.state.count.subscribe((count) => count ? setCountText(el) : setCountTextContent(el.countElement, ''));\n    el.state.error.subscribe((errorElement) => {\n        append(el)(errorElement);\n        SetAttribute(el, 'error-message', !!el.validationMessage ? el.validationMessage : null);\n    });\n    getInputAttributes().forEach(attr => el.state[attr].subscribe(() => updateInputAttributes(el, [attr])));\n}\nexport default class FieldText extends HTMLElement {\n    constructor() {\n        super();\n        this.state = {};\n        this.events = {};\n        if (!this.shadowRoot) {\n            const shadowRoot = this.attachShadow({ mode: 'open' });\n            shadowRoot.innerHTML = `<style>${styles}</style>${html}`;\n        }\n        this.state = Object.freeze(Object.keys(propertyMeta).reduce((result, key) => Object.assign(result, {\n            [key]: Observer(initialValue(this, key), {\n                matchType: propertyMeta[key].matchType,\n                formatter: key === 'value' ? propertyMeta[key].formatter(this) : propertyMeta[key].formatter\n            })\n        }), {}));\n        subscribeStates(this);\n    }\n    static get observedAttributes() { return Object.keys(propertyMeta); }\n    get autocomplete() { return this.state.autocomplete.value; }\n    set autocomplete(v) { this.state.autocomplete.next(v); }\n    get autofocus() { return this.state.autofocus.value; }\n    set autofocus(v) { this.state.autofocus.next(v); }\n    get count() { return this.state.count.value; }\n    set count(v) { this.state.count.next(v); }\n    get disabled() { return this.state.disabled.value; }\n    set disabled(v) { this.state.disabled.next(v); }\n    get error() { return this.state.error.value; }\n    set error(v) { this.state.error.next(v); }\n    get help() { return this.state.help.value; }\n    set help(v) { this.state.help.next(v); }\n    get iconleft() { return this.state.iconleft.value; }\n    set iconleft(v) { this.state.iconleft.next(v); }\n    get iconright() { return this.state.iconright.value; }\n    set iconright(v) { this.state.iconright.next(v); }\n    get input() { return this.state.input.value; }\n    set input(v) { this.state.input.next(v); }\n    get inputid() { return this.state.inputid.value; }\n    set inputid(v) { this.state.inputid.next(v); }\n    get label() { return this.state.label.value; }\n    set label(v) { this.state.label.next(v); }\n    get max() { return this.state.max.value; }\n    set max(v) { this.state.max.next(v); }\n    get min() { return this.state.min.value; }\n    set min(v) { this.state.min.next(v); }\n    get name() { return this.state.name.value; }\n    set name(v) { this.state.name.next(v); }\n    get pattern() { return this.state.pattern.value; }\n    set pattern(v) { this.state.pattern.next(v); }\n    get required() { return this.state.required.value; }\n    set required(v) { this.state.required.next(v); }\n    get type() {\n        return this.state.type.value;\n    }\n    set type(v) { this.state.type.next(v); }\n    get value() { return this.state.value.value; }\n    set value(v) { this.state.value.next(v); }\n    get countElement() { return queryShadow(this, '.field-count-text'); }\n    get focused() { return !!document.activeElement && this.inputid === document.activeElement.id; }\n    get form() { return this.closest('form'); }\n    get isempty() { return this.value == '' || this.value == undefined; }\n    get validity() { return this.input ? this.input.validity : undefined; }\n    get validationMessage() { return Get(this, 'input.validationMessage', ''); }\n    set validationMessage(error) { this.input ? this.input.setCustomValidity(error) : undefined; }\n    setLabelPosition() {\n        const focused = this.focused.toString();\n        const empty = this.isempty.toString();\n        const attrFocused = this.getAttribute('focused');\n        const attrEmpty = this.getAttribute('empty');\n        if (focused !== attrFocused) {\n            this.setAttribute('focused', focused);\n        }\n        if (empty !== attrEmpty) {\n            this.setAttribute('empty', empty);\n        }\n        return focused || !empty;\n    }\n    attributeChangedCallback(name, _oldValue, newValue) {\n        if (this.state[name]) {\n            this.state[name].next(newValue);\n        }\n    }\n    connectedCallback() {\n        slotProperties.forEach((key) => slotEvent(this, key));\n        if (!this.events.keydown) {\n            this.events.keydown = EventObserver(this, 'keydown');\n            this.events.keydown.subscribe((e) => {\n                if (e.key && e.key.toLowerCase() === 'enter') {\n                    DispatchEvent(this, 'formsubmit', { originalEvent: e, field: this });\n                }\n            });\n        }\n        if (!this.events.input) {\n            this.events.input = EventObserver(this, 'input');\n            this.events.input.subscribe(() => this.state.value.next(Get(this, 'input.value', null)));\n        }\n        if (!this.events.animationStart) {\n            this.events.animationStart = EventObserver(queryShadow(this, '.field-input'), 'animationstart');\n            this.events.animationStart.subscribe(() => this.setLabelPosition());\n        }\n        if (!this.events.focus) {\n            this.events.focus = EventObserver(this, 'focus');\n            this.events.focus.subscribe(() => this.setLabelPosition());\n        }\n        if (!this.events.blur) {\n            this.events.blur = EventObserver(this, 'blur');\n            this.events.blur.subscribe(() => {\n                this.setLabelPosition();\n                this.error = this.validationMessage;\n            });\n        }\n        this.setLabelPosition();\n    }\n    disconnectedCallback() {\n        Object.keys(this.events).forEach(key => {\n            this.events[key].complete();\n            delete this.events[key];\n        });\n    }\n}\nwindow.customElements.define('field-text', FieldText);\n","lines":["import Observer from \"../../utils/observe/observer.js\";\n","import EventObserver from \"../../utils/observe/event-observer.js\";\n","import Type from \"../../utils/types/type.js\";\n","import Pipe from \"../../utils/function-helpers/pipe.js\";\n","import ToBool from \"../../utils/conversion/to-bool.js\";\n","import ToNumber from \"../../utils/conversion/to-number.js\";\n","import IfInvalid from \"../../utils/checks/if-invalid.js\";\n","import { SantizedHTML } from \"../../utils/validate/html.js\";\n","import Create from \"../../utils/dom/create.js\";\n","import ID from \"../../utils/id.js\";\n","import SetAttribute from \"../../utils/dom/set-attribute.js\";\n","import IsNothing from \"../../utils/checks/is-nothing.js\";\n","import Get from \"../../utils/objects/get.js\";\n","import DispatchEvent from \"../../utils/dom/dispatch-event.js\";\n","import IfSelector from \"../../utils/checks/if-selector.js\";\n","import RemoveElement from \"../../utils/dom/remove-element.js\";\n","import IndexOf from \"../../utils/checks/index-of.js\";\n","import Try from \"../../utils/try.js\";\n","const html = \"<div class=\\\"field-element-container\\\"><div class=\\\"field-element-container-inner\\\"><span class=\\\"icon-container icon-padding\\\"><slot name=\\\"iconleft\\\"></slot></span><div class=\\\"field-input-label\\\"><div class=\\\"field-label\\\"><slot name=\\\"label\\\"></slot></div><div class=\\\"field-input\\\"><slot name=\\\"input\\\"></slot></div></div><span class=\\\"icon-container error-icon\\\"><slot name=\\\"error-icon\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" viewBox=\\\"0 0 24 24\\\" style=\\\"width:100%;fill:currentColor\\\"><path d=\\\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\\\"></path></svg></slot></span><span class=\\\"icon-container\\\"><slot name=\\\"iconright\\\"></slot></span></div><span class=\\\"field-input-bottom-container\\\"><span class=\\\"field-error-text\\\"><slot name=\\\"error\\\"></slot></span><span class=\\\"field-input-bottom\\\"><span class=\\\"field-help-text\\\"><slot name=\\\"help\\\"></slot></span><span class=\\\"field-count-text\\\"></span></span></span></div>\";\n","const styles = \"@keyframes rotating{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}@keyframes onAutoFillStart{from{background:transparent}to{background:transparent}}@keyframes onAutoFillCancel{from{background:transparent}to{background:transparent}}@keyframes delayOverflowIn{0%{overflow:hidden}99%{overflow:hidden}100%{overflow:visible}}@keyframes delayOverflowOut{0%{overflow:visible}99%{overflow:visible}100%{overflow:hidden}}@keyframes fadeIn{0%{opacity:0}10%{opacity:0}100%{opacity:1}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}:host{display:inline-block;max-width:100%;box-sizing:border-box;vertical-align:text-bottom;line-height:150%;font-size:inherit;color:inherit}:host *{box-sizing:border-box}:host([focused=\\\"true\\\"]) .field-element-container-inner{background-color:#fff}:host([disabled=\\\"true\\\"]) .field-element-container-inner{opacity:0.62}:host([error-message]:not([error-message=\\\"\\\"])) .field-element-container-inner{box-shadow:0 0 0 1px #df0700}:host .field-input-label{flex:1 0 50%;display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start;min-height:2.725em}:host .field-input{width:100%}:host .icon-container{position:relative;top:0;left:0;margin:0;width:auto;height:1.5em;max-width:2.5em;display:inline-flex;line-height:100%;font-size:inherit;pointer-events:none;color:rgba(34,34,34,0.75)}:host .icon-container slot[name=\\\"icon\\\"]{display:flex;height:1.5em;width:auto;max-width:2em;align-items:center;justify-content:flex-start;font-size:initial}:host .icon-container.icon-padding{padding-left:0.25em;margin-right:-0.25em}::slotted([slot=\\\"icon\\\"]){height:1.5em;width:1.5em;min-width:1.5em;min-height:1.5em;margin:0 0 0 0.62em}:host .field-input-bottom-container{display:block;padding:0em 0.125em;flex-grow:1;width:100%;color:inherit;font-size:70%;line-height:150%}:host .field-input-bottom-container .field-input-bottom{display:flex;justify-content:space-between;align-items:flex-start;flex-grow:1;width:100%;font-weight:100;opacity:0.62;color:inherit}:host .field-error-text{display:block;color:#df0700}.field-element-container-inner{position:relative;width:auto;max-width:100%;min-height:2.725em;display:flex;align-items:center;justify-content:flex-start;flex-wrap:wrap;background-color:#eee;border-radius:3px;transition:background-color 0.2s}:host .field-label{width:100%;min-height:1.05em;text-align:left;display:flex;align-items:center;transform:translateX(-0.2em) translateY(0.7em) translateZ(0px) scale(1);transform-origin:0 0;font-size:inherit;pointer-events:none;position:relative;line-height:150%;padding:0 0 0 0.75em;margin-bottom:-1.5em;color:rgba(34,34,34,0.62);transition:transform 0.2s, opacity 0.2s ease-in 0.062s}:host([focused=\\\"true\\\"]) .field-label,:host([empty=\\\"false\\\"]) .field-label{transform:translateX(0.2em) translateY(0.25em) translateZ(0) scale(0.7)}:host([required=\\\"true\\\"]) .field-label ::before{content:\\\"*\\\";color:#df0700;line-height:100%;position:relative;top:0.25em;margin-right:0.25em;font-style:italic}:host .error-icon{width:0em;color:#df0700;transition:width 0.2s}:host([error-message]:not([error-message=\\\"\\\"])) .error-icon{width:1.5em}::slotted([slot=\\\"input\\\"]){padding:1.3em 0.7em 0.3em;position:relative;margin:0;height:auto;width:100%;border-radius:3px;background-color:transparent;color:#222;border:none !important;box-sizing:border-box;height:100%;flex-grow:1;font-size:inherit;font-family:inherit;line-height:initial;outline:none !important;appearance:none;transition:color 0.2s, background-color 0.2s, background-position 0.2s, transform 0.2s}::slotted([slot=\\\"input\\\"])::-webkit-input-placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"]):-webkit-input-placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"]):-ms-input-placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"])::placeholder{color:transparent;opacity:0}::slotted([slot=\\\"input\\\"]:focus){background-color:transparent}::slotted([slot=\\\"input\\\"]:-internal-autofill-selected){background-color:transparent !important}::slotted([slot=\\\"input\\\"]:-webkit-autofill),::slotted([slot=\\\"input\\\"]:-webkit-autofill:hover),::slotted([slot=\\\"input\\\"]:-webkit-autofill:focus),::slotted([slot=\\\"input\\\"]:-webkit-autofill:active){animation-name:onAutoFillStart;transition:background-color 50000s ease-in-out 0s}::slotted([slot=\\\"input\\\"]:not(:-webkit-autofill)){animation-name:onAutoFillCancel}\";\n","const slotProperties = ['label', 'error', 'help', 'input', 'iconleft', 'iconright'];\n","const types = ['text', 'email', 'search', 'tel', 'url', 'password'];\n","const boolOrFalse = Pipe(ToBool, IfInvalid(false));\n","function htmlValue(value) { return typeof value === 'string' ? SantizedHTML(value) : SantizedHTML(Get(value, 'innerHTML', '')); }\n","function append(el) { return function (element) { el && !el.contains(element) ? el.appendChild(element) : undefined; }; }\n","function trueOrNull(value) { return value === true ? true : null; }\n","function stringOrNull(value) { return !!value && typeof value === 'string' ? value : null; }\n","function numberOrNull(value) { return IsNothing(value) ? null : Pipe(ToNumber, IfInvalid(null))(value); }\n","function setCountTextContent(countElement, text) { return countElement ? countElement.textContent = text : undefined; }\n","function setCountText(el) { return el.count ? setCountTextContent(el.countElement, `${Get(el.value, 'length', 0)}${el.max ? `/${el.max}` : ''}`) : undefined; }\n","function orRevert(conditionFunction, modifierFunction = (value) => value) {\n","    return function (value, observer) {\n","        return conditionFunction(value) ? modifierFunction(value) : observer ? observer.changed : undefined;\n","    };\n","}\n","function initialValue(host, key) {\n","    if (slotProperties.indexOf(key) > -1) {\n","        const child = host.querySelector(`[slot=\"${key}\"]`);\n","        if (child) {\n","            return child;\n","        }\n","    }\n","    const attrValue = host.getAttribute(key);\n","    if (attrValue !== null) {\n","        return attrValue;\n","    }\n","    if (key === 'inputid') {\n","        return ID();\n","    }\n","    return propertyMeta[key].initial;\n","}\n","function queryShadow(el, selector) { return !el || !el.shadowRoot ? null : el.shadowRoot.querySelector(selector); }\n","function getSlot(el, name) { return queryShadow(el, `[name=\"${name}\"]`); }\n","function elementCreateOptions(tag, slot) {\n","    return function (value) {\n","        return Create({ tag, attributes: { slot }, properties: { innerHTML: htmlValue(value) } });\n","    };\n","}\n","function createInput(_value) {\n","    return Create({ tag: 'input', attributes: { slot: 'input', placeholder: ' ' } });\n","}\n","function applyCreated(element) {\n","    element.createdOn = element.createdOn || new Date().getTime();\n","    return element;\n","}\n","function slotFormatter(createFn, applyFn = (v) => v, key) {\n","    return function formatter(value) {\n","        const type = Type(value);\n","        if (['string', 'dom'].indexOf(type) === -1) {\n","            value = '';\n","        }\n","        if (type === 'dom') {\n","            if (value.slot !== key) {\n","                value.slot = key;\n","            }\n","            return applyFn(value);\n","        }\n","        if (IfSelector(value)) {\n","            const element = document.body.querySelector(value);\n","            if (element) {\n","                if (element.slot !== key) {\n","                    element.slot = key;\n","                }\n","                return applyFn(element);\n","            }\n","        }\n","        const created = createFn(value);\n","        return applyFn(created);\n","    };\n","}\n","function slotEvent(host, name) {\n","    const slot = getSlot(host, name);\n","    if (!slot) {\n","        return;\n","    }\n","    const eventName = `${name}SlotChange`;\n","    if (!host.events[eventName]) {\n","        host.events[eventName] = EventObserver(slot, 'slotchange');\n","        host.events[eventName].subscribe(() => {\n","            const assigned = Array.from(slot.assignedNodes()).sort((a, b) => {\n","                const createdOnA = a.createdOn;\n","                const createdOnB = b.createdOn;\n","                return !createdOnA && !createdOnB ? 0 : !createdOnA ? 1 : !createdOnB ? -1 : createdOnA > createdOnB ? 1 : -1;\n","            });\n","            const next = assigned.pop();\n","            if (next && !next.isSameNode(host.state[name].value)) {\n","                host.state[name].next(next);\n","            }\n","            while (assigned.length) {\n","                RemoveElement(assigned.pop());\n","            }\n","        });\n","    }\n","}\n","const propertyMeta = {\n","    autocomplete: {\n","        initial: 'on',\n","        inputAttribute: true,\n","        formatter: (value) => {\n","            if (value === 'true' || value === true) {\n","                return 'on';\n","            }\n","            if (value === 'false' || value === false) {\n","                return 'off';\n","            }\n","            if (typeof value !== 'string') {\n","                return null;\n","            }\n","            return value;\n","        }\n","    },\n","    autofocus: {\n","        initial: false,\n","        inputAttribute: true,\n","        formatter: boolOrFalse,\n","        matchType: true\n","    },\n","    count: {\n","        initial: false,\n","        formatter: boolOrFalse,\n","        matchType: true\n","    },\n","    disabled: {\n","        initial: false,\n","        inputAttribute: true,\n","        formatter: boolOrFalse,\n","        matchType: true\n","    },\n","    error: {\n","        initial: '',\n","        formatter: slotFormatter(elementCreateOptions('div', 'error'), applyCreated, 'error')\n","    },\n","    help: {\n","        initial: '',\n","        formatter: slotFormatter(elementCreateOptions('div', 'help'), applyCreated, 'help')\n","    },\n","    iconleft: {\n","        initial: '',\n","        formatter: slotFormatter(elementCreateOptions('div', 'iconleft'), applyCreated, 'iconleft')\n","    },\n","    iconright: {\n","        initial: '',\n","        formatter: slotFormatter(elementCreateOptions('div', 'iconright'), applyCreated, 'iconright')\n","    },\n","    input: {\n","        initial: null,\n","        formatter: slotFormatter(createInput, applyCreated, 'input')\n","    },\n","    inputid: {\n","        initial: '',\n","        inputAttribute: true,\n","        matchType: true,\n","        formatter: orRevert(value => !!value && typeof value === 'string')\n","    },\n","    label: {\n","        initial: '',\n","        formatter: slotFormatter(elementCreateOptions('label', 'label'), applyCreated, 'label')\n","    },\n","    max: {\n","        initial: null,\n","        inputAttribute: true,\n","        formatter: numberOrNull\n","    },\n","    min: {\n","        initial: null,\n","        inputAttribute: true,\n","        formatter: numberOrNull\n","    },\n","    name: {\n","        initial: '',\n","        inputAttribute: true,\n","        formatter: stringOrNull\n","    },\n","    pattern: {\n","        initial: null,\n","        inputAttribute: true,\n","        formatter: stringOrNull\n","    },\n","    required: {\n","        initial: false,\n","        inputAttribute: true,\n","        formatter: boolOrFalse,\n","        matchType: true\n","    },\n","    type: {\n","        initial: 'text',\n","        inputAttribute: true,\n","        matchType: true,\n","        formatter: Pipe((value) => Try(() => value.toLowerCase()), IndexOf(types), IfInvalid(types[0]))\n","    },\n","    value: {\n","        initial: null,\n","        inputAttribute: true,\n","        formatter: (host) => (newValue, observer) => {\n","            if (!host.state.disabled || !host.disabled) {\n","                if (typeof newValue === 'string') {\n","                    return newValue;\n","                }\n","            }\n","            if (observer) {\n","                return observer.changed;\n","            }\n","        }\n","    }\n","};\n","function getInputAttributes() {\n","    return Object.keys(propertyMeta)\n","        .reduce((result, key) => propertyMeta[key].inputAttribute ? result.concat([key]) : result, []);\n","}\n","function updateInputAttributes(el, changedAttributeKeys = getInputAttributes()) {\n","    if (!el || !el.state) {\n","        return;\n","    }\n","    const input = el.input;\n","    const label = el.label;\n","    if (!input) {\n","        return;\n","    }\n","    changedAttributeKeys.forEach(attr => {\n","        const value = el.state[attr].value;\n","        if (attr === 'value') {\n","            if (el.state.disabled && el.state.disabled.value === true) {\n","                return;\n","            }\n","            if (input.value !== value && value !== undefined) {\n","                input.value = value;\n","            }\n","            setCountText(el);\n","            el.setLabelPosition();\n","            const validationMessage = el.validationMessage;\n","            if (el.error && !validationMessage) {\n","                el.error = validationMessage;\n","            }\n","            return;\n","        }\n","        if (attr === 'max') {\n","            setCountText(el);\n","            return SetAttribute(input, 'maxlength', value);\n","        }\n","        if (attr === 'min') {\n","            return SetAttribute(input, 'minlength', value);\n","        }\n","        if (attr === 'inputid') {\n","            SetAttribute(label, 'for', value);\n","            return SetAttribute(input, 'id', value);\n","        }\n","        if (['required', 'disabled'].indexOf(attr) > -1) {\n","            return SetAttribute(input, attr, trueOrNull(value));\n","        }\n","        if (attr === 'autofocus') {\n","            const autofocus = trueOrNull(value);\n","            SetAttribute(input, attr, autofocus);\n","            if (autofocus) {\n","                input.focus();\n","            }\n","            else if (el.focused) {\n","                input.blur();\n","            }\n","            return;\n","        }\n","        SetAttribute(input, attr, value);\n","    });\n","}\n","function subscribeStates(el) {\n","    el.state.input.subscribe((input) => {\n","        SetAttribute(input, 'placeholder', ' ');\n","        append(el)(input);\n","        el.inputid = input.id || el.inputid;\n","        updateInputAttributes(el);\n","    });\n","    el.state.label.subscribe((label) => {\n","        append(el)(label);\n","        updateInputAttributes(el);\n","    });\n","    el.state.help.subscribe(append(el));\n","    el.state.iconleft.subscribe(append(el));\n","    el.state.iconright.subscribe(append(el));\n","    el.state.count.subscribe((count) => count ? setCountText(el) : setCountTextContent(el.countElement, ''));\n","    el.state.error.subscribe((errorElement) => {\n","        append(el)(errorElement);\n","        SetAttribute(el, 'error-message', !!el.validationMessage ? el.validationMessage : null);\n","    });\n","    getInputAttributes().forEach(attr => el.state[attr].subscribe(() => updateInputAttributes(el, [attr])));\n","}\n","export default class FieldText extends HTMLElement {\n","    constructor() {\n","        super();\n","        this.state = {};\n","        this.events = {};\n","        if (!this.shadowRoot) {\n","            const shadowRoot = this.attachShadow({ mode: 'open' });\n","            shadowRoot.innerHTML = `<style>${styles}</style>${html}`;\n","        }\n","        this.state = Object.freeze(Object.keys(propertyMeta).reduce((result, key) => Object.assign(result, {\n","            [key]: Observer(initialValue(this, key), {\n","                matchType: propertyMeta[key].matchType,\n","                formatter: key === 'value' ? propertyMeta[key].formatter(this) : propertyMeta[key].formatter\n","            })\n","        }), {}));\n","        subscribeStates(this);\n","    }\n","    static get observedAttributes() { return Object.keys(propertyMeta); }\n","    get autocomplete() { return this.state.autocomplete.value; }\n","    set autocomplete(v) { this.state.autocomplete.next(v); }\n","    get autofocus() { return this.state.autofocus.value; }\n","    set autofocus(v) { this.state.autofocus.next(v); }\n","    get count() { return this.state.count.value; }\n","    set count(v) { this.state.count.next(v); }\n","    get disabled() { return this.state.disabled.value; }\n","    set disabled(v) { this.state.disabled.next(v); }\n","    get error() { return this.state.error.value; }\n","    set error(v) { this.state.error.next(v); }\n","    get help() { return this.state.help.value; }\n","    set help(v) { this.state.help.next(v); }\n","    get iconleft() { return this.state.iconleft.value; }\n","    set iconleft(v) { this.state.iconleft.next(v); }\n","    get iconright() { return this.state.iconright.value; }\n","    set iconright(v) { this.state.iconright.next(v); }\n","    get input() { return this.state.input.value; }\n","    set input(v) { this.state.input.next(v); }\n","    get inputid() { return this.state.inputid.value; }\n","    set inputid(v) { this.state.inputid.next(v); }\n","    get label() { return this.state.label.value; }\n","    set label(v) { this.state.label.next(v); }\n","    get max() { return this.state.max.value; }\n","    set max(v) { this.state.max.next(v); }\n","    get min() { return this.state.min.value; }\n","    set min(v) { this.state.min.next(v); }\n","    get name() { return this.state.name.value; }\n","    set name(v) { this.state.name.next(v); }\n","    get pattern() { return this.state.pattern.value; }\n","    set pattern(v) { this.state.pattern.next(v); }\n","    get required() { return this.state.required.value; }\n","    set required(v) { this.state.required.next(v); }\n","    get type() {\n","        return this.state.type.value;\n","    }\n","    set type(v) { this.state.type.next(v); }\n","    get value() { return this.state.value.value; }\n","    set value(v) { this.state.value.next(v); }\n","    get countElement() { return queryShadow(this, '.field-count-text'); }\n","    get focused() { return !!document.activeElement && this.inputid === document.activeElement.id; }\n","    get form() { return this.closest('form'); }\n","    get isempty() { return this.value == '' || this.value == undefined; }\n","    get validity() { return this.input ? this.input.validity : undefined; }\n","    get validationMessage() { return Get(this, 'input.validationMessage', ''); }\n","    set validationMessage(error) { this.input ? this.input.setCustomValidity(error) : undefined; }\n","    setLabelPosition() {\n","        const focused = this.focused.toString();\n","        const empty = this.isempty.toString();\n","        const attrFocused = this.getAttribute('focused');\n","        const attrEmpty = this.getAttribute('empty');\n","        if (focused !== attrFocused) {\n","            this.setAttribute('focused', focused);\n","        }\n","        if (empty !== attrEmpty) {\n","            this.setAttribute('empty', empty);\n","        }\n","        return focused || !empty;\n","    }\n","    attributeChangedCallback(name, _oldValue, newValue) {\n","        if (this.state[name]) {\n","            this.state[name].next(newValue);\n","        }\n","    }\n","    connectedCallback() {\n","        slotProperties.forEach((key) => slotEvent(this, key));\n","        if (!this.events.keydown) {\n","            this.events.keydown = EventObserver(this, 'keydown');\n","            this.events.keydown.subscribe((e) => {\n","                if (e.key && e.key.toLowerCase() === 'enter') {\n","                    DispatchEvent(this, 'formsubmit', { originalEvent: e, field: this });\n","                }\n","            });\n","        }\n","        if (!this.events.input) {\n","            this.events.input = EventObserver(this, 'input');\n","            this.events.input.subscribe(() => this.state.value.next(Get(this, 'input.value', null)));\n","        }\n","        if (!this.events.animationStart) {\n","            this.events.animationStart = EventObserver(queryShadow(this, '.field-input'), 'animationstart');\n","            this.events.animationStart.subscribe(() => this.setLabelPosition());\n","        }\n","        if (!this.events.focus) {\n","            this.events.focus = EventObserver(this, 'focus');\n","            this.events.focus.subscribe(() => this.setLabelPosition());\n","        }\n","        if (!this.events.blur) {\n","            this.events.blur = EventObserver(this, 'blur');\n","            this.events.blur.subscribe(() => {\n","                this.setLabelPosition();\n","                this.error = this.validationMessage;\n","            });\n","        }\n","        this.setLabelPosition();\n","    }\n","    disconnectedCallback() {\n","        Object.keys(this.events).forEach(key => {\n","            this.events[key].complete();\n","            delete this.events[key];\n","        });\n","    }\n","}\n","window.customElements.define('field-text', FieldText);\n",""],"characterCount":17185,"percentage":23.142275240034916,"nodes":[{"name":"htmlValue","isBlockCoverage":false,"ranges":[{"startOffset":6639,"endOffset":6768,"count":2,"snippet":"function htmlValue(value) { return typeof value === 'string' ? SantizedHTML(value) : SantizedHTML(Get(value, 'innerHTML', '')); }","linesDetailed":[{"startLine":22,"startColumn":52,"endLine":22,"endColumn":51,"snippet":""},{"startLine":23,"startColumn":0,"endLine":23,"endColumn":129,"snippet":"function htmlValue(value) { return typeof value === 'string' ? SantizedHTML(value) : SantizedHTML(Get(value, 'innerHTML', '')); }"}],"startPercent":0.3085323914861976,"endPercent":0.3145273724323822,"startLine":22,"startColumn":52,"startCharacter":6639,"endLine":23,"endColumn":129,"endCharacter":6768}]},{"name":"append","isBlockCoverage":false,"ranges":[{"startOffset":6769,"endOffset":6890,"count":2,"snippet":"function append(el) { return function (element) { el && !el.contains(element) ? el.appendChild(element) : undefined; }; }","linesDetailed":[{"startLine":23,"startColumn":130,"endLine":23,"endColumn":129,"snippet":""},{"startLine":24,"startColumn":0,"endLine":24,"endColumn":121,"snippet":"function append(el) { return function (element) { el && !el.contains(element) ? el.appendChild(element) : undefined; }; }"}],"startPercent":0.31457384515289527,"endPercent":0.32019704433497537,"startLine":23,"startColumn":130,"startCharacter":6769,"endLine":24,"endColumn":121,"endCharacter":6890}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":6798,"endOffset":6887,"count":2,"snippet":"function (element) { el && !el.contains(element) ? el.appendChild(element) : undefined; }","linesDetailed":[{"startLine":24,"startColumn":29,"endLine":24,"endColumn":118,"snippet":"function (element) { el && !el.contains(element) ? el.appendChild(element) : undefined; }"}],"startPercent":0.31592155404777394,"endPercent":0.3200576261734362,"startLine":24,"startColumn":29,"startCharacter":6798,"endLine":24,"endColumn":118,"endCharacter":6887}]},{"name":"trueOrNull","isBlockCoverage":false,"ranges":[{"startOffset":6891,"endOffset":6958,"count":3,"snippet":"function trueOrNull(value) { return value === true ? true : null; }","linesDetailed":[{"startLine":24,"startColumn":122,"endLine":24,"endColumn":121,"snippet":""},{"startLine":25,"startColumn":0,"endLine":25,"endColumn":67,"snippet":"function trueOrNull(value) { return value === true ? true : null; }"}],"startPercent":0.3202435170554884,"endPercent":0.32335718932986335,"startLine":24,"startColumn":122,"startCharacter":6891,"endLine":25,"endColumn":67,"endCharacter":6958}]},{"name":"setCountText","isBlockCoverage":false,"ranges":[{"startOffset":7278,"endOffset":7437,"count":2,"snippet":"function setCountText(el) { return el.count ? setCountTextContent(el.countElement, `${Get(el.value, 'length', 0)}${el.max ? `/${el.max}` : ''}`) : undefined; }","linesDetailed":[{"startLine":28,"startColumn":120,"endLine":28,"endColumn":119,"snippet":""},{"startLine":29,"startColumn":0,"endLine":29,"endColumn":159,"snippet":"function setCountText(el) { return el.count ? setCountTextContent(el.countElement, `${Get(el.value, 'length', 0)}${el.max ? `/${el.max}` : ''}`) : undefined; }"}],"startPercent":0.3382284598940422,"endPercent":0.34561762245561856,"startLine":28,"startColumn":120,"startCharacter":7278,"endLine":29,"endColumn":159,"endCharacter":7437}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":8324,"endOffset":8447,"count":2,"snippet":"function (value) {\n        return Create({ tag, attributes: { slot }, properties: { innerHTML: htmlValue(value) } });\n    }","linesDetailed":[{"startLine":54,"startColumn":11,"endLine":54,"endColumn":29,"snippet":"function (value) {"},{"startLine":55,"startColumn":0,"endLine":55,"endColumn":98,"snippet":"        return Create({ tag, attributes: { slot }, properties: { innerHTML: htmlValue(value) } });\n"},{"startLine":56,"startColumn":0,"endLine":56,"endColumn":5,"snippet":"    }"}],"startPercent":0.38683892555070176,"endPercent":0.392555070173808,"startLine":54,"startColumn":11,"startCharacter":8324,"endLine":56,"endColumn":5,"endCharacter":8447}]},{"name":"applyCreated","isBlockCoverage":false,"ranges":[{"startOffset":8570,"endOffset":8691,"count":2,"snippet":"function applyCreated(element) {\n    element.createdOn = element.createdOn || new Date().getTime();\n    return element;\n}","linesDetailed":[{"startLine":60,"startColumn":2,"endLine":60,"endColumn":1,"snippet":""},{"startLine":61,"startColumn":0,"endLine":61,"endColumn":32,"snippet":"function applyCreated(element) {\n"},{"startLine":62,"startColumn":0,"endLine":62,"endColumn":66,"snippet":"    element.createdOn = element.createdOn || new Date().getTime();\n"},{"startLine":63,"startColumn":0,"endLine":63,"endColumn":19,"snippet":"    return element;\n"},{"startLine":64,"startColumn":0,"endLine":64,"endColumn":1,"snippet":"}"}],"startPercent":0.3982712147969142,"endPercent":0.40389441397899434,"startLine":60,"startColumn":2,"startCharacter":8570,"endLine":64,"endColumn":1,"endCharacter":8691}]},{"name":"formatter","isBlockCoverage":false,"ranges":[{"startOffset":8763,"endOffset":9444,"count":2,"snippet":"function formatter(value) {\n        const type = Type(value);\n        if (['string', 'dom'].indexOf(type) === -1) {\n            value = '';\n        }\n        if (type === 'dom') {\n            if (value.slot !== key) {\n                value.slot = key;\n            }\n            return applyFn(value);\n        }\n        if (IfSelector(value)) {\n            const element = document.body.querySelector(value);\n            if (element) {\n                if (element.slot !== key) {\n                    element.slot = key;\n                }\n                return applyFn(element);\n            }\n        }\n        const created = createFn(value);\n        return applyFn(created);\n    }","linesDetailed":[{"startLine":66,"startColumn":11,"endLine":66,"endColumn":38,"snippet":"function formatter(value) {"},{"startLine":67,"startColumn":0,"endLine":67,"endColumn":33,"snippet":"        const type = Type(value);\n"},{"startLine":68,"startColumn":0,"endLine":68,"endColumn":53,"snippet":"        if (['string', 'dom'].indexOf(type) === -1) {\n"},{"startLine":69,"startColumn":0,"endLine":69,"endColumn":23,"snippet":"            value = '';\n"},{"startLine":70,"startColumn":0,"endLine":70,"endColumn":9,"snippet":"        }\n"},{"startLine":71,"startColumn":0,"endLine":71,"endColumn":29,"snippet":"        if (type === 'dom') {\n"},{"startLine":72,"startColumn":0,"endLine":72,"endColumn":37,"snippet":"            if (value.slot !== key) {\n"},{"startLine":73,"startColumn":0,"endLine":73,"endColumn":33,"snippet":"                value.slot = key;\n"},{"startLine":74,"startColumn":0,"endLine":74,"endColumn":13,"snippet":"            }\n"},{"startLine":75,"startColumn":0,"endLine":75,"endColumn":34,"snippet":"            return applyFn(value);\n"},{"startLine":76,"startColumn":0,"endLine":76,"endColumn":9,"snippet":"        }\n"},{"startLine":77,"startColumn":0,"endLine":77,"endColumn":32,"snippet":"        if (IfSelector(value)) {\n"},{"startLine":78,"startColumn":0,"endLine":78,"endColumn":63,"snippet":"            const element = document.body.querySelector(value);\n"},{"startLine":79,"startColumn":0,"endLine":79,"endColumn":26,"snippet":"            if (element) {\n"},{"startLine":80,"startColumn":0,"endLine":80,"endColumn":43,"snippet":"                if (element.slot !== key) {\n"},{"startLine":81,"startColumn":0,"endLine":81,"endColumn":39,"snippet":"                    element.slot = key;\n"},{"startLine":82,"startColumn":0,"endLine":82,"endColumn":17,"snippet":"                }\n"},{"startLine":83,"startColumn":0,"endLine":83,"endColumn":40,"snippet":"                return applyFn(element);\n"},{"startLine":84,"startColumn":0,"endLine":84,"endColumn":13,"snippet":"            }\n"},{"startLine":85,"startColumn":0,"endLine":85,"endColumn":9,"snippet":"        }\n"},{"startLine":86,"startColumn":0,"endLine":86,"endColumn":40,"snippet":"        const created = createFn(value);\n"},{"startLine":87,"startColumn":0,"endLine":87,"endColumn":32,"snippet":"        return applyFn(created);\n"},{"startLine":88,"startColumn":0,"endLine":88,"endColumn":5,"snippet":"    }"}],"startPercent":0.40724044985593455,"endPercent":0.43888837252532764,"startLine":66,"startColumn":11,"startCharacter":8763,"endLine":88,"endColumn":5,"endCharacter":9444}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":9745,"endOffset":10347,"count":4,"snippet":"() => {\n            const assigned = Array.from(slot.assignedNodes()).sort((a, b) => {\n                const createdOnA = a.createdOn;\n                const createdOnB = b.createdOn;\n                return !createdOnA && !createdOnB ? 0 : !createdOnA ? 1 : !createdOnB ? -1 : createdOnA > createdOnB ? 1 : -1;\n            });\n            const next = assigned.pop();\n            if (next && !next.isSameNode(host.state[name].value)) {\n                host.state[name].next(next);\n            }\n            while (assigned.length) {\n                RemoveElement(assigned.pop());\n            }\n        }","linesDetailed":[{"startLine":98,"startColumn":41,"endLine":98,"endColumn":48,"snippet":"() => {"},{"startLine":99,"startColumn":0,"endLine":99,"endColumn":78,"snippet":"            const assigned = Array.from(slot.assignedNodes()).sort((a, b) => {\n"},{"startLine":100,"startColumn":0,"endLine":100,"endColumn":47,"snippet":"                const createdOnA = a.createdOn;\n"},{"startLine":101,"startColumn":0,"endLine":101,"endColumn":47,"snippet":"                const createdOnB = b.createdOn;\n"},{"startLine":102,"startColumn":0,"endLine":102,"endColumn":126,"snippet":"                return !createdOnA && !createdOnB ? 0 : !createdOnA ? 1 : !createdOnB ? -1 : createdOnA > createdOnB ? 1 : -1;\n"},{"startLine":103,"startColumn":0,"endLine":103,"endColumn":15,"snippet":"            });\n"},{"startLine":104,"startColumn":0,"endLine":104,"endColumn":40,"snippet":"            const next = assigned.pop();\n"},{"startLine":105,"startColumn":0,"endLine":105,"endColumn":67,"snippet":"            if (next && !next.isSameNode(host.state[name].value)) {\n"},{"startLine":106,"startColumn":0,"endLine":106,"endColumn":44,"snippet":"                host.state[name].next(next);\n"},{"startLine":107,"startColumn":0,"endLine":107,"endColumn":13,"snippet":"            }\n"},{"startLine":108,"startColumn":0,"endLine":108,"endColumn":37,"snippet":"            while (assigned.length) {\n"},{"startLine":109,"startColumn":0,"endLine":109,"endColumn":46,"snippet":"                RemoveElement(assigned.pop());\n"},{"startLine":110,"startColumn":0,"endLine":110,"endColumn":13,"snippet":"            }\n"},{"startLine":111,"startColumn":0,"endLine":111,"endColumn":9,"snippet":"        }"}],"startPercent":0.45287666139975835,"endPercent":0.48085323914861977,"startLine":98,"startColumn":41,"startCharacter":9745,"endLine":111,"endColumn":9,"endCharacter":10347}]},{"name":"","isBlockCoverage":true,"ranges":[{"startOffset":9820,"endOffset":10068,"count":2,"snippet":"(a, b) => {\n                const createdOnA = a.createdOn;\n                const createdOnB = b.createdOn;\n                return !createdOnA && !createdOnB ? 0 : !createdOnA ? 1 : !createdOnB ? -1 : createdOnA > createdOnB ? 1 : -1;\n            }","linesDetailed":[{"startLine":99,"startColumn":67,"endLine":99,"endColumn":78,"snippet":"(a, b) => {"},{"startLine":100,"startColumn":0,"endLine":100,"endColumn":47,"snippet":"                const createdOnA = a.createdOn;\n"},{"startLine":101,"startColumn":0,"endLine":101,"endColumn":47,"snippet":"                const createdOnB = b.createdOn;\n"},{"startLine":102,"startColumn":0,"endLine":102,"endColumn":126,"snippet":"                return !createdOnA && !createdOnB ? 0 : !createdOnA ? 1 : !createdOnB ? -1 : createdOnA > createdOnB ? 1 : -1;\n"},{"startLine":103,"startColumn":0,"endLine":103,"endColumn":13,"snippet":"            }"}],"startPercent":0.45636211543823774,"endPercent":0.46788735012547633,"startLine":99,"startColumn":67,"startCharacter":9820,"endLine":103,"endColumn":13,"endCharacter":10068},{"startOffset":9963,"endOffset":9977,"count":0,"snippet":"&& !createdOnB","linesDetailed":[{"startLine":102,"startColumn":35,"endLine":102,"endColumn":49,"snippet":"&& !createdOnB"}],"startPercent":0.46300771447160516,"endPercent":0.46365833255878797,"startLine":102,"startColumn":35,"startCharacter":9963,"endLine":102,"endColumn":49,"endCharacter":9977},{"startOffset":9978,"endOffset":9981,"count":0,"snippet":"? 0","linesDetailed":[{"startLine":102,"startColumn":50,"endLine":102,"endColumn":53,"snippet":"? 0"}],"startPercent":0.463704805279301,"endPercent":0.46384422344084025,"startLine":102,"startColumn":50,"startCharacter":9978,"endLine":102,"endColumn":53,"endCharacter":9981},{"startOffset":9996,"endOffset":9999,"count":0,"snippet":"? 1","linesDetailed":[{"startLine":102,"startColumn":68,"endLine":102,"endColumn":71,"snippet":"? 1"}],"startPercent":0.4645413142485361,"endPercent":0.4646807324100753,"startLine":102,"startColumn":68,"startCharacter":9996,"endLine":102,"endColumn":71,"endCharacter":9999},{"startOffset":10014,"endOffset":10018,"count":0,"snippet":"? -1","linesDetailed":[{"startLine":102,"startColumn":86,"endLine":102,"endColumn":90,"snippet":"? -1"}],"startPercent":0.46537782321777116,"endPercent":0.4655637140998234,"startLine":102,"startColumn":86,"startCharacter":10014,"endLine":102,"endColumn":90,"endCharacter":10018},{"startOffset":10049,"endOffset":10053,"count":0,"snippet":": -1","linesDetailed":[{"startLine":102,"startColumn":121,"endLine":102,"endColumn":125,"snippet":": -1"}],"startPercent":0.46700436843572823,"endPercent":0.46719025931778047,"startLine":102,"startColumn":121,"startCharacter":10049,"endLine":102,"endColumn":125,"endCharacter":10053}]},{"name":"getInputAttributes","isBlockCoverage":false,"ranges":[{"startOffset":13314,"endOffset":13488,"count":1,"snippet":"function getInputAttributes() {\n    return Object.keys(propertyMeta)\n        .reduce((result, key) => propertyMeta[key].inputAttribute ? result.concat([key]) : result, []);\n}","linesDetailed":[{"startLine":224,"startColumn":3,"endLine":224,"endColumn":2,"snippet":""},{"startLine":225,"startColumn":0,"endLine":225,"endColumn":31,"snippet":"function getInputAttributes() {\n"},{"startLine":226,"startColumn":0,"endLine":226,"endColumn":36,"snippet":"    return Object.keys(propertyMeta)\n"},{"startLine":227,"startColumn":0,"endLine":227,"endColumn":103,"snippet":"        .reduce((result, key) => propertyMeta[key].inputAttribute ? result.concat([key]) : result, []);\n"},{"startLine":228,"startColumn":0,"endLine":228,"endColumn":1,"snippet":"}"}],"startPercent":0.6187378009108653,"endPercent":0.6268240542801375,"startLine":224,"startColumn":3,"startCharacter":13314,"endLine":228,"endColumn":1,"endCharacter":13488}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":13399,"endOffset":13480,"count":18,"snippet":"(result, key) => propertyMeta[key].inputAttribute ? result.concat([key]) : result","linesDetailed":[{"startLine":227,"startColumn":16,"endLine":227,"endColumn":97,"snippet":"(result, key) => propertyMeta[key].inputAttribute ? result.concat([key]) : result"}],"startPercent":0.6226879821544753,"endPercent":0.6264522725160331,"startLine":227,"startColumn":16,"startCharacter":13399,"endLine":227,"endColumn":97,"endCharacter":13480}]},{"name":"updateInputAttributes","isBlockCoverage":false,"ranges":[{"startOffset":13489,"endOffset":15204,"count":1,"snippet":"function updateInputAttributes(el, changedAttributeKeys = getInputAttributes()) {\n    if (!el || !el.state) {\n        return;\n    }\n    const input = el.input;\n    const label = el.label;\n    if (!input) {\n        return;\n    }\n    changedAttributeKeys.forEach(attr => {\n        const value = el.state[attr].value;\n        if (attr === 'value') {\n            if (el.state.disabled && el.state.disabled.value === true) {\n                return;\n            }\n            if (input.value !== value && value !== undefined) {\n                input.value = value;\n            }\n            setCountText(el);\n            el.setLabelPosition();\n            const validationMessage = el.validationMessage;\n            if (el.error && !validationMessage) {\n                el.error = validationMessage;\n            }\n            return;\n        }\n        if (attr === 'max') {\n            setCountText(el);\n            return SetAttribute(input, 'maxlength', value);\n        }\n        if (attr === 'min') {\n            return SetAttribute(input, 'minlength', value);\n        }\n        if (attr === 'inputid') {\n            SetAttribute(label, 'for', value);\n            return SetAttribute(input, 'id', value);\n        }\n        if (['required', 'disabled'].indexOf(attr) > -1) {\n            return SetAttribute(input, attr, trueOrNull(value));\n        }\n        if (attr === 'autofocus') {\n            const autofocus = trueOrNull(value);\n            SetAttribute(input, attr, autofocus);\n            if (autofocus) {\n                input.focus();\n            }\n            else if (el.focused) {\n                input.blur();\n            }\n            return;\n        }\n        SetAttribute(input, attr, value);\n    });\n}","linesDetailed":[{"startLine":228,"startColumn":2,"endLine":228,"endColumn":1,"snippet":""},{"startLine":229,"startColumn":0,"endLine":229,"endColumn":81,"snippet":"function updateInputAttributes(el, changedAttributeKeys = getInputAttributes()) {\n"},{"startLine":230,"startColumn":0,"endLine":230,"endColumn":27,"snippet":"    if (!el || !el.state) {\n"},{"startLine":231,"startColumn":0,"endLine":231,"endColumn":15,"snippet":"        return;\n"},{"startLine":232,"startColumn":0,"endLine":232,"endColumn":5,"snippet":"    }\n"},{"startLine":233,"startColumn":0,"endLine":233,"endColumn":27,"snippet":"    const input = el.input;\n"},{"startLine":234,"startColumn":0,"endLine":234,"endColumn":27,"snippet":"    const label = el.label;\n"},{"startLine":235,"startColumn":0,"endLine":235,"endColumn":17,"snippet":"    if (!input) {\n"},{"startLine":236,"startColumn":0,"endLine":236,"endColumn":15,"snippet":"        return;\n"},{"startLine":237,"startColumn":0,"endLine":237,"endColumn":5,"snippet":"    }\n"},{"startLine":238,"startColumn":0,"endLine":238,"endColumn":42,"snippet":"    changedAttributeKeys.forEach(attr => {\n"},{"startLine":239,"startColumn":0,"endLine":239,"endColumn":43,"snippet":"        const value = el.state[attr].value;\n"},{"startLine":240,"startColumn":0,"endLine":240,"endColumn":31,"snippet":"        if (attr === 'value') {\n"},{"startLine":241,"startColumn":0,"endLine":241,"endColumn":72,"snippet":"            if (el.state.disabled && el.state.disabled.value === true) {\n"},{"startLine":242,"startColumn":0,"endLine":242,"endColumn":23,"snippet":"                return;\n"},{"startLine":243,"startColumn":0,"endLine":243,"endColumn":13,"snippet":"            }\n"},{"startLine":244,"startColumn":0,"endLine":244,"endColumn":63,"snippet":"            if (input.value !== value && value !== undefined) {\n"},{"startLine":245,"startColumn":0,"endLine":245,"endColumn":36,"snippet":"                input.value = value;\n"},{"startLine":246,"startColumn":0,"endLine":246,"endColumn":13,"snippet":"            }\n"},{"startLine":247,"startColumn":0,"endLine":247,"endColumn":29,"snippet":"            setCountText(el);\n"},{"startLine":248,"startColumn":0,"endLine":248,"endColumn":34,"snippet":"            el.setLabelPosition();\n"},{"startLine":249,"startColumn":0,"endLine":249,"endColumn":59,"snippet":"            const validationMessage = el.validationMessage;\n"},{"startLine":250,"startColumn":0,"endLine":250,"endColumn":49,"snippet":"            if (el.error && !validationMessage) {\n"},{"startLine":251,"startColumn":0,"endLine":251,"endColumn":45,"snippet":"                el.error = validationMessage;\n"},{"startLine":252,"startColumn":0,"endLine":252,"endColumn":13,"snippet":"            }\n"},{"startLine":253,"startColumn":0,"endLine":253,"endColumn":19,"snippet":"            return;\n"},{"startLine":254,"startColumn":0,"endLine":254,"endColumn":9,"snippet":"        }\n"},{"startLine":255,"startColumn":0,"endLine":255,"endColumn":29,"snippet":"        if (attr === 'max') {\n"},{"startLine":256,"startColumn":0,"endLine":256,"endColumn":29,"snippet":"            setCountText(el);\n"},{"startLine":257,"startColumn":0,"endLine":257,"endColumn":59,"snippet":"            return SetAttribute(input, 'maxlength', value);\n"},{"startLine":258,"startColumn":0,"endLine":258,"endColumn":9,"snippet":"        }\n"},{"startLine":259,"startColumn":0,"endLine":259,"endColumn":29,"snippet":"        if (attr === 'min') {\n"},{"startLine":260,"startColumn":0,"endLine":260,"endColumn":59,"snippet":"            return SetAttribute(input, 'minlength', value);\n"},{"startLine":261,"startColumn":0,"endLine":261,"endColumn":9,"snippet":"        }\n"},{"startLine":262,"startColumn":0,"endLine":262,"endColumn":33,"snippet":"        if (attr === 'inputid') {\n"},{"startLine":263,"startColumn":0,"endLine":263,"endColumn":46,"snippet":"            SetAttribute(label, 'for', value);\n"},{"startLine":264,"startColumn":0,"endLine":264,"endColumn":52,"snippet":"            return SetAttribute(input, 'id', value);\n"},{"startLine":265,"startColumn":0,"endLine":265,"endColumn":9,"snippet":"        }\n"},{"startLine":266,"startColumn":0,"endLine":266,"endColumn":58,"snippet":"        if (['required', 'disabled'].indexOf(attr) > -1) {\n"},{"startLine":267,"startColumn":0,"endLine":267,"endColumn":64,"snippet":"            return SetAttribute(input, attr, trueOrNull(value));\n"},{"startLine":268,"startColumn":0,"endLine":268,"endColumn":9,"snippet":"        }\n"},{"startLine":269,"startColumn":0,"endLine":269,"endColumn":35,"snippet":"        if (attr === 'autofocus') {\n"},{"startLine":270,"startColumn":0,"endLine":270,"endColumn":48,"snippet":"            const autofocus = trueOrNull(value);\n"},{"startLine":271,"startColumn":0,"endLine":271,"endColumn":49,"snippet":"            SetAttribute(input, attr, autofocus);\n"},{"startLine":272,"startColumn":0,"endLine":272,"endColumn":28,"snippet":"            if (autofocus) {\n"},{"startLine":273,"startColumn":0,"endLine":273,"endColumn":30,"snippet":"                input.focus();\n"},{"startLine":274,"startColumn":0,"endLine":274,"endColumn":13,"snippet":"            }\n"},{"startLine":275,"startColumn":0,"endLine":275,"endColumn":34,"snippet":"            else if (el.focused) {\n"},{"startLine":276,"startColumn":0,"endLine":276,"endColumn":29,"snippet":"                input.blur();\n"},{"startLine":277,"startColumn":0,"endLine":277,"endColumn":13,"snippet":"            }\n"},{"startLine":278,"startColumn":0,"endLine":278,"endColumn":19,"snippet":"            return;\n"},{"startLine":279,"startColumn":0,"endLine":279,"endColumn":9,"snippet":"        }\n"},{"startLine":280,"startColumn":0,"endLine":280,"endColumn":41,"snippet":"        SetAttribute(input, attr, value);\n"},{"startLine":281,"startColumn":0,"endLine":281,"endColumn":7,"snippet":"    });\n"},{"startLine":282,"startColumn":0,"endLine":282,"endColumn":1,"snippet":"}"}],"startPercent":0.6268705270006506,"endPercent":0.7065712426805465,"startLine":228,"startColumn":2,"startCharacter":13489,"endLine":282,"endColumn":1,"endCharacter":15204}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":13750,"endOffset":15200,"count":11,"snippet":"attr => {\n        const value = el.state[attr].value;\n        if (attr === 'value') {\n            if (el.state.disabled && el.state.disabled.value === true) {\n                return;\n            }\n            if (input.value !== value && value !== undefined) {\n                input.value = value;\n            }\n            setCountText(el);\n            el.setLabelPosition();\n            const validationMessage = el.validationMessage;\n            if (el.error && !validationMessage) {\n                el.error = validationMessage;\n            }\n            return;\n        }\n        if (attr === 'max') {\n            setCountText(el);\n            return SetAttribute(input, 'maxlength', value);\n        }\n        if (attr === 'min') {\n            return SetAttribute(input, 'minlength', value);\n        }\n        if (attr === 'inputid') {\n            SetAttribute(label, 'for', value);\n            return SetAttribute(input, 'id', value);\n        }\n        if (['required', 'disabled'].indexOf(attr) > -1) {\n            return SetAttribute(input, attr, trueOrNull(value));\n        }\n        if (attr === 'autofocus') {\n            const autofocus = trueOrNull(value);\n            SetAttribute(input, attr, autofocus);\n            if (autofocus) {\n                input.focus();\n            }\n            else if (el.focused) {\n                input.blur();\n            }\n            return;\n        }\n        SetAttribute(input, attr, value);\n    }","linesDetailed":[{"startLine":238,"startColumn":33,"endLine":238,"endColumn":42,"snippet":"attr => {"},{"startLine":239,"startColumn":0,"endLine":239,"endColumn":43,"snippet":"        const value = el.state[attr].value;\n"},{"startLine":240,"startColumn":0,"endLine":240,"endColumn":31,"snippet":"        if (attr === 'value') {\n"},{"startLine":241,"startColumn":0,"endLine":241,"endColumn":72,"snippet":"            if (el.state.disabled && el.state.disabled.value === true) {\n"},{"startLine":242,"startColumn":0,"endLine":242,"endColumn":23,"snippet":"                return;\n"},{"startLine":243,"startColumn":0,"endLine":243,"endColumn":13,"snippet":"            }\n"},{"startLine":244,"startColumn":0,"endLine":244,"endColumn":63,"snippet":"            if (input.value !== value && value !== undefined) {\n"},{"startLine":245,"startColumn":0,"endLine":245,"endColumn":36,"snippet":"                input.value = value;\n"},{"startLine":246,"startColumn":0,"endLine":246,"endColumn":13,"snippet":"            }\n"},{"startLine":247,"startColumn":0,"endLine":247,"endColumn":29,"snippet":"            setCountText(el);\n"},{"startLine":248,"startColumn":0,"endLine":248,"endColumn":34,"snippet":"            el.setLabelPosition();\n"},{"startLine":249,"startColumn":0,"endLine":249,"endColumn":59,"snippet":"            const validationMessage = el.validationMessage;\n"},{"startLine":250,"startColumn":0,"endLine":250,"endColumn":49,"snippet":"            if (el.error && !validationMessage) {\n"},{"startLine":251,"startColumn":0,"endLine":251,"endColumn":45,"snippet":"                el.error = validationMessage;\n"},{"startLine":252,"startColumn":0,"endLine":252,"endColumn":13,"snippet":"            }\n"},{"startLine":253,"startColumn":0,"endLine":253,"endColumn":19,"snippet":"            return;\n"},{"startLine":254,"startColumn":0,"endLine":254,"endColumn":9,"snippet":"        }\n"},{"startLine":255,"startColumn":0,"endLine":255,"endColumn":29,"snippet":"        if (attr === 'max') {\n"},{"startLine":256,"startColumn":0,"endLine":256,"endColumn":29,"snippet":"            setCountText(el);\n"},{"startLine":257,"startColumn":0,"endLine":257,"endColumn":59,"snippet":"            return SetAttribute(input, 'maxlength', value);\n"},{"startLine":258,"startColumn":0,"endLine":258,"endColumn":9,"snippet":"        }\n"},{"startLine":259,"startColumn":0,"endLine":259,"endColumn":29,"snippet":"        if (attr === 'min') {\n"},{"startLine":260,"startColumn":0,"endLine":260,"endColumn":59,"snippet":"            return SetAttribute(input, 'minlength', value);\n"},{"startLine":261,"startColumn":0,"endLine":261,"endColumn":9,"snippet":"        }\n"},{"startLine":262,"startColumn":0,"endLine":262,"endColumn":33,"snippet":"        if (attr === 'inputid') {\n"},{"startLine":263,"startColumn":0,"endLine":263,"endColumn":46,"snippet":"            SetAttribute(label, 'for', value);\n"},{"startLine":264,"startColumn":0,"endLine":264,"endColumn":52,"snippet":"            return SetAttribute(input, 'id', value);\n"},{"startLine":265,"startColumn":0,"endLine":265,"endColumn":9,"snippet":"        }\n"},{"startLine":266,"startColumn":0,"endLine":266,"endColumn":58,"snippet":"        if (['required', 'disabled'].indexOf(attr) > -1) {\n"},{"startLine":267,"startColumn":0,"endLine":267,"endColumn":64,"snippet":"            return SetAttribute(input, attr, trueOrNull(value));\n"},{"startLine":268,"startColumn":0,"endLine":268,"endColumn":9,"snippet":"        }\n"},{"startLine":269,"startColumn":0,"endLine":269,"endColumn":35,"snippet":"        if (attr === 'autofocus') {\n"},{"startLine":270,"startColumn":0,"endLine":270,"endColumn":48,"snippet":"            const autofocus = trueOrNull(value);\n"},{"startLine":271,"startColumn":0,"endLine":271,"endColumn":49,"snippet":"            SetAttribute(input, attr, autofocus);\n"},{"startLine":272,"startColumn":0,"endLine":272,"endColumn":28,"snippet":"            if (autofocus) {\n"},{"startLine":273,"startColumn":0,"endLine":273,"endColumn":30,"snippet":"                input.focus();\n"},{"startLine":274,"startColumn":0,"endLine":274,"endColumn":13,"snippet":"            }\n"},{"startLine":275,"startColumn":0,"endLine":275,"endColumn":34,"snippet":"            else if (el.focused) {\n"},{"startLine":276,"startColumn":0,"endLine":276,"endColumn":29,"snippet":"                input.blur();\n"},{"startLine":277,"startColumn":0,"endLine":277,"endColumn":13,"snippet":"            }\n"},{"startLine":278,"startColumn":0,"endLine":278,"endColumn":19,"snippet":"            return;\n"},{"startLine":279,"startColumn":0,"endLine":279,"endColumn":9,"snippet":"        }\n"},{"startLine":280,"startColumn":0,"endLine":280,"endColumn":41,"snippet":"        SetAttribute(input, attr, value);\n"},{"startLine":281,"startColumn":0,"endLine":281,"endColumn":5,"snippet":"    }"}],"startPercent":0.638999907054559,"endPercent":0.7063853517984943,"startLine":238,"startColumn":33,"startCharacter":13750,"endLine":281,"endColumn":5,"endCharacter":15200}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":15471,"endOffset":15551,"count":1,"snippet":"(label) => {\n        append(el)(label);\n        updateInputAttributes(el);\n    }","linesDetailed":[{"startLine":290,"startColumn":29,"endLine":290,"endColumn":41,"snippet":"(label) => {"},{"startLine":291,"startColumn":0,"endLine":291,"endColumn":26,"snippet":"        append(el)(label);\n"},{"startLine":292,"startColumn":0,"endLine":292,"endColumn":34,"snippet":"        updateInputAttributes(el);\n"},{"startLine":293,"startColumn":0,"endLine":293,"endColumn":5,"snippet":"    }"}],"startPercent":0.7189794590575332,"endPercent":0.722697276698578,"startLine":290,"startColumn":29,"startCharacter":15471,"endLine":293,"endColumn":5,"endCharacter":15551}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":15825,"endOffset":15981,"count":1,"snippet":"(errorElement) => {\n        append(el)(errorElement);\n        SetAttribute(el, 'error-message', !!el.validationMessage ? el.validationMessage : null);\n    }","linesDetailed":[{"startLine":298,"startColumn":29,"endLine":298,"endColumn":48,"snippet":"(errorElement) => {"},{"startLine":299,"startColumn":0,"endLine":299,"endColumn":33,"snippet":"        append(el)(errorElement);\n"},{"startLine":300,"startColumn":0,"endLine":300,"endColumn":96,"snippet":"        SetAttribute(el, 'error-message', !!el.validationMessage ? el.validationMessage : null);\n"},{"startLine":301,"startColumn":0,"endLine":301,"endColumn":5,"snippet":"    }"}],"startPercent":0.735430802119156,"endPercent":0.7426805465191932,"startLine":298,"startColumn":29,"startCharacter":15825,"endLine":301,"endColumn":5,"endCharacter":15981}]},{"name":"get count","isBlockCoverage":false,"ranges":[{"startOffset":17133,"endOffset":17179,"count":2,"snippet":"get count() { return this.state.count.value; }","linesDetailed":[{"startLine":326,"startColumn":4,"endLine":326,"endColumn":50,"snippet":"get count() { return this.state.count.value; }"}],"startPercent":0.796217120550237,"endPercent":0.7983548656938377,"startLine":326,"startColumn":4,"startCharacter":17133,"endLine":326,"endColumn":50,"endCharacter":17179}]},{"name":"get error","isBlockCoverage":false,"ranges":[{"startOffset":17341,"endOffset":17387,"count":1,"snippet":"get error() { return this.state.error.value; }","linesDetailed":[{"startLine":330,"startColumn":4,"endLine":330,"endColumn":50,"snippet":"get error() { return this.state.error.value; }"}],"startPercent":0.8058834464169532,"endPercent":0.808021191560554,"startLine":330,"startColumn":4,"startCharacter":17341,"endLine":330,"endColumn":50,"endCharacter":17387}]},{"name":"set error","isBlockCoverage":false,"ranges":[{"startOffset":17392,"endOffset":17434,"count":1,"snippet":"set error(v) { this.state.error.next(v); }","linesDetailed":[{"startLine":331,"startColumn":4,"endLine":331,"endColumn":46,"snippet":"set error(v) { this.state.error.next(v); }"}],"startPercent":0.8082535551631193,"endPercent":0.8102054094246677,"startLine":331,"startColumn":4,"startCharacter":17392,"endLine":331,"endColumn":46,"endCharacter":17434}]},{"name":"get input","isBlockCoverage":false,"ranges":[{"startOffset":17757,"endOffset":17803,"count":3,"snippet":"get input() { return this.state.input.value; }","linesDetailed":[{"startLine":338,"startColumn":4,"endLine":338,"endColumn":50,"snippet":"get input() { return this.state.input.value; }"}],"startPercent":0.8252160981503858,"endPercent":0.8273538432939864,"startLine":338,"startColumn":4,"startCharacter":17757,"endLine":338,"endColumn":50,"endCharacter":17803}]},{"name":"get inputid","isBlockCoverage":false,"ranges":[{"startOffset":17855,"endOffset":17905,"count":3,"snippet":"get inputid() { return this.state.inputid.value; }","linesDetailed":[{"startLine":340,"startColumn":4,"endLine":340,"endColumn":54,"snippet":"get inputid() { return this.state.inputid.value; }"}],"startPercent":0.8297704247606655,"endPercent":0.8320940607863184,"startLine":340,"startColumn":4,"startCharacter":17855,"endLine":340,"endColumn":54,"endCharacter":17905}]},{"name":"get label","isBlockCoverage":false,"ranges":[{"startOffset":17961,"endOffset":18007,"count":1,"snippet":"get label() { return this.state.label.value; }","linesDetailed":[{"startLine":342,"startColumn":4,"endLine":342,"endColumn":50,"snippet":"get label() { return this.state.label.value; }"}],"startPercent":0.8346965331350498,"endPercent":0.8368342782786504,"startLine":342,"startColumn":4,"startCharacter":17961,"endLine":342,"endColumn":50,"endCharacter":18007}]},{"name":"set label","isBlockCoverage":true,"ranges":[{"startOffset":18012,"endOffset":18054,"count":1,"snippet":"set label(v) { this.state.label.next(v); }","linesDetailed":[{"startLine":343,"startColumn":4,"endLine":343,"endColumn":46,"snippet":"set label(v) { this.state.label.next(v); }"}],"startPercent":0.8370666418812157,"endPercent":0.8390184961427642,"startLine":343,"startColumn":4,"startCharacter":18012,"endLine":343,"endColumn":46,"endCharacter":18054}]},{"name":"get value","isBlockCoverage":false,"ranges":[{"startOffset":18655,"endOffset":18701,"count":4,"snippet":"get value() { return this.state.value.value; }","linesDetailed":[{"startLine":358,"startColumn":4,"endLine":358,"endColumn":50,"snippet":"get value() { return this.state.value.value; }"}],"startPercent":0.8669486011711126,"endPercent":0.8690863463147133,"startLine":358,"startColumn":4,"startCharacter":18655,"endLine":358,"endColumn":50,"endCharacter":18701}]},{"name":"get focused","isBlockCoverage":false,"ranges":[{"startOffset":18827,"endOffset":18923,"count":3,"snippet":"get focused() { return !!document.activeElement && this.inputid === document.activeElement.id; }","linesDetailed":[{"startLine":361,"startColumn":4,"endLine":361,"endColumn":100,"snippet":"get focused() { return !!document.activeElement && this.inputid === document.activeElement.id; }"}],"startPercent":0.8749419090993587,"endPercent":0.8794032902686123,"startLine":361,"startColumn":4,"startCharacter":18827,"endLine":361,"endColumn":100,"endCharacter":18923}]},{"name":"get isempty","isBlockCoverage":false,"ranges":[{"startOffset":18976,"endOffset":19045,"count":2,"snippet":"get isempty() { return this.value == '' || this.value == undefined; }","linesDetailed":[{"startLine":363,"startColumn":4,"endLine":363,"endColumn":73,"snippet":"get isempty() { return this.value == '' || this.value == undefined; }"}],"startPercent":0.8818663444558045,"endPercent":0.8850729621712055,"startLine":363,"startColumn":4,"startCharacter":18976,"endLine":363,"endColumn":73,"endCharacter":19045}]},{"name":"get validationMessage","isBlockCoverage":false,"ranges":[{"startOffset":19126,"endOffset":19202,"count":2,"snippet":"get validationMessage() { return Get(this, 'input.validationMessage', ''); }","linesDetailed":[{"startLine":365,"startColumn":4,"endLine":365,"endColumn":80,"snippet":"get validationMessage() { return Get(this, 'input.validationMessage', ''); }"}],"startPercent":0.8888372525327632,"endPercent":0.8923691792917557,"startLine":365,"startColumn":4,"startCharacter":19126,"endLine":365,"endColumn":80,"endCharacter":19202}]},{"name":"setLabelPosition","isBlockCoverage":false,"ranges":[{"startOffset":19306,"endOffset":19766,"count":2,"snippet":"setLabelPosition() {\n        const focused = this.focused.toString();\n        const empty = this.isempty.toString();\n        const attrFocused = this.getAttribute('focused');\n        const attrEmpty = this.getAttribute('empty');\n        if (focused !== attrFocused) {\n            this.setAttribute('focused', focused);\n        }\n        if (empty !== attrEmpty) {\n            this.setAttribute('empty', empty);\n        }\n        return focused || !empty;\n    }","linesDetailed":[{"startLine":367,"startColumn":4,"endLine":367,"endColumn":24,"snippet":"setLabelPosition() {"},{"startLine":368,"startColumn":0,"endLine":368,"endColumn":48,"snippet":"        const focused = this.focused.toString();\n"},{"startLine":369,"startColumn":0,"endLine":369,"endColumn":46,"snippet":"        const empty = this.isempty.toString();\n"},{"startLine":370,"startColumn":0,"endLine":370,"endColumn":57,"snippet":"        const attrFocused = this.getAttribute('focused');\n"},{"startLine":371,"startColumn":0,"endLine":371,"endColumn":53,"snippet":"        const attrEmpty = this.getAttribute('empty');\n"},{"startLine":372,"startColumn":0,"endLine":372,"endColumn":38,"snippet":"        if (focused !== attrFocused) {\n"},{"startLine":373,"startColumn":0,"endLine":373,"endColumn":50,"snippet":"            this.setAttribute('focused', focused);\n"},{"startLine":374,"startColumn":0,"endLine":374,"endColumn":9,"snippet":"        }\n"},{"startLine":375,"startColumn":0,"endLine":375,"endColumn":34,"snippet":"        if (empty !== attrEmpty) {\n"},{"startLine":376,"startColumn":0,"endLine":376,"endColumn":46,"snippet":"            this.setAttribute('empty', empty);\n"},{"startLine":377,"startColumn":0,"endLine":377,"endColumn":9,"snippet":"        }\n"},{"startLine":378,"startColumn":0,"endLine":378,"endColumn":33,"snippet":"        return focused || !empty;\n"},{"startLine":379,"startColumn":0,"endLine":379,"endColumn":5,"snippet":"    }"}],"startPercent":0.8972023422251139,"endPercent":0.918579793661121,"startLine":367,"startColumn":4,"startCharacter":19306,"endLine":379,"endColumn":5,"endCharacter":19766}]},{"name":"","isBlockCoverage":true,"ranges":[{"startOffset":20945,"endOffset":20974,"count":1,"snippet":"() => this.setLabelPosition()","linesDetailed":[{"startLine":405,"startColumn":40,"endLine":405,"endColumn":69,"snippet":"() => this.setLabelPosition()"}],"startPercent":0.9733711311460173,"endPercent":0.974718840040896,"startLine":405,"startColumn":40,"startCharacter":20945,"endLine":405,"endColumn":69,"endCharacter":20974}]}]},"/dist/utils/observe/observer.js":{"source":"import ID from \"../id.js\";\nimport Type from \"../types/type.js\";\nimport Equals from \"../checks/equals.js\";\nimport Debounce from \"../timing/debounce.js\";\nimport Get from \"../objects/get.js\";\nimport Diff from \"../objects/diff.js\";\nconst observers = new WeakMap();\nconst observerKeys = {};\nwindow.observers = () => ({\n    map: observers,\n    keys: Object.keys(observerKeys)\n});\nconst emptyNext = (_value, _force) => { };\nconst emptyError = (_value) => { };\nconst emptyFn = () => { };\nexport const SubscribeFn = (_next, _error, _complete) => emptyFn;\nconst emptyUnsubscribe = (_subscription) => { };\nexport const nullObserver = () => ({\n    isComplete: true,\n    value: undefined,\n    previous: undefined,\n    subscriptions: {},\n    lastUpdate: 0,\n    settings: {},\n    removed: [],\n    added: [],\n    changed: {},\n    next: emptyNext,\n    error: emptyError,\n    complete: emptyFn,\n    subscribe: SubscribeFn,\n    unsubscribe: emptyUnsubscribe,\n    insert: (_element, _index) => { },\n    insertAll: (_elements, _index) => { },\n    remove: (_element, _index, _all) => { },\n    removeElements: (_elements) => { },\n    reverse: emptyFn,\n    has: (_value) => false,\n    indexOf: (_value) => -1,\n    on: (_name, _callback) => () => { },\n    trigger: (_name, _data) => { },\n    data: {}\n});\nexport default function Observer(initialValue, options = {}) {\n    let _this = [ID()];\n    observerKeys[_this[0]] = _this;\n    const noInit = options.noInit ? true : false;\n    const nextOnNew = options.nextOnNew === false ? false : true;\n    const matchType = options.matchType ? true : false;\n    const onSubscribe = options.onSubscribe && typeof options.onSubscribe === 'function' ? options.onSubscribe : (val) => val;\n    const formatter = options.formatter && typeof options.formatter === 'function' ? options.formatter : (val) => val;\n    initialValue = formatter(initialValue);\n    const initialType = Type(initialValue);\n    const takeFirst = !!options.takeFirst;\n    const takeLast = !!options.takeLast;\n    const debounced = !!takeFirst || !!takeLast;\n    const takeBy = options.takeBy || 0;\n    const getInstance = () => observers.get(_this);\n    const formatValue = (toFormat, obs = {}) => {\n        const f = formatter(toFormat, obs);\n        const inst = getInstance();\n        return inst && matchType && Type(f) !== initialType ? inst.data.value : f;\n    };\n    const states = [initialValue];\n    const addedRemovedReducer = (source) => (target, current) => {\n        if (source.indexOf(current) === -1) {\n            target.push(current);\n        }\n        return target;\n    };\n    const bothArray = (source, target) => Array.isArray(source) && Array.isArray(target);\n    function getAddedRemoved(source, target) {\n        return !bothArray(source, target) ? [] : source.reduce(addedRemovedReducer(target), []);\n    }\n    function getRemoved() {\n        const inst = getInstance();\n        return inst && inst.data ?\n            getAddedRemoved(inst.data.previousValue, inst.data.value) :\n            [];\n    }\n    function getAdded() {\n        const inst = getInstance();\n        return inst && inst.data ? getAddedRemoved(inst.data.value, inst.data.previousValue) : [];\n    }\n    function destroy() {\n        const inst = getInstance();\n        if (!inst) {\n            return;\n        }\n        inst.trigger('destroy', inst.data);\n        Object.keys(inst.data.subscriptions).forEach(k => Get(inst.data, `subscriptions.${k}.unsubscribe`, emptyFn));\n        inst.data.isComplete = true;\n        delete observerKeys[_this[0]];\n        observers.delete(_this);\n        _this = null;\n    }\n    const callFn = (val, valuesObj, functionKey, subscriptions) => (id) => {\n        const fn = Get(subscriptions, `${id}.${functionKey}`);\n        typeof fn === 'function' ? fn(val, valuesObj || {}, id) : undefined;\n    };\n    function doLoop(functionKey, val, valuesObj) {\n        const inst = getInstance();\n        if (!inst) {\n            return;\n        }\n        inst.trigger(functionKey, valuesObj || {});\n        const subs = inst.data.subscriptions;\n        Object.keys(subs).forEach(callFn(val, valuesObj, functionKey, subs));\n        if (functionKey === 'complete') {\n            destroy();\n        }\n    }\n    const debouncedLoop = Debounce(doLoop, takeBy, !!takeFirst);\n    const loop = !debounced ? doLoop : debouncedLoop;\n    function unsubscribe(subscription) {\n        return function unsubscribeInner() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const subscriptions = inst.data.subscriptions;\n            delete subscriptions[subscription.id];\n            inst.trigger('unsubscribe', { subscription, subscriptions });\n            if (inst.data.noSubsComplete && Object.keys(subscriptions).length === 0) {\n                destroy();\n            }\n        };\n    }\n    function getArrayIndexOf(element, isArray) {\n        const inst = getInstance();\n        if (!inst || !isArray) {\n            return;\n        }\n        const index = inst.data.value.indexOf(element);\n        return index > -1 ? index : undefined;\n    }\n    function getObjectKey(value) {\n        let _result;\n        const inst = getInstance();\n        if (!inst) {\n            return;\n        }\n        const dataVal = inst.data.value;\n        const keys = Object.keys(dataVal);\n        let i = keys.length;\n        while (i--) {\n            if (value === dataVal[keys[i]]) {\n                _result = keys[i];\n                break;\n            }\n        }\n        return _result;\n    }\n    function getValTypes(inst) {\n        inst = inst || getInstance();\n        const value = Get(inst, 'data.value');\n        return inst ? {\n            value,\n            isArray: Array.isArray(value),\n            isString: typeof value === 'string'\n        } : {};\n    }\n    let result = {\n        get isComplete() {\n            const inst = getInstance();\n            if (!inst) {\n                return true;\n            }\n            return inst.data.isComplete;\n        },\n        get value() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            return inst.data.value;\n        },\n        get previous() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            return inst.data.previousValue;\n        },\n        get subscriptions() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            return inst.data.subscriptions;\n        },\n        get lastUpdate() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            return inst.data.updated;\n        },\n        get settings() {\n            return {\n                initialType,\n                formatter,\n                matchType,\n                nextOnNew,\n                noInit,\n                takeFirst,\n                takeLast,\n                takeBy\n            };\n        },\n        get removed() { return getRemoved(); },\n        get added() { return getAdded(); },\n        get changed() {\n            const inst = getInstance();\n            if (!inst) {\n                return [];\n            }\n            return Diff(inst.data.previousValue, inst.data.value);\n        },\n        next: function (v, force) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const formatted = formatValue(v, inst);\n            if (!force && nextOnNew && Equals(formatted, inst.data.value)) {\n                return;\n            }\n            inst.data.value = formatted;\n            inst.data.updated = new Date().getTime();\n            loop('next', inst.data.value, inst.data);\n            return inst.data;\n        },\n        error: function (err) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            inst.data.errors = inst.data.errors.concat([err]);\n            inst.data.updated = new Date().getTime();\n            loop('error', err, inst.data);\n            inst.complete();\n        },\n        complete: function () {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            loop('complete', inst.data);\n        },\n        subscribe: function (next, error = (_err) => { }, complete = emptyFn) {\n            const inst = getInstance();\n            if (!inst) {\n                return () => { };\n            }\n            const subscription = Object.assign({}, {\n                next: next,\n                error: error,\n                complete: complete,\n                id: ID()\n            });\n            subscription.unsubscribe = unsubscribe(subscription);\n            inst.data.subscriptions[subscription.id] = subscription;\n            if (!noInit && inst.data.value !== undefined && typeof subscription.next === 'function') {\n                subscription.next(inst.data.value);\n            }\n            onSubscribe(subscription);\n            return unsubscribe(subscription);\n        },\n        unsubscribe: function (subscription) {\n            const inst = getInstance();\n            if (!inst || !subscription || !subscription.id || !inst.data.subscriptions[subscription.id]) {\n                return;\n            }\n            return unsubscribe(subscription);\n        },\n        insert: function (element, index) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const valData = getValTypes(inst);\n            index = index == undefined ? Get(valData, 'value.length', 0) : index;\n            if (valData.isArray) {\n                valData.value.splice(index, index !== valData.value.length ? 1 : 0, element);\n                return inst.next(valData.value, true);\n            }\n            if (typeof valData.value === 'string') {\n                valData.value = valData.value.slice(0, index) + element + valData.value.slice(index);\n                return inst.next(valData.value, true);\n            }\n            valData.value[index] = element;\n            return inst.next(valData.value, true);\n        },\n        insertAll: function (elements, index) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const valData = getValTypes(inst);\n            index = index == undefined ? Get(valData, 'value.length', 0) : index;\n            if (valData.isArray) {\n                if (!Array.isArray(elements)) {\n                    return;\n                }\n                valData.value.splice.apply(valData.value, [index, index !== valData.value.length ? 1 : 0, ...elements]);\n                return inst.next(valData.value, true);\n            }\n            const elementsObject = elements;\n            Object.keys(elementsObject).forEach(elementKey => inst.data.value[elementKey] = elementsObject[elementKey]);\n            return inst.next(valData.value, true);\n        },\n        remove: function (element, index, all = false) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const valData = getValTypes(inst);\n            if (index === undefined) {\n                index = getArrayIndexOf(element, valData.isArray);\n            }\n            if (index === undefined && valData.isArray) {\n                return valData.value;\n            }\n            if (index === undefined && valData.isString) {\n                return inst.next(valData.value.replace(new RegExp(element, all ? 'gm' : ''), ''), true);\n            }\n            if (index !== undefined) {\n                if (valData.isArray) {\n                    valData.value.splice(index, 1);\n                }\n                else if (valData.isString) {\n                    inst.data.value = valData.value.slice(0, index);\n                }\n                else {\n                    inst.data.value[index] = undefined;\n                    delete inst.data.value[index];\n                }\n                return inst.next(valData.value, true);\n            }\n            const objectKey = getObjectKey(element);\n            if (objectKey !== undefined) {\n                inst.data.value[objectKey] = null;\n                delete inst.data.value[objectKey];\n                return inst.next(inst.data.value, true);\n            }\n            return inst.next(inst.data.value, true);\n        },\n        removeElements: function (elements) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const valData = getValTypes(inst);\n            if (valData.isArray) {\n                for (let i = 0; i < elements.length; i = i + 1) {\n                    const index = valData.value.indexOf(elements[i]);\n                    if (index > -1) {\n                        valData.value.splice(index, 1);\n                    }\n                }\n                return inst.next(valData.value, true);\n            }\n            Object.keys(elements).forEach(prop => delete valData.value[prop]);\n            return inst.next(valData.value, true);\n        },\n        reverse: function () {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const valData = getValTypes(inst);\n            if (valData.isArray) {\n                return inst.next(valData.value.reverse(), true);\n            }\n            if (valData.isString) {\n                return inst.next(valData.value.split('').reverse(), true);\n            }\n            inst.next(valData.value, true);\n        },\n        has: function has(value) {\n            const valData = getValTypes();\n            if (valData.isArray) {\n                return getArrayIndexOf(value, valData.isArray) || false;\n            }\n            if (valData.isString) {\n                return valData.value.indexOf(value) > -1;\n            }\n            const objectKey = getObjectKey(value);\n            if (objectKey !== undefined) {\n                return true;\n            }\n            return false;\n        },\n        indexOf: function indexOf(value) {\n            const valData = getValTypes();\n            if (valData.isArray) {\n                return getArrayIndexOf(value, valData.isArray) || -1;\n            }\n            if (valData.isString) {\n                return valData.value.indexOf(value);\n            }\n            return getObjectKey(value) || -1;\n        },\n        on: function on(name, callback) {\n            const inst = getInstance();\n            if (!inst) {\n                return () => { };\n            }\n            if (!inst.data.eventCallbacks[name]) {\n                observers.get(_this).data.eventCallbacks[name] = {};\n            }\n            const id = ID();\n            observers.get(_this).data.eventCallbacks[name][id] = callback;\n            return () => delete observers.get(_this).data.eventCallbacks[name][id];\n        },\n        trigger: function trigger(name, data) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const callbacks = inst.data.eventCallbacks[name];\n            if (!callbacks) {\n                return;\n            }\n            Object.keys(callbacks).forEach(prop => callbacks[prop](data));\n        },\n        data: {\n            errors: [],\n            updated: new Date().getTime(),\n            subscriptions: {},\n            isComplete: false,\n            initialType,\n            initialValue,\n            eventCallbacks: {},\n            formatter,\n            matchType,\n            nextOnNew,\n            noInit,\n            noSubsComplete: options.noSubsComplete === true ? true : false,\n            takeFirst,\n            takeLast,\n            value: null,\n            previousValue: null\n        }\n    };\n    observers.set(_this, result);\n    Object.defineProperties(getInstance().data, {\n        value: {\n            get() {\n                return states[0];\n            },\n            set(v) {\n                states.unshift(v);\n                while (states.length > 2) {\n                    states.pop();\n                }\n            }\n        },\n        previousValue: {\n            get() {\n                return states[1];\n            }\n        }\n    });\n    return getInstance();\n}\n","lines":["import ID from \"../id.js\";\n","import Type from \"../types/type.js\";\n","import Equals from \"../checks/equals.js\";\n","import Debounce from \"../timing/debounce.js\";\n","import Get from \"../objects/get.js\";\n","import Diff from \"../objects/diff.js\";\n","const observers = new WeakMap();\n","const observerKeys = {};\n","window.observers = () => ({\n","    map: observers,\n","    keys: Object.keys(observerKeys)\n","});\n","const emptyNext = (_value, _force) => { };\n","const emptyError = (_value) => { };\n","const emptyFn = () => { };\n","export const SubscribeFn = (_next, _error, _complete) => emptyFn;\n","const emptyUnsubscribe = (_subscription) => { };\n","export const nullObserver = () => ({\n","    isComplete: true,\n","    value: undefined,\n","    previous: undefined,\n","    subscriptions: {},\n","    lastUpdate: 0,\n","    settings: {},\n","    removed: [],\n","    added: [],\n","    changed: {},\n","    next: emptyNext,\n","    error: emptyError,\n","    complete: emptyFn,\n","    subscribe: SubscribeFn,\n","    unsubscribe: emptyUnsubscribe,\n","    insert: (_element, _index) => { },\n","    insertAll: (_elements, _index) => { },\n","    remove: (_element, _index, _all) => { },\n","    removeElements: (_elements) => { },\n","    reverse: emptyFn,\n","    has: (_value) => false,\n","    indexOf: (_value) => -1,\n","    on: (_name, _callback) => () => { },\n","    trigger: (_name, _data) => { },\n","    data: {}\n","});\n","export default function Observer(initialValue, options = {}) {\n","    let _this = [ID()];\n","    observerKeys[_this[0]] = _this;\n","    const noInit = options.noInit ? true : false;\n","    const nextOnNew = options.nextOnNew === false ? false : true;\n","    const matchType = options.matchType ? true : false;\n","    const onSubscribe = options.onSubscribe && typeof options.onSubscribe === 'function' ? options.onSubscribe : (val) => val;\n","    const formatter = options.formatter && typeof options.formatter === 'function' ? options.formatter : (val) => val;\n","    initialValue = formatter(initialValue);\n","    const initialType = Type(initialValue);\n","    const takeFirst = !!options.takeFirst;\n","    const takeLast = !!options.takeLast;\n","    const debounced = !!takeFirst || !!takeLast;\n","    const takeBy = options.takeBy || 0;\n","    const getInstance = () => observers.get(_this);\n","    const formatValue = (toFormat, obs = {}) => {\n","        const f = formatter(toFormat, obs);\n","        const inst = getInstance();\n","        return inst && matchType && Type(f) !== initialType ? inst.data.value : f;\n","    };\n","    const states = [initialValue];\n","    const addedRemovedReducer = (source) => (target, current) => {\n","        if (source.indexOf(current) === -1) {\n","            target.push(current);\n","        }\n","        return target;\n","    };\n","    const bothArray = (source, target) => Array.isArray(source) && Array.isArray(target);\n","    function getAddedRemoved(source, target) {\n","        return !bothArray(source, target) ? [] : source.reduce(addedRemovedReducer(target), []);\n","    }\n","    function getRemoved() {\n","        const inst = getInstance();\n","        return inst && inst.data ?\n","            getAddedRemoved(inst.data.previousValue, inst.data.value) :\n","            [];\n","    }\n","    function getAdded() {\n","        const inst = getInstance();\n","        return inst && inst.data ? getAddedRemoved(inst.data.value, inst.data.previousValue) : [];\n","    }\n","    function destroy() {\n","        const inst = getInstance();\n","        if (!inst) {\n","            return;\n","        }\n","        inst.trigger('destroy', inst.data);\n","        Object.keys(inst.data.subscriptions).forEach(k => Get(inst.data, `subscriptions.${k}.unsubscribe`, emptyFn));\n","        inst.data.isComplete = true;\n","        delete observerKeys[_this[0]];\n","        observers.delete(_this);\n","        _this = null;\n","    }\n","    const callFn = (val, valuesObj, functionKey, subscriptions) => (id) => {\n","        const fn = Get(subscriptions, `${id}.${functionKey}`);\n","        typeof fn === 'function' ? fn(val, valuesObj || {}, id) : undefined;\n","    };\n","    function doLoop(functionKey, val, valuesObj) {\n","        const inst = getInstance();\n","        if (!inst) {\n","            return;\n","        }\n","        inst.trigger(functionKey, valuesObj || {});\n","        const subs = inst.data.subscriptions;\n","        Object.keys(subs).forEach(callFn(val, valuesObj, functionKey, subs));\n","        if (functionKey === 'complete') {\n","            destroy();\n","        }\n","    }\n","    const debouncedLoop = Debounce(doLoop, takeBy, !!takeFirst);\n","    const loop = !debounced ? doLoop : debouncedLoop;\n","    function unsubscribe(subscription) {\n","        return function unsubscribeInner() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const subscriptions = inst.data.subscriptions;\n","            delete subscriptions[subscription.id];\n","            inst.trigger('unsubscribe', { subscription, subscriptions });\n","            if (inst.data.noSubsComplete && Object.keys(subscriptions).length === 0) {\n","                destroy();\n","            }\n","        };\n","    }\n","    function getArrayIndexOf(element, isArray) {\n","        const inst = getInstance();\n","        if (!inst || !isArray) {\n","            return;\n","        }\n","        const index = inst.data.value.indexOf(element);\n","        return index > -1 ? index : undefined;\n","    }\n","    function getObjectKey(value) {\n","        let _result;\n","        const inst = getInstance();\n","        if (!inst) {\n","            return;\n","        }\n","        const dataVal = inst.data.value;\n","        const keys = Object.keys(dataVal);\n","        let i = keys.length;\n","        while (i--) {\n","            if (value === dataVal[keys[i]]) {\n","                _result = keys[i];\n","                break;\n","            }\n","        }\n","        return _result;\n","    }\n","    function getValTypes(inst) {\n","        inst = inst || getInstance();\n","        const value = Get(inst, 'data.value');\n","        return inst ? {\n","            value,\n","            isArray: Array.isArray(value),\n","            isString: typeof value === 'string'\n","        } : {};\n","    }\n","    let result = {\n","        get isComplete() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return true;\n","            }\n","            return inst.data.isComplete;\n","        },\n","        get value() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            return inst.data.value;\n","        },\n","        get previous() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            return inst.data.previousValue;\n","        },\n","        get subscriptions() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            return inst.data.subscriptions;\n","        },\n","        get lastUpdate() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            return inst.data.updated;\n","        },\n","        get settings() {\n","            return {\n","                initialType,\n","                formatter,\n","                matchType,\n","                nextOnNew,\n","                noInit,\n","                takeFirst,\n","                takeLast,\n","                takeBy\n","            };\n","        },\n","        get removed() { return getRemoved(); },\n","        get added() { return getAdded(); },\n","        get changed() {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return [];\n","            }\n","            return Diff(inst.data.previousValue, inst.data.value);\n","        },\n","        next: function (v, force) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const formatted = formatValue(v, inst);\n","            if (!force && nextOnNew && Equals(formatted, inst.data.value)) {\n","                return;\n","            }\n","            inst.data.value = formatted;\n","            inst.data.updated = new Date().getTime();\n","            loop('next', inst.data.value, inst.data);\n","            return inst.data;\n","        },\n","        error: function (err) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            inst.data.errors = inst.data.errors.concat([err]);\n","            inst.data.updated = new Date().getTime();\n","            loop('error', err, inst.data);\n","            inst.complete();\n","        },\n","        complete: function () {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            loop('complete', inst.data);\n","        },\n","        subscribe: function (next, error = (_err) => { }, complete = emptyFn) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return () => { };\n","            }\n","            const subscription = Object.assign({}, {\n","                next: next,\n","                error: error,\n","                complete: complete,\n","                id: ID()\n","            });\n","            subscription.unsubscribe = unsubscribe(subscription);\n","            inst.data.subscriptions[subscription.id] = subscription;\n","            if (!noInit && inst.data.value !== undefined && typeof subscription.next === 'function') {\n","                subscription.next(inst.data.value);\n","            }\n","            onSubscribe(subscription);\n","            return unsubscribe(subscription);\n","        },\n","        unsubscribe: function (subscription) {\n","            const inst = getInstance();\n","            if (!inst || !subscription || !subscription.id || !inst.data.subscriptions[subscription.id]) {\n","                return;\n","            }\n","            return unsubscribe(subscription);\n","        },\n","        insert: function (element, index) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const valData = getValTypes(inst);\n","            index = index == undefined ? Get(valData, 'value.length', 0) : index;\n","            if (valData.isArray) {\n","                valData.value.splice(index, index !== valData.value.length ? 1 : 0, element);\n","                return inst.next(valData.value, true);\n","            }\n","            if (typeof valData.value === 'string') {\n","                valData.value = valData.value.slice(0, index) + element + valData.value.slice(index);\n","                return inst.next(valData.value, true);\n","            }\n","            valData.value[index] = element;\n","            return inst.next(valData.value, true);\n","        },\n","        insertAll: function (elements, index) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const valData = getValTypes(inst);\n","            index = index == undefined ? Get(valData, 'value.length', 0) : index;\n","            if (valData.isArray) {\n","                if (!Array.isArray(elements)) {\n","                    return;\n","                }\n","                valData.value.splice.apply(valData.value, [index, index !== valData.value.length ? 1 : 0, ...elements]);\n","                return inst.next(valData.value, true);\n","            }\n","            const elementsObject = elements;\n","            Object.keys(elementsObject).forEach(elementKey => inst.data.value[elementKey] = elementsObject[elementKey]);\n","            return inst.next(valData.value, true);\n","        },\n","        remove: function (element, index, all = false) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const valData = getValTypes(inst);\n","            if (index === undefined) {\n","                index = getArrayIndexOf(element, valData.isArray);\n","            }\n","            if (index === undefined && valData.isArray) {\n","                return valData.value;\n","            }\n","            if (index === undefined && valData.isString) {\n","                return inst.next(valData.value.replace(new RegExp(element, all ? 'gm' : ''), ''), true);\n","            }\n","            if (index !== undefined) {\n","                if (valData.isArray) {\n","                    valData.value.splice(index, 1);\n","                }\n","                else if (valData.isString) {\n","                    inst.data.value = valData.value.slice(0, index);\n","                }\n","                else {\n","                    inst.data.value[index] = undefined;\n","                    delete inst.data.value[index];\n","                }\n","                return inst.next(valData.value, true);\n","            }\n","            const objectKey = getObjectKey(element);\n","            if (objectKey !== undefined) {\n","                inst.data.value[objectKey] = null;\n","                delete inst.data.value[objectKey];\n","                return inst.next(inst.data.value, true);\n","            }\n","            return inst.next(inst.data.value, true);\n","        },\n","        removeElements: function (elements) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const valData = getValTypes(inst);\n","            if (valData.isArray) {\n","                for (let i = 0; i < elements.length; i = i + 1) {\n","                    const index = valData.value.indexOf(elements[i]);\n","                    if (index > -1) {\n","                        valData.value.splice(index, 1);\n","                    }\n","                }\n","                return inst.next(valData.value, true);\n","            }\n","            Object.keys(elements).forEach(prop => delete valData.value[prop]);\n","            return inst.next(valData.value, true);\n","        },\n","        reverse: function () {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const valData = getValTypes(inst);\n","            if (valData.isArray) {\n","                return inst.next(valData.value.reverse(), true);\n","            }\n","            if (valData.isString) {\n","                return inst.next(valData.value.split('').reverse(), true);\n","            }\n","            inst.next(valData.value, true);\n","        },\n","        has: function has(value) {\n","            const valData = getValTypes();\n","            if (valData.isArray) {\n","                return getArrayIndexOf(value, valData.isArray) || false;\n","            }\n","            if (valData.isString) {\n","                return valData.value.indexOf(value) > -1;\n","            }\n","            const objectKey = getObjectKey(value);\n","            if (objectKey !== undefined) {\n","                return true;\n","            }\n","            return false;\n","        },\n","        indexOf: function indexOf(value) {\n","            const valData = getValTypes();\n","            if (valData.isArray) {\n","                return getArrayIndexOf(value, valData.isArray) || -1;\n","            }\n","            if (valData.isString) {\n","                return valData.value.indexOf(value);\n","            }\n","            return getObjectKey(value) || -1;\n","        },\n","        on: function on(name, callback) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return () => { };\n","            }\n","            if (!inst.data.eventCallbacks[name]) {\n","                observers.get(_this).data.eventCallbacks[name] = {};\n","            }\n","            const id = ID();\n","            observers.get(_this).data.eventCallbacks[name][id] = callback;\n","            return () => delete observers.get(_this).data.eventCallbacks[name][id];\n","        },\n","        trigger: function trigger(name, data) {\n","            const inst = getInstance();\n","            if (!inst) {\n","                return;\n","            }\n","            const callbacks = inst.data.eventCallbacks[name];\n","            if (!callbacks) {\n","                return;\n","            }\n","            Object.keys(callbacks).forEach(prop => callbacks[prop](data));\n","        },\n","        data: {\n","            errors: [],\n","            updated: new Date().getTime(),\n","            subscriptions: {},\n","            isComplete: false,\n","            initialType,\n","            initialValue,\n","            eventCallbacks: {},\n","            formatter,\n","            matchType,\n","            nextOnNew,\n","            noInit,\n","            noSubsComplete: options.noSubsComplete === true ? true : false,\n","            takeFirst,\n","            takeLast,\n","            value: null,\n","            previousValue: null\n","        }\n","    };\n","    observers.set(_this, result);\n","    Object.defineProperties(getInstance().data, {\n","        value: {\n","            get() {\n","                return states[0];\n","            },\n","            set(v) {\n","                states.unshift(v);\n","                while (states.length > 2) {\n","                    states.pop();\n","                }\n","            }\n","        },\n","        previousValue: {\n","            get() {\n","                return states[1];\n","            }\n","        }\n","    });\n","    return getInstance();\n","}\n",""],"characterCount":10892,"percentage":13.257436650752846,"nodes":[{"name":"Observer.formatter","isBlockCoverage":false,"ranges":[{"startOffset":1807,"endOffset":1819,"count":5,"snippet":"(val) => val","linesDetailed":[{"startLine":50,"startColumn":105,"endLine":50,"endColumn":117,"snippet":"(val) => val"}],"startPercent":0.11038485033598046,"endPercent":0.11111789859499084,"startLine":50,"startColumn":105,"startCharacter":1807,"endLine":50,"endColumn":117,"endCharacter":1819}]},{"name":"getInstance","isBlockCoverage":false,"ranges":[{"startOffset":2106,"endOffset":2132,"count":68,"snippet":"() => observers.get(_this)","linesDetailed":[{"startLine":57,"startColumn":24,"endLine":57,"endColumn":50,"snippet":"() => observers.get(_this)"}],"startPercent":0.12864996945632254,"endPercent":0.13023824068417839,"startLine":57,"startColumn":24,"startCharacter":2106,"endLine":57,"endColumn":50,"endCharacter":2132}]},{"name":"formatValue","isBlockCoverage":false,"ranges":[{"startOffset":2158,"endOffset":2352,"count":7,"snippet":"(toFormat, obs = {}) => {\n        const f = formatter(toFormat, obs);\n        const inst = getInstance();\n        return inst && matchType && Type(f) !== initialType ? inst.data.value : f;\n    }","linesDetailed":[{"startLine":58,"startColumn":24,"endLine":58,"endColumn":49,"snippet":"(toFormat, obs = {}) => {"},{"startLine":59,"startColumn":0,"endLine":59,"endColumn":43,"snippet":"        const f = formatter(toFormat, obs);\n"},{"startLine":60,"startColumn":0,"endLine":60,"endColumn":35,"snippet":"        const inst = getInstance();\n"},{"startLine":61,"startColumn":0,"endLine":61,"endColumn":82,"snippet":"        return inst && matchType && Type(f) !== initialType ? inst.data.value : f;\n"},{"startLine":62,"startColumn":0,"endLine":62,"endColumn":5,"snippet":"    }"}],"startPercent":0.1318265119120342,"endPercent":0.14367745876603544,"startLine":58,"startColumn":24,"startCharacter":2158,"endLine":62,"endColumn":5,"endCharacter":2352}]},{"name":"callFn","isBlockCoverage":false,"ranges":[{"startOffset":3606,"endOffset":3809,"count":7,"snippet":"(val, valuesObj, functionKey, subscriptions) => (id) => {\n        const fn = Get(subscriptions, `${id}.${functionKey}`);\n        typeof fn === 'function' ? fn(val, valuesObj || {}, id) : undefined;\n    }","linesDetailed":[{"startLine":96,"startColumn":19,"endLine":96,"endColumn":76,"snippet":"(val, valuesObj, functionKey, subscriptions) => (id) => {"},{"startLine":97,"startColumn":0,"endLine":97,"endColumn":62,"snippet":"        const fn = Get(subscriptions, `${id}.${functionKey}`);\n"},{"startLine":98,"startColumn":0,"endLine":98,"endColumn":76,"snippet":"        typeof fn === 'function' ? fn(val, valuesObj || {}, id) : undefined;\n"},{"startLine":99,"startColumn":0,"endLine":99,"endColumn":5,"snippet":"    }"}],"startPercent":0.22028100183262064,"endPercent":0.23268173488087965,"startLine":96,"startColumn":19,"startCharacter":3606,"endLine":99,"endColumn":5,"endCharacter":3809}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":3654,"endOffset":3809,"count":7,"snippet":"(id) => {\n        const fn = Get(subscriptions, `${id}.${functionKey}`);\n        typeof fn === 'function' ? fn(val, valuesObj || {}, id) : undefined;\n    }","linesDetailed":[{"startLine":96,"startColumn":67,"endLine":96,"endColumn":76,"snippet":"(id) => {"},{"startLine":97,"startColumn":0,"endLine":97,"endColumn":62,"snippet":"        const fn = Get(subscriptions, `${id}.${functionKey}`);\n"},{"startLine":98,"startColumn":0,"endLine":98,"endColumn":76,"snippet":"        typeof fn === 'function' ? fn(val, valuesObj || {}, id) : undefined;\n"},{"startLine":99,"startColumn":0,"endLine":99,"endColumn":5,"snippet":"    }"}],"startPercent":0.22321319486866217,"endPercent":0.23268173488087965,"startLine":96,"startColumn":67,"startCharacter":3654,"endLine":99,"endColumn":5,"endCharacter":3809}]},{"name":"doLoop","isBlockCoverage":false,"ranges":[{"startOffset":3815,"endOffset":4205,"count":7,"snippet":"function doLoop(functionKey, val, valuesObj) {\n        const inst = getInstance();\n        if (!inst) {\n            return;\n        }\n        inst.trigger(functionKey, valuesObj || {});\n        const subs = inst.data.subscriptions;\n        Object.keys(subs).forEach(callFn(val, valuesObj, functionKey, subs));\n        if (functionKey === 'complete') {\n            destroy();\n        }\n    }","linesDetailed":[{"startLine":100,"startColumn":4,"endLine":100,"endColumn":50,"snippet":"function doLoop(functionKey, val, valuesObj) {"},{"startLine":101,"startColumn":0,"endLine":101,"endColumn":35,"snippet":"        const inst = getInstance();\n"},{"startLine":102,"startColumn":0,"endLine":102,"endColumn":20,"snippet":"        if (!inst) {\n"},{"startLine":103,"startColumn":0,"endLine":103,"endColumn":19,"snippet":"            return;\n"},{"startLine":104,"startColumn":0,"endLine":104,"endColumn":9,"snippet":"        }\n"},{"startLine":105,"startColumn":0,"endLine":105,"endColumn":51,"snippet":"        inst.trigger(functionKey, valuesObj || {});\n"},{"startLine":106,"startColumn":0,"endLine":106,"endColumn":45,"snippet":"        const subs = inst.data.subscriptions;\n"},{"startLine":107,"startColumn":0,"endLine":107,"endColumn":77,"snippet":"        Object.keys(subs).forEach(callFn(val, valuesObj, functionKey, subs));\n"},{"startLine":108,"startColumn":0,"endLine":108,"endColumn":41,"snippet":"        if (functionKey === 'complete') {\n"},{"startLine":109,"startColumn":0,"endLine":109,"endColumn":22,"snippet":"            destroy();\n"},{"startLine":110,"startColumn":0,"endLine":110,"endColumn":9,"snippet":"        }\n"},{"startLine":111,"startColumn":0,"endLine":111,"endColumn":5,"snippet":"    }"}],"startPercent":0.23304825901038484,"endPercent":0.25687232742822236,"startLine":100,"startColumn":4,"startCharacter":3815,"endLine":111,"endColumn":5,"endCharacter":4205}]},{"name":"get value","isBlockCoverage":false,"ranges":[{"startOffset":6024,"endOffset":6186,"count":30,"snippet":"get value() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            return inst.data.value;\n        }","linesDetailed":[{"startLine":170,"startColumn":8,"endLine":170,"endColumn":21,"snippet":"get value() {"},{"startLine":171,"startColumn":0,"endLine":171,"endColumn":39,"snippet":"            const inst = getInstance();\n"},{"startLine":172,"startColumn":0,"endLine":172,"endColumn":24,"snippet":"            if (!inst) {\n"},{"startLine":173,"startColumn":0,"endLine":173,"endColumn":23,"snippet":"                return;\n"},{"startLine":174,"startColumn":0,"endLine":174,"endColumn":13,"snippet":"            }\n"},{"startLine":175,"startColumn":0,"endLine":175,"endColumn":35,"snippet":"            return inst.data.value;\n"},{"startLine":176,"startColumn":0,"endLine":176,"endColumn":9,"snippet":"        }"}],"startPercent":0.3679902260232132,"endPercent":0.3778863775198534,"startLine":170,"startColumn":8,"startCharacter":6024,"endLine":176,"endColumn":9,"endCharacter":6186}]},{"name":"get subscriptions","isBlockCoverage":false,"ranges":[{"startOffset":6379,"endOffset":6557,"count":10,"snippet":"get subscriptions() {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            return inst.data.subscriptions;\n        }","linesDetailed":[{"startLine":184,"startColumn":8,"endLine":184,"endColumn":29,"snippet":"get subscriptions() {"},{"startLine":185,"startColumn":0,"endLine":185,"endColumn":39,"snippet":"            const inst = getInstance();\n"},{"startLine":186,"startColumn":0,"endLine":186,"endColumn":24,"snippet":"            if (!inst) {\n"},{"startLine":187,"startColumn":0,"endLine":187,"endColumn":23,"snippet":"                return;\n"},{"startLine":188,"startColumn":0,"endLine":188,"endColumn":13,"snippet":"            }\n"},{"startLine":189,"startColumn":0,"endLine":189,"endColumn":43,"snippet":"            return inst.data.subscriptions;\n"},{"startLine":190,"startColumn":0,"endLine":190,"endColumn":9,"snippet":"        }"}],"startPercent":0.38967623701893706,"endPercent":0.4005497861942578,"startLine":184,"startColumn":8,"startCharacter":6379,"endLine":190,"endColumn":9,"endCharacter":6557}]},{"name":"next","isBlockCoverage":false,"ranges":[{"startOffset":7334,"endOffset":7814,"count":7,"snippet":"function (v, force) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const formatted = formatValue(v, inst);\n            if (!force && nextOnNew && Equals(formatted, inst.data.value)) {\n                return;\n            }\n            inst.data.value = formatted;\n            inst.data.updated = new Date().getTime();\n            loop('next', inst.data.value, inst.data);\n            return inst.data;\n        }","linesDetailed":[{"startLine":219,"startColumn":14,"endLine":219,"endColumn":35,"snippet":"function (v, force) {"},{"startLine":220,"startColumn":0,"endLine":220,"endColumn":39,"snippet":"            const inst = getInstance();\n"},{"startLine":221,"startColumn":0,"endLine":221,"endColumn":24,"snippet":"            if (!inst) {\n"},{"startLine":222,"startColumn":0,"endLine":222,"endColumn":23,"snippet":"                return;\n"},{"startLine":223,"startColumn":0,"endLine":223,"endColumn":13,"snippet":"            }\n"},{"startLine":224,"startColumn":0,"endLine":224,"endColumn":51,"snippet":"            const formatted = formatValue(v, inst);\n"},{"startLine":225,"startColumn":0,"endLine":225,"endColumn":76,"snippet":"            if (!force && nextOnNew && Equals(formatted, inst.data.value)) {\n"},{"startLine":226,"startColumn":0,"endLine":226,"endColumn":23,"snippet":"                return;\n"},{"startLine":227,"startColumn":0,"endLine":227,"endColumn":13,"snippet":"            }\n"},{"startLine":228,"startColumn":0,"endLine":228,"endColumn":40,"snippet":"            inst.data.value = formatted;\n"},{"startLine":229,"startColumn":0,"endLine":229,"endColumn":53,"snippet":"            inst.data.updated = new Date().getTime();\n"},{"startLine":230,"startColumn":0,"endLine":230,"endColumn":53,"snippet":"            loop('next', inst.data.value, inst.data);\n"},{"startLine":231,"startColumn":0,"endLine":231,"endColumn":29,"snippet":"            return inst.data;\n"},{"startLine":232,"startColumn":0,"endLine":232,"endColumn":9,"snippet":"        }"}],"startPercent":0.4480146609651802,"endPercent":0.4773365913255956,"startLine":219,"startColumn":14,"startCharacter":7334,"endLine":232,"endColumn":9,"endCharacter":7814}]},{"name":"trigger","isBlockCoverage":false,"ranges":[{"startOffset":15022,"endOffset":15370,"count":7,"snippet":"function trigger(name, data) {\n            const inst = getInstance();\n            if (!inst) {\n                return;\n            }\n            const callbacks = inst.data.eventCallbacks[name];\n            if (!callbacks) {\n                return;\n            }\n            Object.keys(callbacks).forEach(prop => callbacks[prop](data));\n        }","linesDetailed":[{"startLine":416,"startColumn":17,"endLine":416,"endColumn":47,"snippet":"function trigger(name, data) {"},{"startLine":417,"startColumn":0,"endLine":417,"endColumn":39,"snippet":"            const inst = getInstance();\n"},{"startLine":418,"startColumn":0,"endLine":418,"endColumn":24,"snippet":"            if (!inst) {\n"},{"startLine":419,"startColumn":0,"endLine":419,"endColumn":23,"snippet":"                return;\n"},{"startLine":420,"startColumn":0,"endLine":420,"endColumn":13,"snippet":"            }\n"},{"startLine":421,"startColumn":0,"endLine":421,"endColumn":61,"snippet":"            const callbacks = inst.data.eventCallbacks[name];\n"},{"startLine":422,"startColumn":0,"endLine":422,"endColumn":29,"snippet":"            if (!callbacks) {\n"},{"startLine":423,"startColumn":0,"endLine":423,"endColumn":23,"snippet":"                return;\n"},{"startLine":424,"startColumn":0,"endLine":424,"endColumn":13,"snippet":"            }\n"},{"startLine":425,"startColumn":0,"endLine":425,"endColumn":74,"snippet":"            Object.keys(callbacks).forEach(prop => callbacks[prop](data));\n"},{"startLine":426,"startColumn":0,"endLine":426,"endColumn":9,"snippet":"        }"}],"startPercent":0.9176542455711668,"endPercent":0.938912645082468,"startLine":416,"startColumn":17,"startCharacter":15022,"endLine":426,"endColumn":9,"endCharacter":15370}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":15329,"endOffset":15358,"count":0,"snippet":"prop => callbacks[prop](data)","linesDetailed":[{"startLine":425,"startColumn":43,"endLine":425,"endColumn":72,"snippet":"prop => callbacks[prop](data)"}],"startPercent":0.9364080635308492,"endPercent":0.9381795968234575,"startLine":425,"startColumn":43,"startCharacter":15329,"endLine":425,"endColumn":72,"endCharacter":15358}]},{"name":"get","isBlockCoverage":false,"ranges":[{"startOffset":15997,"endOffset":16052,"count":39,"snippet":"get() {\n                return states[0];\n            }","linesDetailed":[{"startLine":449,"startColumn":12,"endLine":449,"endColumn":19,"snippet":"get() {"},{"startLine":450,"startColumn":0,"endLine":450,"endColumn":33,"snippet":"                return states[0];\n"},{"startLine":451,"startColumn":0,"endLine":451,"endColumn":13,"snippet":"            }"}],"startPercent":0.9772144166157606,"endPercent":0.9805742211362248,"startLine":449,"startColumn":12,"startCharacter":15997,"endLine":451,"endColumn":13,"endCharacter":16052}]},{"name":"set","isBlockCoverage":false,"ranges":[{"startOffset":16066,"endOffset":16219,"count":7,"snippet":"set(v) {\n                states.unshift(v);\n                while (states.length > 2) {\n                    states.pop();\n                }\n            }","linesDetailed":[{"startLine":452,"startColumn":12,"endLine":452,"endColumn":20,"snippet":"set(v) {"},{"startLine":453,"startColumn":0,"endLine":453,"endColumn":34,"snippet":"                states.unshift(v);\n"},{"startLine":454,"startColumn":0,"endLine":454,"endColumn":43,"snippet":"                while (states.length > 2) {\n"},{"startLine":455,"startColumn":0,"endLine":455,"endColumn":33,"snippet":"                    states.pop();\n"},{"startLine":456,"startColumn":0,"endLine":456,"endColumn":17,"snippet":"                }\n"},{"startLine":457,"startColumn":0,"endLine":457,"endColumn":13,"snippet":"            }"}],"startPercent":0.9814294441050703,"endPercent":0.9907758094074527,"startLine":452,"startColumn":12,"startCharacter":16066,"endLine":457,"endColumn":13,"endCharacter":16219}]}]},"/dist/utils/observe/event-observer.js":{"source":"import Observer, { nullObserver } from \"./observer.js\";\nexport default function EventObserver(element, eventName, options = {}) {\n    if (!element || !eventName) {\n        return nullObserver();\n    }\n    let isRunning = false;\n    options = Object.assign({}, {\n        preventDefault: false,\n        stopPropagation: false,\n        useCapture: true\n    }, options || {});\n    function canListen() {\n        return element && typeof element.addEventListener == 'function';\n    }\n    function onSubscribe() {\n        if (isRunning) {\n            return;\n        }\n        if (!canListen()) {\n            return shutDown();\n        }\n        isRunning = true;\n        element.addEventListener(eventName, eventHandler, options.useCapture);\n    }\n    const observer = Observer(undefined, Object.assign({}, options, { onSubscribe, nextOnNew: false }));\n    function eventHandler(event) {\n        if (!observer || !observer.subscriptions || Object.keys(observer.subscriptions).length === 0) {\n            return shutDown();\n        }\n        if ((typeof options.preventDefault == 'function' && !!options.preventDefault(event)) || (typeof options.preventDefault == 'boolean' && options.preventDefault)) {\n            event.preventDefault();\n        }\n        if ((typeof options.stopPropagation == 'function' && !!options.stopPropagation(event)) || (typeof options.stopPropagation == 'boolean' && options.stopPropagation)) {\n            event.stopPropagation();\n        }\n        observer.next(event);\n    }\n    function shutDown() {\n        if (canListen()) {\n            element.removeEventListener(eventName, eventHandler, options.useCapture);\n        }\n        isRunning = false;\n        if (element instanceof Window) {\n            return;\n        }\n    }\n    return observer;\n}\n","lines":["import Observer, { nullObserver } from \"./observer.js\";\n","export default function EventObserver(element, eventName, options = {}) {\n","    if (!element || !eventName) {\n","        return nullObserver();\n","    }\n","    let isRunning = false;\n","    options = Object.assign({}, {\n","        preventDefault: false,\n","        stopPropagation: false,\n","        useCapture: true\n","    }, options || {});\n","    function canListen() {\n","        return element && typeof element.addEventListener == 'function';\n","    }\n","    function onSubscribe() {\n","        if (isRunning) {\n","            return;\n","        }\n","        if (!canListen()) {\n","            return shutDown();\n","        }\n","        isRunning = true;\n","        element.addEventListener(eventName, eventHandler, options.useCapture);\n","    }\n","    const observer = Observer(undefined, Object.assign({}, options, { onSubscribe, nextOnNew: false }));\n","    function eventHandler(event) {\n","        if (!observer || !observer.subscriptions || Object.keys(observer.subscriptions).length === 0) {\n","            return shutDown();\n","        }\n","        if ((typeof options.preventDefault == 'function' && !!options.preventDefault(event)) || (typeof options.preventDefault == 'boolean' && options.preventDefault)) {\n","            event.preventDefault();\n","        }\n","        if ((typeof options.stopPropagation == 'function' && !!options.stopPropagation(event)) || (typeof options.stopPropagation == 'boolean' && options.stopPropagation)) {\n","            event.stopPropagation();\n","        }\n","        observer.next(event);\n","    }\n","    function shutDown() {\n","        if (canListen()) {\n","            element.removeEventListener(eventName, eventHandler, options.useCapture);\n","        }\n","        isRunning = false;\n","        if (element instanceof Window) {\n","            return;\n","        }\n","    }\n","    return observer;\n","}\n",""],"characterCount":1331,"percentage":40.64613072877536,"nodes":[{"name":"eventHandler","isBlockCoverage":false,"ranges":[{"startOffset":852,"endOffset":1500,"count":5,"snippet":"function eventHandler(event) {\n        if (!observer || !observer.subscriptions || Object.keys(observer.subscriptions).length === 0) {\n            return shutDown();\n        }\n        if ((typeof options.preventDefault == 'function' && !!options.preventDefault(event)) || (typeof options.preventDefault == 'boolean' && options.preventDefault)) {\n            event.preventDefault();\n        }\n        if ((typeof options.stopPropagation == 'function' && !!options.stopPropagation(event)) || (typeof options.stopPropagation == 'boolean' && options.stopPropagation)) {\n            event.stopPropagation();\n        }\n        observer.next(event);\n    }","linesDetailed":[{"startLine":25,"startColumn":4,"endLine":25,"endColumn":34,"snippet":"function eventHandler(event) {"},{"startLine":26,"startColumn":0,"endLine":26,"endColumn":103,"snippet":"        if (!observer || !observer.subscriptions || Object.keys(observer.subscriptions).length === 0) {\n"},{"startLine":27,"startColumn":0,"endLine":27,"endColumn":30,"snippet":"            return shutDown();\n"},{"startLine":28,"startColumn":0,"endLine":28,"endColumn":9,"snippet":"        }\n"},{"startLine":29,"startColumn":0,"endLine":29,"endColumn":169,"snippet":"        if ((typeof options.preventDefault == 'function' && !!options.preventDefault(event)) || (typeof options.preventDefault == 'boolean' && options.preventDefault)) {\n"},{"startLine":30,"startColumn":0,"endLine":30,"endColumn":35,"snippet":"            event.preventDefault();\n"},{"startLine":31,"startColumn":0,"endLine":31,"endColumn":9,"snippet":"        }\n"},{"startLine":32,"startColumn":0,"endLine":32,"endColumn":173,"snippet":"        if ((typeof options.stopPropagation == 'function' && !!options.stopPropagation(event)) || (typeof options.stopPropagation == 'boolean' && options.stopPropagation)) {\n"},{"startLine":33,"startColumn":0,"endLine":33,"endColumn":36,"snippet":"            event.stopPropagation();\n"},{"startLine":34,"startColumn":0,"endLine":34,"endColumn":9,"snippet":"        }\n"},{"startLine":35,"startColumn":0,"endLine":35,"endColumn":29,"snippet":"        observer.next(event);\n"},{"startLine":36,"startColumn":0,"endLine":36,"endColumn":5,"snippet":"    }"}],"startPercent":0.47945976364659537,"endPercent":0.8441193021947102,"startLine":25,"startColumn":4,"startCharacter":852,"endLine":36,"endColumn":5,"endCharacter":1500}]}]},"/dist/utils/types/type.js":{"source":"import IsNonCollection from \"./is-non-collection.js\";\nimport IsDom from \"./is-dom.js\";\nimport IsDate from \"./is-date.js\";\nimport IsObject from \"./is-object.js\";\nexport default function Type(value) {\n    return value === null ?\n        'null' :\n        IsNonCollection(value) ?\n            IsDate(value) ?\n                'date' :\n                typeof value :\n            IsDom(value) ?\n                'dom' :\n                Array.isArray(value) ?\n                    'array' :\n                    IsObject(value) ?\n                        'object' :\n                        typeof value;\n}\n","lines":["import IsNonCollection from \"./is-non-collection.js\";\n","import IsDom from \"./is-dom.js\";\n","import IsDate from \"./is-date.js\";\n","import IsObject from \"./is-object.js\";\n","export default function Type(value) {\n","    return value === null ?\n","        'null' :\n","        IsNonCollection(value) ?\n","            IsDate(value) ?\n","                'date' :\n","                typeof value :\n","            IsDom(value) ?\n","                'dom' :\n","                Array.isArray(value) ?\n","                    'array' :\n","                    IsObject(value) ?\n","                        'object' :\n","                        typeof value;\n","}\n",""],"characterCount":207,"percentage":100,"nodes":[{"name":"Type","isBlockCoverage":false,"ranges":[{"startOffset":176,"endOffset":593,"count":6,"snippet":"function Type(value) {\n    return value === null ?\n        'null' :\n        IsNonCollection(value) ?\n            IsDate(value) ?\n                'date' :\n                typeof value :\n            IsDom(value) ?\n                'dom' :\n                Array.isArray(value) ?\n                    'array' :\n                    IsObject(value) ?\n                        'object' :\n                        typeof value;\n}","linesDetailed":[{"startLine":4,"startColumn":15,"endLine":4,"endColumn":37,"snippet":"function Type(value) {"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":27,"snippet":"    return value === null ?\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":16,"snippet":"        'null' :\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":32,"snippet":"        IsNonCollection(value) ?\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":27,"snippet":"            IsDate(value) ?\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":24,"snippet":"                'date' :\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":30,"snippet":"                typeof value :\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":26,"snippet":"            IsDom(value) ?\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":23,"snippet":"                'dom' :\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":38,"snippet":"                Array.isArray(value) ?\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":29,"snippet":"                    'array' :\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":37,"snippet":"                    IsObject(value) ?\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":34,"snippet":"                        'object' :\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":37,"snippet":"                        typeof value;\n"},{"startLine":18,"startColumn":0,"endLine":18,"endColumn":1,"snippet":"}"}],"startPercent":0.2962962962962963,"endPercent":0.9983164983164983,"startLine":4,"startColumn":15,"startCharacter":176,"endLine":18,"endColumn":1,"endCharacter":593}]}]},"/dist/utils/validate/html.js":{"source":"import Try from \"../try.js\";\nimport FromEntities from \"../conversion/from-entities.js\";\nimport SelectAll from \"../dom/select-all.js\";\nexport default function ValidateHtml(str, disallowedHtmlTags = ['script'], allowedHtmlTags = []) {\n    const original = str;\n    const converted = Try(() => FromEntities(str.toString()), '');\n    if (!converted || !converted.length) {\n        return {\n            original: original,\n            valid: false,\n            sanitized: converted,\n            reason: ['no value']\n        };\n    }\n    const doc = Try(() => new DOMParser().parseFromString(converted, 'text/html'));\n    if (!doc) {\n        return { original: original, valid: true, sanitized: converted, reason: ['no html present'], };\n    }\n    const totalElements = SelectAll('*', doc);\n    let tagsToDestroy = [];\n    function allowedHtmlTagsEach(tag) {\n        const index = tagsToDestroy.indexOf(tag);\n        if (index > -1) {\n            tagsToDestroy.splice(index, 1);\n        }\n    }\n    function tagsToDestroyEach(tag) {\n        const els = SelectAll(tag, doc);\n        while (els.length) {\n            destroyElement(els.pop());\n        }\n    }\n    function destroyElement(el) {\n        if (!el) {\n            return;\n        }\n        const parent = el.parentNode;\n        if (el && parent) {\n            const childrenLength = el.children.length;\n            let index = 0;\n            while (index < childrenLength) {\n                if (typeof parent.insertBefore == 'function') {\n                    parent.insertBefore(el.children[index], el);\n                }\n                index = index + 1;\n            }\n            parent.removeChild(el);\n        }\n    }\n    if (disallowedHtmlTags.length) {\n        tagsToDestroy = disallowedHtmlTags.slice(0);\n    }\n    else {\n        tagsToDestroy = htmlTags.concat(svgTags);\n    }\n    if (allowedHtmlTags.length) {\n        allowedHtmlTags.forEach(allowedHtmlTagsEach);\n    }\n    if (!allowedHtmlTags.length && !disallowedHtmlTags.length) {\n        tagsToDestroy = htmlTags.concat(svgTags);\n    }\n    tagsToDestroy.forEach(tagsToDestroyEach);\n    const leftOverElements = SelectAll('*', doc);\n    const diff = totalElements.length - leftOverElements.length;\n    const valid = diff === 0;\n    return {\n        original: original,\n        valid: valid,\n        sanitized: valid ? converted : !doc.body.innerHTML || !doc.body.innerHTML.length ? '' : doc.body.innerHTML,\n        reason: valid ? [] : [`${diff} element${diff > 1 ? 's were' : 'was'} removed`]\n    };\n}\nconst htmlTags = [\n    'a',\n    'abbr',\n    'acronym',\n    'address',\n    'area',\n    'article',\n    'aside',\n    'audio',\n    'b',\n    'bdi',\n    'bdo',\n    'big',\n    'blink',\n    'blockquote',\n    'body',\n    'br',\n    'button',\n    'canvas',\n    'caption',\n    'center',\n    'cite',\n    'code',\n    'col',\n    'colgroup',\n    'content',\n    'data',\n    'datalist',\n    'dd',\n    'decorator',\n    'del',\n    'details',\n    'dfn',\n    'dir',\n    'div',\n    'dl',\n    'dt',\n    'element',\n    'em',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'font',\n    'footer',\n    'form',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'head',\n    'header',\n    'hgroup',\n    'hr',\n    'html',\n    'i',\n    'img',\n    'input',\n    'ins',\n    'kbd',\n    'label',\n    'legend',\n    'li',\n    'main',\n    'map',\n    'mark',\n    'marquee',\n    'menu',\n    'menuitem',\n    'meter',\n    'nav',\n    'nobr',\n    'ol',\n    'optgroup',\n    'option',\n    'output',\n    'p',\n    'pre',\n    'progress',\n    'q',\n    'rp',\n    'rt',\n    'ruby',\n    's',\n    'samp',\n    'section',\n    'select',\n    'shadow',\n    'small',\n    'source',\n    'spacer',\n    'span',\n    'strike',\n    'strong',\n    'style',\n    'sub',\n    'summary',\n    'sup',\n    'table',\n    'tbody',\n    'td',\n    'template',\n    'textarea',\n    'tfoot',\n    'th',\n    'thead',\n    'time',\n    'tr',\n    'track',\n    'tt',\n    'u',\n    'ul',\n    'var',\n    'video',\n    'wbr'\n];\nconst svgTags = [\n    'svg',\n    'a',\n    'altglyph',\n    'altglyphdef',\n    'altglyphitem',\n    'animatecolor',\n    'animatemotion',\n    'animatetransform',\n    'audio',\n    'canvas',\n    'circle',\n    'clippath',\n    'defs',\n    'desc',\n    'ellipse',\n    'filter',\n    'font',\n    'g',\n    'glyph',\n    'glyphref',\n    'hkern',\n    'image',\n    'line',\n    'lineargradient',\n    'marker',\n    'mask',\n    'metadata',\n    'mpath',\n    'path',\n    'pattern',\n    'polygon',\n    'polyline',\n    'radialgradient',\n    'rect',\n    'stop',\n    'style',\n    'switch',\n    'symbol',\n    'text',\n    'textpath',\n    'title',\n    'tref',\n    'tspan',\n    'video',\n    'view',\n    'vkern'\n];\nexport const SantizedHTML = (val) => !val ? '' : ValidateHtml(val).sanitized;\n","lines":["import Try from \"../try.js\";\n","import FromEntities from \"../conversion/from-entities.js\";\n","import SelectAll from \"../dom/select-all.js\";\n","export default function ValidateHtml(str, disallowedHtmlTags = ['script'], allowedHtmlTags = []) {\n","    const original = str;\n","    const converted = Try(() => FromEntities(str.toString()), '');\n","    if (!converted || !converted.length) {\n","        return {\n","            original: original,\n","            valid: false,\n","            sanitized: converted,\n","            reason: ['no value']\n","        };\n","    }\n","    const doc = Try(() => new DOMParser().parseFromString(converted, 'text/html'));\n","    if (!doc) {\n","        return { original: original, valid: true, sanitized: converted, reason: ['no html present'], };\n","    }\n","    const totalElements = SelectAll('*', doc);\n","    let tagsToDestroy = [];\n","    function allowedHtmlTagsEach(tag) {\n","        const index = tagsToDestroy.indexOf(tag);\n","        if (index > -1) {\n","            tagsToDestroy.splice(index, 1);\n","        }\n","    }\n","    function tagsToDestroyEach(tag) {\n","        const els = SelectAll(tag, doc);\n","        while (els.length) {\n","            destroyElement(els.pop());\n","        }\n","    }\n","    function destroyElement(el) {\n","        if (!el) {\n","            return;\n","        }\n","        const parent = el.parentNode;\n","        if (el && parent) {\n","            const childrenLength = el.children.length;\n","            let index = 0;\n","            while (index < childrenLength) {\n","                if (typeof parent.insertBefore == 'function') {\n","                    parent.insertBefore(el.children[index], el);\n","                }\n","                index = index + 1;\n","            }\n","            parent.removeChild(el);\n","        }\n","    }\n","    if (disallowedHtmlTags.length) {\n","        tagsToDestroy = disallowedHtmlTags.slice(0);\n","    }\n","    else {\n","        tagsToDestroy = htmlTags.concat(svgTags);\n","    }\n","    if (allowedHtmlTags.length) {\n","        allowedHtmlTags.forEach(allowedHtmlTagsEach);\n","    }\n","    if (!allowedHtmlTags.length && !disallowedHtmlTags.length) {\n","        tagsToDestroy = htmlTags.concat(svgTags);\n","    }\n","    tagsToDestroy.forEach(tagsToDestroyEach);\n","    const leftOverElements = SelectAll('*', doc);\n","    const diff = totalElements.length - leftOverElements.length;\n","    const valid = diff === 0;\n","    return {\n","        original: original,\n","        valid: valid,\n","        sanitized: valid ? converted : !doc.body.innerHTML || !doc.body.innerHTML.length ? '' : doc.body.innerHTML,\n","        reason: valid ? [] : [`${diff} element${diff > 1 ? 's were' : 'was'} removed`]\n","    };\n","}\n","const htmlTags = [\n","    'a',\n","    'abbr',\n","    'acronym',\n","    'address',\n","    'area',\n","    'article',\n","    'aside',\n","    'audio',\n","    'b',\n","    'bdi',\n","    'bdo',\n","    'big',\n","    'blink',\n","    'blockquote',\n","    'body',\n","    'br',\n","    'button',\n","    'canvas',\n","    'caption',\n","    'center',\n","    'cite',\n","    'code',\n","    'col',\n","    'colgroup',\n","    'content',\n","    'data',\n","    'datalist',\n","    'dd',\n","    'decorator',\n","    'del',\n","    'details',\n","    'dfn',\n","    'dir',\n","    'div',\n","    'dl',\n","    'dt',\n","    'element',\n","    'em',\n","    'fieldset',\n","    'figcaption',\n","    'figure',\n","    'font',\n","    'footer',\n","    'form',\n","    'h1',\n","    'h2',\n","    'h3',\n","    'h4',\n","    'h5',\n","    'h6',\n","    'head',\n","    'header',\n","    'hgroup',\n","    'hr',\n","    'html',\n","    'i',\n","    'img',\n","    'input',\n","    'ins',\n","    'kbd',\n","    'label',\n","    'legend',\n","    'li',\n","    'main',\n","    'map',\n","    'mark',\n","    'marquee',\n","    'menu',\n","    'menuitem',\n","    'meter',\n","    'nav',\n","    'nobr',\n","    'ol',\n","    'optgroup',\n","    'option',\n","    'output',\n","    'p',\n","    'pre',\n","    'progress',\n","    'q',\n","    'rp',\n","    'rt',\n","    'ruby',\n","    's',\n","    'samp',\n","    'section',\n","    'select',\n","    'shadow',\n","    'small',\n","    'source',\n","    'spacer',\n","    'span',\n","    'strike',\n","    'strong',\n","    'style',\n","    'sub',\n","    'summary',\n","    'sup',\n","    'table',\n","    'tbody',\n","    'td',\n","    'template',\n","    'textarea',\n","    'tfoot',\n","    'th',\n","    'thead',\n","    'time',\n","    'tr',\n","    'track',\n","    'tt',\n","    'u',\n","    'ul',\n","    'var',\n","    'video',\n","    'wbr'\n","];\n","const svgTags = [\n","    'svg',\n","    'a',\n","    'altglyph',\n","    'altglyphdef',\n","    'altglyphitem',\n","    'animatecolor',\n","    'animatemotion',\n","    'animatetransform',\n","    'audio',\n","    'canvas',\n","    'circle',\n","    'clippath',\n","    'defs',\n","    'desc',\n","    'ellipse',\n","    'filter',\n","    'font',\n","    'g',\n","    'glyph',\n","    'glyphref',\n","    'hkern',\n","    'image',\n","    'line',\n","    'lineargradient',\n","    'marker',\n","    'mask',\n","    'metadata',\n","    'mpath',\n","    'path',\n","    'pattern',\n","    'polygon',\n","    'polyline',\n","    'radialgradient',\n","    'rect',\n","    'stop',\n","    'style',\n","    'switch',\n","    'symbol',\n","    'text',\n","    'textpath',\n","    'title',\n","    'tref',\n","    'tspan',\n","    'video',\n","    'view',\n","    'vkern'\n","];\n","export const SantizedHTML = (val) => !val ? '' : ValidateHtml(val).sanitized;\n",""],"characterCount":3188,"percentage":32.340025094102884,"nodes":[{"name":"ValidateHtml","isBlockCoverage":true,"ranges":[{"startOffset":149,"endOffset":2519,"count":1,"snippet":"function ValidateHtml(str, disallowedHtmlTags = ['script'], allowedHtmlTags = []) {\n    const original = str;\n    const converted = Try(() => FromEntities(str.toString()), '');\n    if (!converted || !converted.length) {\n        return {\n            original: original,\n            valid: false,\n            sanitized: converted,\n            reason: ['no value']\n        };\n    }\n    const doc = Try(() => new DOMParser().parseFromString(converted, 'text/html'));\n    if (!doc) {\n        return { original: original, valid: true, sanitized: converted, reason: ['no html present'], };\n    }\n    const totalElements = SelectAll('*', doc);\n    let tagsToDestroy = [];\n    function allowedHtmlTagsEach(tag) {\n        const index = tagsToDestroy.indexOf(tag);\n        if (index > -1) {\n            tagsToDestroy.splice(index, 1);\n        }\n    }\n    function tagsToDestroyEach(tag) {\n        const els = SelectAll(tag, doc);\n        while (els.length) {\n            destroyElement(els.pop());\n        }\n    }\n    function destroyElement(el) {\n        if (!el) {\n            return;\n        }\n        const parent = el.parentNode;\n        if (el && parent) {\n            const childrenLength = el.children.length;\n            let index = 0;\n            while (index < childrenLength) {\n                if (typeof parent.insertBefore == 'function') {\n                    parent.insertBefore(el.children[index], el);\n                }\n                index = index + 1;\n            }\n            parent.removeChild(el);\n        }\n    }\n    if (disallowedHtmlTags.length) {\n        tagsToDestroy = disallowedHtmlTags.slice(0);\n    }\n    else {\n        tagsToDestroy = htmlTags.concat(svgTags);\n    }\n    if (allowedHtmlTags.length) {\n        allowedHtmlTags.forEach(allowedHtmlTagsEach);\n    }\n    if (!allowedHtmlTags.length && !disallowedHtmlTags.length) {\n        tagsToDestroy = htmlTags.concat(svgTags);\n    }\n    tagsToDestroy.forEach(tagsToDestroyEach);\n    const leftOverElements = SelectAll('*', doc);\n    const diff = totalElements.length - leftOverElements.length;\n    const valid = diff === 0;\n    return {\n        original: original,\n        valid: valid,\n        sanitized: valid ? converted : !doc.body.innerHTML || !doc.body.innerHTML.length ? '' : doc.body.innerHTML,\n        reason: valid ? [] : [`${diff} element${diff > 1 ? 's were' : 'was'} removed`]\n    };\n}","linesDetailed":[{"startLine":3,"startColumn":15,"endLine":3,"endColumn":98,"snippet":"function ValidateHtml(str, disallowedHtmlTags = ['script'], allowedHtmlTags = []) {"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":25,"snippet":"    const original = str;\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":66,"snippet":"    const converted = Try(() => FromEntities(str.toString()), '');\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":42,"snippet":"    if (!converted || !converted.length) {\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":16,"snippet":"        return {\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":31,"snippet":"            original: original,\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":25,"snippet":"            valid: false,\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":33,"snippet":"            sanitized: converted,\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":32,"snippet":"            reason: ['no value']\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":10,"snippet":"        };\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":5,"snippet":"    }\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":83,"snippet":"    const doc = Try(() => new DOMParser().parseFromString(converted, 'text/html'));\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":15,"snippet":"    if (!doc) {\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":103,"snippet":"        return { original: original, valid: true, sanitized: converted, reason: ['no html present'], };\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":5,"snippet":"    }\n"},{"startLine":18,"startColumn":0,"endLine":18,"endColumn":46,"snippet":"    const totalElements = SelectAll('*', doc);\n"},{"startLine":19,"startColumn":0,"endLine":19,"endColumn":27,"snippet":"    let tagsToDestroy = [];\n"},{"startLine":20,"startColumn":0,"endLine":20,"endColumn":39,"snippet":"    function allowedHtmlTagsEach(tag) {\n"},{"startLine":21,"startColumn":0,"endLine":21,"endColumn":49,"snippet":"        const index = tagsToDestroy.indexOf(tag);\n"},{"startLine":22,"startColumn":0,"endLine":22,"endColumn":25,"snippet":"        if (index > -1) {\n"},{"startLine":23,"startColumn":0,"endLine":23,"endColumn":43,"snippet":"            tagsToDestroy.splice(index, 1);\n"},{"startLine":24,"startColumn":0,"endLine":24,"endColumn":9,"snippet":"        }\n"},{"startLine":25,"startColumn":0,"endLine":25,"endColumn":5,"snippet":"    }\n"},{"startLine":26,"startColumn":0,"endLine":26,"endColumn":37,"snippet":"    function tagsToDestroyEach(tag) {\n"},{"startLine":27,"startColumn":0,"endLine":27,"endColumn":40,"snippet":"        const els = SelectAll(tag, doc);\n"},{"startLine":28,"startColumn":0,"endLine":28,"endColumn":28,"snippet":"        while (els.length) {\n"},{"startLine":29,"startColumn":0,"endLine":29,"endColumn":38,"snippet":"            destroyElement(els.pop());\n"},{"startLine":30,"startColumn":0,"endLine":30,"endColumn":9,"snippet":"        }\n"},{"startLine":31,"startColumn":0,"endLine":31,"endColumn":5,"snippet":"    }\n"},{"startLine":32,"startColumn":0,"endLine":32,"endColumn":33,"snippet":"    function destroyElement(el) {\n"},{"startLine":33,"startColumn":0,"endLine":33,"endColumn":18,"snippet":"        if (!el) {\n"},{"startLine":34,"startColumn":0,"endLine":34,"endColumn":19,"snippet":"            return;\n"},{"startLine":35,"startColumn":0,"endLine":35,"endColumn":9,"snippet":"        }\n"},{"startLine":36,"startColumn":0,"endLine":36,"endColumn":37,"snippet":"        const parent = el.parentNode;\n"},{"startLine":37,"startColumn":0,"endLine":37,"endColumn":27,"snippet":"        if (el && parent) {\n"},{"startLine":38,"startColumn":0,"endLine":38,"endColumn":54,"snippet":"            const childrenLength = el.children.length;\n"},{"startLine":39,"startColumn":0,"endLine":39,"endColumn":26,"snippet":"            let index = 0;\n"},{"startLine":40,"startColumn":0,"endLine":40,"endColumn":44,"snippet":"            while (index < childrenLength) {\n"},{"startLine":41,"startColumn":0,"endLine":41,"endColumn":63,"snippet":"                if (typeof parent.insertBefore == 'function') {\n"},{"startLine":42,"startColumn":0,"endLine":42,"endColumn":64,"snippet":"                    parent.insertBefore(el.children[index], el);\n"},{"startLine":43,"startColumn":0,"endLine":43,"endColumn":17,"snippet":"                }\n"},{"startLine":44,"startColumn":0,"endLine":44,"endColumn":34,"snippet":"                index = index + 1;\n"},{"startLine":45,"startColumn":0,"endLine":45,"endColumn":13,"snippet":"            }\n"},{"startLine":46,"startColumn":0,"endLine":46,"endColumn":35,"snippet":"            parent.removeChild(el);\n"},{"startLine":47,"startColumn":0,"endLine":47,"endColumn":9,"snippet":"        }\n"},{"startLine":48,"startColumn":0,"endLine":48,"endColumn":5,"snippet":"    }\n"},{"startLine":49,"startColumn":0,"endLine":49,"endColumn":36,"snippet":"    if (disallowedHtmlTags.length) {\n"},{"startLine":50,"startColumn":0,"endLine":50,"endColumn":52,"snippet":"        tagsToDestroy = disallowedHtmlTags.slice(0);\n"},{"startLine":51,"startColumn":0,"endLine":51,"endColumn":5,"snippet":"    }\n"},{"startLine":52,"startColumn":0,"endLine":52,"endColumn":10,"snippet":"    else {\n"},{"startLine":53,"startColumn":0,"endLine":53,"endColumn":49,"snippet":"        tagsToDestroy = htmlTags.concat(svgTags);\n"},{"startLine":54,"startColumn":0,"endLine":54,"endColumn":5,"snippet":"    }\n"},{"startLine":55,"startColumn":0,"endLine":55,"endColumn":33,"snippet":"    if (allowedHtmlTags.length) {\n"},{"startLine":56,"startColumn":0,"endLine":56,"endColumn":53,"snippet":"        allowedHtmlTags.forEach(allowedHtmlTagsEach);\n"},{"startLine":57,"startColumn":0,"endLine":57,"endColumn":5,"snippet":"    }\n"},{"startLine":58,"startColumn":0,"endLine":58,"endColumn":64,"snippet":"    if (!allowedHtmlTags.length && !disallowedHtmlTags.length) {\n"},{"startLine":59,"startColumn":0,"endLine":59,"endColumn":49,"snippet":"        tagsToDestroy = htmlTags.concat(svgTags);\n"},{"startLine":60,"startColumn":0,"endLine":60,"endColumn":5,"snippet":"    }\n"},{"startLine":61,"startColumn":0,"endLine":61,"endColumn":45,"snippet":"    tagsToDestroy.forEach(tagsToDestroyEach);\n"},{"startLine":62,"startColumn":0,"endLine":62,"endColumn":49,"snippet":"    const leftOverElements = SelectAll('*', doc);\n"},{"startLine":63,"startColumn":0,"endLine":63,"endColumn":64,"snippet":"    const diff = totalElements.length - leftOverElements.length;\n"},{"startLine":64,"startColumn":0,"endLine":64,"endColumn":29,"snippet":"    const valid = diff === 0;\n"},{"startLine":65,"startColumn":0,"endLine":65,"endColumn":12,"snippet":"    return {\n"},{"startLine":66,"startColumn":0,"endLine":66,"endColumn":27,"snippet":"        original: original,\n"},{"startLine":67,"startColumn":0,"endLine":67,"endColumn":21,"snippet":"        valid: valid,\n"},{"startLine":68,"startColumn":0,"endLine":68,"endColumn":115,"snippet":"        sanitized: valid ? converted : !doc.body.innerHTML || !doc.body.innerHTML.length ? '' : doc.body.innerHTML,\n"},{"startLine":69,"startColumn":0,"endLine":69,"endColumn":86,"snippet":"        reason: valid ? [] : [`${diff} element${diff > 1 ? 's were' : 'was'} removed`]\n"},{"startLine":70,"startColumn":0,"endLine":70,"endColumn":6,"snippet":"    };\n"},{"startLine":71,"startColumn":0,"endLine":71,"endColumn":1,"snippet":"}"}],"startPercent":0.03152104929130527,"endPercent":0.5328961286228051,"startLine":3,"startColumn":15,"startCharacter":149,"endLine":71,"endColumn":1,"endCharacter":2519},{"startOffset":367,"endOffset":527,"count":0,"snippet":"{\n        return {\n            original: original,\n            valid: false,\n            sanitized: converted,\n            reason: ['no value']\n        };\n    }","linesDetailed":[{"startLine":6,"startColumn":41,"endLine":6,"endColumn":42,"snippet":"{"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":16,"snippet":"        return {\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":31,"snippet":"            original: original,\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":25,"snippet":"            valid: false,\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":33,"snippet":"            sanitized: converted,\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":32,"snippet":"            reason: ['no value']\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":10,"snippet":"        };\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":5,"snippet":"    }"}],"startPercent":0.07763909456314787,"endPercent":0.11148720118468373,"startLine":6,"startColumn":41,"startCharacter":367,"endLine":13,"endColumn":5,"endCharacter":527},{"startOffset":626,"endOffset":737,"count":0,"snippet":"{\n        return { original: original, valid: true, sanitized: converted, reason: ['no html present'], };\n    }","linesDetailed":[{"startLine":15,"startColumn":14,"endLine":15,"endColumn":15,"snippet":"{"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":103,"snippet":"        return { original: original, valid: true, sanitized: converted, reason: ['no html present'], };\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":5,"snippet":"    }"}],"startPercent":0.13243071715675905,"endPercent":0.15591284112544954,"startLine":15,"startColumn":14,"startCharacter":626,"endLine":17,"endColumn":5,"endCharacter":737},{"startOffset":1771,"endOffset":1838,"count":0,"snippet":"\n    else {\n        tagsToDestroy = htmlTags.concat(svgTags);\n    }","linesDetailed":[{"startLine":51,"startColumn":5,"endLine":51,"endColumn":5,"snippet":""},{"startLine":52,"startColumn":0,"endLine":52,"endColumn":10,"snippet":"    else {\n"},{"startLine":53,"startColumn":0,"endLine":53,"endColumn":49,"snippet":"        tagsToDestroy = htmlTags.concat(svgTags);\n"},{"startLine":54,"startColumn":0,"endLine":54,"endColumn":5,"snippet":"    }"}],"startPercent":0.374656230167125,"endPercent":0.38883012481489315,"startLine":51,"startColumn":5,"startCharacter":1771,"endLine":54,"endColumn":5,"endCharacter":1838},{"startOffset":1871,"endOffset":1932,"count":0,"snippet":"{\n        allowedHtmlTags.forEach(allowedHtmlTagsEach);\n    }","linesDetailed":[{"startLine":55,"startColumn":32,"endLine":55,"endColumn":33,"snippet":"{"},{"startLine":56,"startColumn":0,"endLine":56,"endColumn":53,"snippet":"        allowedHtmlTags.forEach(allowedHtmlTagsEach);\n"},{"startLine":57,"startColumn":0,"endLine":57,"endColumn":5,"snippet":"    }"}],"startPercent":0.3958112968055849,"endPercent":0.4087158874550455,"startLine":55,"startColumn":32,"startCharacter":1871,"endLine":57,"endColumn":5,"endCharacter":1932},{"startOffset":1996,"endOffset":2053,"count":0,"snippet":"{\n        tagsToDestroy = htmlTags.concat(svgTags);\n    }","linesDetailed":[{"startLine":58,"startColumn":63,"endLine":58,"endColumn":64,"snippet":"{"},{"startLine":59,"startColumn":0,"endLine":59,"endColumn":49,"snippet":"        tagsToDestroy = htmlTags.concat(svgTags);\n"},{"startLine":60,"startColumn":0,"endLine":60,"endColumn":5,"snippet":"    }"}],"startPercent":0.42225513010365984,"endPercent":0.43431351808758195,"startLine":58,"startColumn":63,"startCharacter":1996,"endLine":60,"endColumn":5,"endCharacter":2053},{"startOffset":2345,"endOffset":2422,"count":0,"snippet":": !doc.body.innerHTML || !doc.body.innerHTML.length ? '' : doc.body.innerHTML","linesDetailed":[{"startLine":68,"startColumn":37,"endLine":68,"endColumn":114,"snippet":": !doc.body.innerHTML || !doc.body.innerHTML.length ? '' : doc.body.innerHTML"}],"startPercent":0.4960863126718849,"endPercent":0.512375713983499,"startLine":68,"startColumn":37,"startCharacter":2345,"endLine":68,"endColumn":114,"endCharacter":2422},{"startOffset":2451,"endOffset":2510,"count":0,"snippet":": [`${diff} element${diff > 1 ? 's were' : 'was'} removed`]","linesDetailed":[{"startLine":69,"startColumn":27,"endLine":69,"endColumn":86,"snippet":": [`${diff} element${diff > 1 ? 's were' : 'was'} removed`]"}],"startPercent":0.5185106833086525,"endPercent":0.5309921726253438,"startLine":69,"startColumn":27,"startCharacter":2451,"endLine":69,"endColumn":86,"endCharacter":2510}]},{"name":"","isBlockCoverage":true,"ranges":[{"startOffset":285,"endOffset":319,"count":1,"snippet":"() => FromEntities(str.toString())","linesDetailed":[{"startLine":5,"startColumn":26,"endLine":5,"endColumn":60,"snippet":"() => FromEntities(str.toString())"}],"startPercent":0.060291939919610744,"endPercent":0.06748466257668712,"startLine":5,"startColumn":26,"startCharacter":285,"endLine":5,"endColumn":60,"endCharacter":319}]},{"name":"","isBlockCoverage":true,"ranges":[{"startOffset":548,"endOffset":609,"count":1,"snippet":"() => new DOMParser().parseFromString(converted, 'text/html')","linesDetailed":[{"startLine":14,"startColumn":20,"endLine":14,"endColumn":81,"snippet":"() => new DOMParser().parseFromString(converted, 'text/html')"}],"startPercent":0.11592976517876032,"endPercent":0.12883435582822086,"startLine":14,"startColumn":20,"startCharacter":548,"endLine":14,"endColumn":81,"endCharacter":609}]},{"name":"allowedHtmlTagsEach","isBlockCoverage":false,"ranges":[{"startOffset":817,"endOffset":988,"count":0,"snippet":"function allowedHtmlTagsEach(tag) {\n        const index = tagsToDestroy.indexOf(tag);\n        if (index > -1) {\n            tagsToDestroy.splice(index, 1);\n        }\n    }","linesDetailed":[{"startLine":20,"startColumn":4,"endLine":20,"endColumn":39,"snippet":"function allowedHtmlTagsEach(tag) {"},{"startLine":21,"startColumn":0,"endLine":21,"endColumn":49,"snippet":"        const index = tagsToDestroy.indexOf(tag);\n"},{"startLine":22,"startColumn":0,"endLine":22,"endColumn":25,"snippet":"        if (index > -1) {\n"},{"startLine":23,"startColumn":0,"endLine":23,"endColumn":43,"snippet":"            tagsToDestroy.splice(index, 1);\n"},{"startLine":24,"startColumn":0,"endLine":24,"endColumn":9,"snippet":"        }\n"},{"startLine":25,"startColumn":0,"endLine":25,"endColumn":5,"snippet":"    }"}],"startPercent":0.17283689443621747,"endPercent":0.20901205838798392,"startLine":20,"startColumn":4,"startCharacter":817,"endLine":25,"endColumn":5,"endCharacter":988}]},{"name":"tagsToDestroyEach","isBlockCoverage":true,"ranges":[{"startOffset":993,"endOffset":1151,"count":1,"snippet":"function tagsToDestroyEach(tag) {\n        const els = SelectAll(tag, doc);\n        while (els.length) {\n            destroyElement(els.pop());\n        }\n    }","linesDetailed":[{"startLine":26,"startColumn":4,"endLine":26,"endColumn":37,"snippet":"function tagsToDestroyEach(tag) {"},{"startLine":27,"startColumn":0,"endLine":27,"endColumn":40,"snippet":"        const els = SelectAll(tag, doc);\n"},{"startLine":28,"startColumn":0,"endLine":28,"endColumn":28,"snippet":"        while (els.length) {\n"},{"startLine":29,"startColumn":0,"endLine":29,"endColumn":38,"snippet":"            destroyElement(els.pop());\n"},{"startLine":30,"startColumn":0,"endLine":30,"endColumn":9,"snippet":"        }\n"},{"startLine":31,"startColumn":0,"endLine":31,"endColumn":5,"snippet":"    }"}],"startPercent":0.2100698117199069,"endPercent":0.24349481700867356,"startLine":26,"startColumn":4,"startCharacter":993,"endLine":31,"endColumn":5,"endCharacter":1151}]},{"name":"destroyElement","isBlockCoverage":true,"ranges":[{"startOffset":1156,"endOffset":1675,"count":1,"snippet":"function destroyElement(el) {\n        if (!el) {\n            return;\n        }\n        const parent = el.parentNode;\n        if (el && parent) {\n            const childrenLength = el.children.length;\n            let index = 0;\n            while (index < childrenLength) {\n                if (typeof parent.insertBefore == 'function') {\n                    parent.insertBefore(el.children[index], el);\n                }\n                index = index + 1;\n            }\n            parent.removeChild(el);\n        }\n    }","linesDetailed":[{"startLine":32,"startColumn":4,"endLine":32,"endColumn":33,"snippet":"function destroyElement(el) {"},{"startLine":33,"startColumn":0,"endLine":33,"endColumn":18,"snippet":"        if (!el) {\n"},{"startLine":34,"startColumn":0,"endLine":34,"endColumn":19,"snippet":"            return;\n"},{"startLine":35,"startColumn":0,"endLine":35,"endColumn":9,"snippet":"        }\n"},{"startLine":36,"startColumn":0,"endLine":36,"endColumn":37,"snippet":"        const parent = el.parentNode;\n"},{"startLine":37,"startColumn":0,"endLine":37,"endColumn":27,"snippet":"        if (el && parent) {\n"},{"startLine":38,"startColumn":0,"endLine":38,"endColumn":54,"snippet":"            const childrenLength = el.children.length;\n"},{"startLine":39,"startColumn":0,"endLine":39,"endColumn":26,"snippet":"            let index = 0;\n"},{"startLine":40,"startColumn":0,"endLine":40,"endColumn":44,"snippet":"            while (index < childrenLength) {\n"},{"startLine":41,"startColumn":0,"endLine":41,"endColumn":63,"snippet":"                if (typeof parent.insertBefore == 'function') {\n"},{"startLine":42,"startColumn":0,"endLine":42,"endColumn":64,"snippet":"                    parent.insertBefore(el.children[index], el);\n"},{"startLine":43,"startColumn":0,"endLine":43,"endColumn":17,"snippet":"                }\n"},{"startLine":44,"startColumn":0,"endLine":44,"endColumn":34,"snippet":"                index = index + 1;\n"},{"startLine":45,"startColumn":0,"endLine":45,"endColumn":13,"snippet":"            }\n"},{"startLine":46,"startColumn":0,"endLine":46,"endColumn":35,"snippet":"            parent.removeChild(el);\n"},{"startLine":47,"startColumn":0,"endLine":47,"endColumn":9,"snippet":"        }\n"},{"startLine":48,"startColumn":0,"endLine":48,"endColumn":5,"snippet":"    }"}],"startPercent":0.24455257034059658,"endPercent":0.35434736619420354,"startLine":32,"startColumn":4,"startCharacter":1156,"endLine":48,"endColumn":5,"endCharacter":1675},{"startOffset":1203,"endOffset":1234,"count":0,"snippet":"{\n            return;\n        }","linesDetailed":[{"startLine":33,"startColumn":17,"endLine":33,"endColumn":18,"snippet":"{"},{"startLine":34,"startColumn":0,"endLine":34,"endColumn":19,"snippet":"            return;\n"},{"startLine":35,"startColumn":0,"endLine":35,"endColumn":9,"snippet":"        }"}],"startPercent":0.2544954516606727,"endPercent":0.2610535223185953,"startLine":33,"startColumn":17,"startCharacter":1203,"endLine":35,"endColumn":9,"endCharacter":1234},{"startOffset":1299,"endOffset":1669,"count":0,"snippet":"{\n            const childrenLength = el.children.length;\n            let index = 0;\n            while (index < childrenLength) {\n                if (typeof parent.insertBefore == 'function') {\n                    parent.insertBefore(el.children[index], el);\n                }\n                index = index + 1;\n            }\n            parent.removeChild(el);\n        }","linesDetailed":[{"startLine":37,"startColumn":26,"endLine":37,"endColumn":27,"snippet":"{"},{"startLine":38,"startColumn":0,"endLine":38,"endColumn":54,"snippet":"            const childrenLength = el.children.length;\n"},{"startLine":39,"startColumn":0,"endLine":39,"endColumn":26,"snippet":"            let index = 0;\n"},{"startLine":40,"startColumn":0,"endLine":40,"endColumn":44,"snippet":"            while (index < childrenLength) {\n"},{"startLine":41,"startColumn":0,"endLine":41,"endColumn":63,"snippet":"                if (typeof parent.insertBefore == 'function') {\n"},{"startLine":42,"startColumn":0,"endLine":42,"endColumn":64,"snippet":"                    parent.insertBefore(el.children[index], el);\n"},{"startLine":43,"startColumn":0,"endLine":43,"endColumn":17,"snippet":"                }\n"},{"startLine":44,"startColumn":0,"endLine":44,"endColumn":34,"snippet":"                index = index + 1;\n"},{"startLine":45,"startColumn":0,"endLine":45,"endColumn":13,"snippet":"            }\n"},{"startLine":46,"startColumn":0,"endLine":46,"endColumn":35,"snippet":"            parent.removeChild(el);\n"},{"startLine":47,"startColumn":0,"endLine":47,"endColumn":9,"snippet":"        }"}],"startPercent":0.27480431563359425,"endPercent":0.35307806219589594,"startLine":37,"startColumn":26,"startCharacter":1299,"endLine":47,"endColumn":9,"endCharacter":1669}]},{"name":"SantizedHTML","isBlockCoverage":false,"ranges":[{"startOffset":4677,"endOffset":4725,"count":2,"snippet":"(val) => !val ? '' : ValidateHtml(val).sanitized","linesDetailed":[{"startLine":237,"startColumn":28,"endLine":237,"endColumn":76,"snippet":"(val) => !val ? '' : ValidateHtml(val).sanitized"}],"startPercent":0.98942246668077,"endPercent":0.9995768986672308,"startLine":237,"startColumn":28,"startCharacter":4677,"endLine":237,"endColumn":76,"endCharacter":4725}]}]},"/dist/utils/dom/create.js":{"source":"import Set from \"../objects/set.js\";\nexport default function Create({ tag = '', properties = {}, evaluatedProperties = {}, attributes = {}, subscriptions = {}, children = [] }) {\n    if (!tag) {\n        return;\n    }\n    const el = document.createElement(tag);\n    Set(el, 'subscriptions', {});\n    Object.keys(properties).forEach(key => Set(el, key, properties[key]));\n    Object.keys(evaluatedProperties).forEach(key => Set(el, key, evaluatedProperties[key]()));\n    Object.keys(attributes).forEach(key => el.setAttribute(key, attributes[key]));\n    Object.keys(subscriptions).forEach(key => Set(el, `subscriptions.${key}`, subscriptions[key](el)));\n    children.forEach(child => el.appendChild(child));\n    return el;\n}\n","lines":["import Set from \"../objects/set.js\";\n","export default function Create({ tag = '', properties = {}, evaluatedProperties = {}, attributes = {}, subscriptions = {}, children = [] }) {\n","    if (!tag) {\n","        return;\n","    }\n","    const el = document.createElement(tag);\n","    Set(el, 'subscriptions', {});\n","    Object.keys(properties).forEach(key => Set(el, key, properties[key]));\n","    Object.keys(evaluatedProperties).forEach(key => Set(el, key, evaluatedProperties[key]()));\n","    Object.keys(attributes).forEach(key => el.setAttribute(key, attributes[key]));\n","    Object.keys(subscriptions).forEach(key => Set(el, `subscriptions.${key}`, subscriptions[key](el)));\n","    children.forEach(child => el.appendChild(child));\n","    return el;\n","}\n",""],"characterCount":610,"percentage":76.72131147540983,"nodes":[{"name":"Create","isBlockCoverage":false,"ranges":[{"startOffset":52,"endOffset":722,"count":2,"snippet":"function Create({ tag = '', properties = {}, evaluatedProperties = {}, attributes = {}, subscriptions = {}, children = [] }) {\n    if (!tag) {\n        return;\n    }\n    const el = document.createElement(tag);\n    Set(el, 'subscriptions', {});\n    Object.keys(properties).forEach(key => Set(el, key, properties[key]));\n    Object.keys(evaluatedProperties).forEach(key => Set(el, key, evaluatedProperties[key]()));\n    Object.keys(attributes).forEach(key => el.setAttribute(key, attributes[key]));\n    Object.keys(subscriptions).forEach(key => Set(el, `subscriptions.${key}`, subscriptions[key](el)));\n    children.forEach(child => el.appendChild(child));\n    return el;\n}","linesDetailed":[{"startLine":1,"startColumn":15,"endLine":1,"endColumn":141,"snippet":"function Create({ tag = '', properties = {}, evaluatedProperties = {}, attributes = {}, subscriptions = {}, children = [] }) {"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":15,"snippet":"    if (!tag) {\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":15,"snippet":"        return;\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":5,"snippet":"    }\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":43,"snippet":"    const el = document.createElement(tag);\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":33,"snippet":"    Set(el, 'subscriptions', {});\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":74,"snippet":"    Object.keys(properties).forEach(key => Set(el, key, properties[key]));\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":94,"snippet":"    Object.keys(evaluatedProperties).forEach(key => Set(el, key, evaluatedProperties[key]()));\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":82,"snippet":"    Object.keys(attributes).forEach(key => el.setAttribute(key, attributes[key]));\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":103,"snippet":"    Object.keys(subscriptions).forEach(key => Set(el, `subscriptions.${key}`, subscriptions[key](el)));\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":53,"snippet":"    children.forEach(child => el.appendChild(child));\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":14,"snippet":"    return el;\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":1,"snippet":"}"}],"startPercent":0.07192254495159059,"endPercent":0.9986168741355463,"startLine":1,"startColumn":15,"startCharacter":52,"endLine":13,"endColumn":1,"endCharacter":722}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":331,"endOffset":367,"count":2,"snippet":"key => Set(el, key, properties[key])","linesDetailed":[{"startLine":7,"startColumn":36,"endLine":7,"endColumn":72,"snippet":"key => Set(el, key, properties[key])"}],"startPercent":0.4578146611341632,"endPercent":0.5076071922544951,"startLine":7,"startColumn":36,"startCharacter":331,"endLine":7,"endColumn":72,"endCharacter":367}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":415,"endOffset":462,"count":0,"snippet":"key => Set(el, key, evaluatedProperties[key]())","linesDetailed":[{"startLine":8,"startColumn":45,"endLine":8,"endColumn":92,"snippet":"key => Set(el, key, evaluatedProperties[key]())"}],"startPercent":0.573997233748271,"endPercent":0.6390041493775933,"startLine":8,"startColumn":45,"startCharacter":415,"endLine":8,"endColumn":92,"endCharacter":462}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":501,"endOffset":545,"count":2,"snippet":"key => el.setAttribute(key, attributes[key])","linesDetailed":[{"startLine":9,"startColumn":36,"endLine":9,"endColumn":80,"snippet":"key => el.setAttribute(key, attributes[key])"}],"startPercent":0.6929460580912863,"endPercent":0.7538035961272476,"startLine":9,"startColumn":36,"startCharacter":501,"endLine":9,"endColumn":80,"endCharacter":545}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":587,"endOffset":649,"count":0,"snippet":"key => Set(el, `subscriptions.${key}`, subscriptions[key](el))","linesDetailed":[{"startLine":10,"startColumn":39,"endLine":10,"endColumn":101,"snippet":"key => Set(el, `subscriptions.${key}`, subscriptions[key](el))"}],"startPercent":0.8118948824343015,"endPercent":0.8976486860304288,"startLine":10,"startColumn":39,"startCharacter":587,"endLine":10,"endColumn":101,"endCharacter":649}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":673,"endOffset":703,"count":0,"snippet":"child => el.appendChild(child)","linesDetailed":[{"startLine":11,"startColumn":21,"endLine":11,"endColumn":51,"snippet":"child => el.appendChild(child)"}],"startPercent":0.9308437067773168,"endPercent":0.9723374827109267,"startLine":11,"startColumn":21,"startCharacter":673,"endLine":11,"endColumn":51,"endCharacter":703}]}]},"/dist/utils/dom/set-attribute.js":{"source":"export default function SetAttribute(el, key, value) {\n    if (!el || (el && typeof el.removeAttribute !== 'function')) {\n        return el;\n    }\n    const current = el.getAttribute(key);\n    if ((value === undefined || value === null) && current !== value) {\n        el.removeAttribute(key);\n    }\n    else if (current !== value) {\n        el.setAttribute(key, value.toString());\n    }\n    return el;\n}\n","lines":["export default function SetAttribute(el, key, value) {\n","    if (!el || (el && typeof el.removeAttribute !== 'function')) {\n","        return el;\n","    }\n","    const current = el.getAttribute(key);\n","    if ((value === undefined || value === null) && current !== value) {\n","        el.removeAttribute(key);\n","    }\n","    else if (current !== value) {\n","        el.setAttribute(key, value.toString());\n","    }\n","    return el;\n","}\n",""],"characterCount":321,"percentage":100,"nodes":[{"name":"SetAttribute","isBlockCoverage":false,"ranges":[{"startOffset":15,"endOffset":404,"count":12,"snippet":"function SetAttribute(el, key, value) {\n    if (!el || (el && typeof el.removeAttribute !== 'function')) {\n        return el;\n    }\n    const current = el.getAttribute(key);\n    if ((value === undefined || value === null) && current !== value) {\n        el.removeAttribute(key);\n    }\n    else if (current !== value) {\n        el.setAttribute(key, value.toString());\n    }\n    return el;\n}","linesDetailed":[{"startLine":0,"startColumn":15,"endLine":0,"endColumn":54,"snippet":"function SetAttribute(el, key, value) {"},{"startLine":1,"startColumn":0,"endLine":1,"endColumn":66,"snippet":"    if (!el || (el && typeof el.removeAttribute !== 'function')) {\n"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":18,"snippet":"        return el;\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":5,"snippet":"    }\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":41,"snippet":"    const current = el.getAttribute(key);\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":71,"snippet":"    if ((value === undefined || value === null) && current !== value) {\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":32,"snippet":"        el.removeAttribute(key);\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":5,"snippet":"    }\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":33,"snippet":"    else if (current !== value) {\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":47,"snippet":"        el.setAttribute(key, value.toString());\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":5,"snippet":"    }\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":14,"snippet":"    return el;\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":1,"snippet":"}"}],"startPercent":0.037037037037037035,"endPercent":0.9975308641975309,"startLine":0,"startColumn":15,"startCharacter":15,"endLine":12,"endColumn":1,"endCharacter":404}]}]},"/dist/utils/objects/get.js":{"source":"function toStringOrNumber(arg) {\n    const argNumber = parseFloat(arg);\n    return !isNaN(arg) ? arg.trim() : argNumber;\n}\nfunction emptyModifyFn(v) {\n    return v;\n}\nfunction getFunctionParams(str = '') {\n    const result = /\\((.*?)\\)/g.exec(str || '');\n    return result ? result[1] : '';\n}\nexport default function Get(obj, path, emptyVal, modifyFn = emptyModifyFn) {\n    if (!obj) {\n        return modifyFn(emptyVal);\n    }\n    const pathParts = path.split('.');\n    let result = obj;\n    const count = pathParts.length;\n    let loopIndex = pathParts.length;\n    while (loopIndex) {\n        if (result === undefined || result === null) {\n            result = emptyVal;\n            break;\n        }\n        const partIndex = count - loopIndex;\n        const startParens = /\\(/.exec(pathParts[partIndex]);\n        if (startParens) {\n            const fn = result[pathParts[partIndex].slice(0, startParens.index)];\n            if (typeof fn === 'function') {\n                result = fn.apply(result, getFunctionParams(pathParts[partIndex])\n                    .split(',')\n                    .map(toStringOrNumber));\n                loopIndex = loopIndex - 1;\n                continue;\n            }\n        }\n        result = result[pathParts[partIndex]];\n        loopIndex = loopIndex - 1;\n    }\n    if (result === undefined || result === null) {\n        result = emptyVal;\n    }\n    return modifyFn(result);\n}\n","lines":["function toStringOrNumber(arg) {\n","    const argNumber = parseFloat(arg);\n","    return !isNaN(arg) ? arg.trim() : argNumber;\n","}\n","function emptyModifyFn(v) {\n","    return v;\n","}\n","function getFunctionParams(str = '') {\n","    const result = /\\((.*?)\\)/g.exec(str || '');\n","    return result ? result[1] : '';\n","}\n","export default function Get(obj, path, emptyVal, modifyFn = emptyModifyFn) {\n","    if (!obj) {\n","        return modifyFn(emptyVal);\n","    }\n","    const pathParts = path.split('.');\n","    let result = obj;\n","    const count = pathParts.length;\n","    let loopIndex = pathParts.length;\n","    while (loopIndex) {\n","        if (result === undefined || result === null) {\n","            result = emptyVal;\n","            break;\n","        }\n","        const partIndex = count - loopIndex;\n","        const startParens = /\\(/.exec(pathParts[partIndex]);\n","        if (startParens) {\n","            const fn = result[pathParts[partIndex].slice(0, startParens.index)];\n","            if (typeof fn === 'function') {\n","                result = fn.apply(result, getFunctionParams(pathParts[partIndex])\n","                    .split(',')\n","                    .map(toStringOrNumber));\n","                loopIndex = loopIndex - 1;\n","                continue;\n","            }\n","        }\n","        result = result[pathParts[partIndex]];\n","        loopIndex = loopIndex - 1;\n","    }\n","    if (result === undefined || result === null) {\n","        result = emptyVal;\n","    }\n","    return modifyFn(result);\n","}\n",""],"characterCount":1063,"percentage":78.83349012229539,"nodes":[{"name":"emptyModifyFn","isBlockCoverage":false,"ranges":[{"startOffset":123,"endOffset":166,"count":13,"snippet":"function emptyModifyFn(v) {\n    return v;\n}","linesDetailed":[{"startLine":3,"startColumn":2,"endLine":3,"endColumn":1,"snippet":""},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":27,"snippet":"function emptyModifyFn(v) {\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":13,"snippet":"    return v;\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":1,"snippet":"}"}],"startPercent":0.086987270155587,"endPercent":0.1173974540311174,"startLine":3,"startColumn":2,"startCharacter":123,"endLine":6,"endColumn":1,"endCharacter":166}]},{"name":"Get","isBlockCoverage":false,"ranges":[{"startOffset":308,"endOffset":1413,"count":13,"snippet":"function Get(obj, path, emptyVal, modifyFn = emptyModifyFn) {\n    if (!obj) {\n        return modifyFn(emptyVal);\n    }\n    const pathParts = path.split('.');\n    let result = obj;\n    const count = pathParts.length;\n    let loopIndex = pathParts.length;\n    while (loopIndex) {\n        if (result === undefined || result === null) {\n            result = emptyVal;\n            break;\n        }\n        const partIndex = count - loopIndex;\n        const startParens = /\\(/.exec(pathParts[partIndex]);\n        if (startParens) {\n            const fn = result[pathParts[partIndex].slice(0, startParens.index)];\n            if (typeof fn === 'function') {\n                result = fn.apply(result, getFunctionParams(pathParts[partIndex])\n                    .split(',')\n                    .map(toStringOrNumber));\n                loopIndex = loopIndex - 1;\n                continue;\n            }\n        }\n        result = result[pathParts[partIndex]];\n        loopIndex = loopIndex - 1;\n    }\n    if (result === undefined || result === null) {\n        result = emptyVal;\n    }\n    return modifyFn(result);\n}","linesDetailed":[{"startLine":11,"startColumn":15,"endLine":11,"endColumn":76,"snippet":"function Get(obj, path, emptyVal, modifyFn = emptyModifyFn) {"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":15,"snippet":"    if (!obj) {\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":34,"snippet":"        return modifyFn(emptyVal);\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":5,"snippet":"    }\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":38,"snippet":"    const pathParts = path.split('.');\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":21,"snippet":"    let result = obj;\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":35,"snippet":"    const count = pathParts.length;\n"},{"startLine":18,"startColumn":0,"endLine":18,"endColumn":37,"snippet":"    let loopIndex = pathParts.length;\n"},{"startLine":19,"startColumn":0,"endLine":19,"endColumn":23,"snippet":"    while (loopIndex) {\n"},{"startLine":20,"startColumn":0,"endLine":20,"endColumn":54,"snippet":"        if (result === undefined || result === null) {\n"},{"startLine":21,"startColumn":0,"endLine":21,"endColumn":30,"snippet":"            result = emptyVal;\n"},{"startLine":22,"startColumn":0,"endLine":22,"endColumn":18,"snippet":"            break;\n"},{"startLine":23,"startColumn":0,"endLine":23,"endColumn":9,"snippet":"        }\n"},{"startLine":24,"startColumn":0,"endLine":24,"endColumn":44,"snippet":"        const partIndex = count - loopIndex;\n"},{"startLine":25,"startColumn":0,"endLine":25,"endColumn":60,"snippet":"        const startParens = /\\(/.exec(pathParts[partIndex]);\n"},{"startLine":26,"startColumn":0,"endLine":26,"endColumn":26,"snippet":"        if (startParens) {\n"},{"startLine":27,"startColumn":0,"endLine":27,"endColumn":80,"snippet":"            const fn = result[pathParts[partIndex].slice(0, startParens.index)];\n"},{"startLine":28,"startColumn":0,"endLine":28,"endColumn":43,"snippet":"            if (typeof fn === 'function') {\n"},{"startLine":29,"startColumn":0,"endLine":29,"endColumn":81,"snippet":"                result = fn.apply(result, getFunctionParams(pathParts[partIndex])\n"},{"startLine":30,"startColumn":0,"endLine":30,"endColumn":31,"snippet":"                    .split(',')\n"},{"startLine":31,"startColumn":0,"endLine":31,"endColumn":44,"snippet":"                    .map(toStringOrNumber));\n"},{"startLine":32,"startColumn":0,"endLine":32,"endColumn":42,"snippet":"                loopIndex = loopIndex - 1;\n"},{"startLine":33,"startColumn":0,"endLine":33,"endColumn":25,"snippet":"                continue;\n"},{"startLine":34,"startColumn":0,"endLine":34,"endColumn":13,"snippet":"            }\n"},{"startLine":35,"startColumn":0,"endLine":35,"endColumn":9,"snippet":"        }\n"},{"startLine":36,"startColumn":0,"endLine":36,"endColumn":46,"snippet":"        result = result[pathParts[partIndex]];\n"},{"startLine":37,"startColumn":0,"endLine":37,"endColumn":34,"snippet":"        loopIndex = loopIndex - 1;\n"},{"startLine":38,"startColumn":0,"endLine":38,"endColumn":5,"snippet":"    }\n"},{"startLine":39,"startColumn":0,"endLine":39,"endColumn":50,"snippet":"    if (result === undefined || result === null) {\n"},{"startLine":40,"startColumn":0,"endLine":40,"endColumn":26,"snippet":"        result = emptyVal;\n"},{"startLine":41,"startColumn":0,"endLine":41,"endColumn":5,"snippet":"    }\n"},{"startLine":42,"startColumn":0,"endLine":42,"endColumn":28,"snippet":"    return modifyFn(result);\n"},{"startLine":43,"startColumn":0,"endLine":43,"endColumn":1,"snippet":"}"}],"startPercent":0.21782178217821782,"endPercent":0.9992927864214993,"startLine":11,"startColumn":15,"startCharacter":308,"endLine":43,"endColumn":1,"endCharacter":1413}]}]},"/dist/utils/checks/if-selector.js":{"source":"const queryCheck = (selector) => document.createDocumentFragment().querySelector(selector);\nexport default function IsSelector(selector) {\n    try {\n        queryCheck(selector);\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\n","lines":["const queryCheck = (selector) => document.createDocumentFragment().querySelector(selector);\n","export default function IsSelector(selector) {\n","    try {\n","        queryCheck(selector);\n","    }\n","    catch {\n","        return false;\n","    }\n","    return true;\n","}\n",""],"characterCount":183,"percentage":89.61748633879782,"nodes":[{"name":"queryCheck","isBlockCoverage":false,"ranges":[{"startOffset":19,"endOffset":90,"count":2,"snippet":"(selector) => document.createDocumentFragment().querySelector(selector)","linesDetailed":[{"startLine":0,"startColumn":19,"endLine":0,"endColumn":90,"snippet":"(selector) => document.createDocumentFragment().querySelector(selector)"}],"startPercent":0.0778688524590164,"endPercent":0.36885245901639346,"startLine":0,"startColumn":19,"startCharacter":19,"endLine":0,"endColumn":90,"endCharacter":90}]},{"name":"IsSelector","isBlockCoverage":false,"ranges":[{"startOffset":107,"endOffset":243,"count":2,"snippet":"function IsSelector(selector) {\n    try {\n        queryCheck(selector);\n    }\n    catch {\n        return false;\n    }\n    return true;\n}","linesDetailed":[{"startLine":1,"startColumn":15,"endLine":1,"endColumn":46,"snippet":"function IsSelector(selector) {"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":9,"snippet":"    try {\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":29,"snippet":"        queryCheck(selector);\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":5,"snippet":"    }\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":11,"snippet":"    catch {\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":21,"snippet":"        return false;\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":5,"snippet":"    }\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":16,"snippet":"    return true;\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":1,"snippet":"}"}],"startPercent":0.4385245901639344,"endPercent":0.9959016393442623,"startLine":1,"startColumn":15,"startCharacter":107,"endLine":9,"endColumn":1,"endCharacter":243}]}]},"/dist/utils/dom/remove-element.js":{"source":"import ArrayFrom from \"../conversion/array-from.js\";\nimport Get from \"../objects/get.js\";\nimport Try from \"../try.js\";\nexport default function RemoveElement(el) {\n    if (!el) {\n        return el;\n    }\n    Try(() => el.style.display = 'none');\n    ArrayFrom(el.children || []).forEach(RemoveElement);\n    Get(el, 'events.dispose()');\n    if (el.parentElement) {\n        el.parentElement.removeChild(el);\n    }\n}\n","lines":["import ArrayFrom from \"../conversion/array-from.js\";\n","import Get from \"../objects/get.js\";\n","import Try from \"../try.js\";\n","export default function RemoveElement(el) {\n","    if (!el) {\n","        return el;\n","    }\n","    Try(() => el.style.display = 'none');\n","    ArrayFrom(el.children || []).forEach(RemoveElement);\n","    Get(el, 'events.dispose()');\n","    if (el.parentElement) {\n","        el.parentElement.removeChild(el);\n","    }\n","}\n",""],"characterCount":224,"percentage":94.64285714285714,"nodes":[{"name":"RemoveElement","isBlockCoverage":true,"ranges":[{"startOffset":134,"endOffset":412,"count":4,"snippet":"function RemoveElement(el) {\n    if (!el) {\n        return el;\n    }\n    Try(() => el.style.display = 'none');\n    ArrayFrom(el.children || []).forEach(RemoveElement);\n    Get(el, 'events.dispose()');\n    if (el.parentElement) {\n        el.parentElement.removeChild(el);\n    }\n}","linesDetailed":[{"startLine":3,"startColumn":15,"endLine":3,"endColumn":43,"snippet":"function RemoveElement(el) {"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":14,"snippet":"    if (!el) {\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":18,"snippet":"        return el;\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":5,"snippet":"    }\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":41,"snippet":"    Try(() => el.style.display = 'none');\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":56,"snippet":"    ArrayFrom(el.children || []).forEach(RemoveElement);\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":32,"snippet":"    Get(el, 'events.dispose()');\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":27,"snippet":"    if (el.parentElement) {\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":41,"snippet":"        el.parentElement.removeChild(el);\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":5,"snippet":"    }\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":1,"snippet":"}"}],"startPercent":0.324455205811138,"endPercent":0.9975786924939467,"startLine":3,"startColumn":15,"startCharacter":134,"endLine":13,"endColumn":1,"endCharacter":412},{"startOffset":176,"endOffset":202,"count":0,"snippet":"{\n        return el;\n    }","linesDetailed":[{"startLine":4,"startColumn":13,"endLine":4,"endColumn":14,"snippet":"{"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":18,"snippet":"        return el;\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":5,"snippet":"    }"}],"startPercent":0.4261501210653753,"endPercent":0.4891041162227603,"startLine":4,"startColumn":13,"startCharacter":176,"endLine":6,"endColumn":5,"endCharacter":202},{"startOffset":271,"endOffset":276,"count":2,"snippet":"|| []","linesDetailed":[{"startLine":8,"startColumn":26,"endLine":8,"endColumn":31,"snippet":"|| []"}],"startPercent":0.6561743341404358,"endPercent":0.6682808716707022,"startLine":8,"startColumn":26,"startCharacter":271,"endLine":8,"endColumn":31,"endCharacter":276},{"startOffset":361,"endOffset":410,"count":2,"snippet":"{\n        el.parentElement.removeChild(el);\n    }","linesDetailed":[{"startLine":10,"startColumn":26,"endLine":10,"endColumn":27,"snippet":"{"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":41,"snippet":"        el.parentElement.removeChild(el);\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":5,"snippet":"    }"}],"startPercent":0.87409200968523,"endPercent":0.9927360774818402,"startLine":10,"startColumn":26,"startCharacter":361,"endLine":12,"endColumn":5,"endCharacter":410}]},{"name":"","isBlockCoverage":true,"ranges":[{"startOffset":211,"endOffset":242,"count":6,"snippet":"() => el.style.display = 'none'","linesDetailed":[{"startLine":7,"startColumn":8,"endLine":7,"endColumn":39,"snippet":"() => el.style.display = 'none'"}],"startPercent":0.5108958837772397,"endPercent":0.585956416464891,"startLine":7,"startColumn":8,"startCharacter":211,"endLine":7,"endColumn":39,"endCharacter":242}]}]},"/dist/utils/try.js":{"source":"export default function Try(fn, elseFn = () => { }) {\n    try {\n        return fn();\n    }\n    catch (error) {\n        try {\n            return fn.apply(null);\n        }\n        catch (error) {\n            if (typeof elseFn !== 'function') {\n                return elseFn;\n            }\n            return elseFn();\n        }\n    }\n}\n","lines":["export default function Try(fn, elseFn = () => { }) {\n","    try {\n","        return fn();\n","    }\n","    catch (error) {\n","        try {\n","            return fn.apply(null);\n","        }\n","        catch (error) {\n","            if (typeof elseFn !== 'function') {\n","                return elseFn;\n","            }\n","            return elseFn();\n","        }\n","    }\n","}\n",""],"characterCount":183,"percentage":100,"nodes":[{"name":"Try","isBlockCoverage":false,"ranges":[{"startOffset":15,"endOffset":333,"count":6,"snippet":"function Try(fn, elseFn = () => { }) {\n    try {\n        return fn();\n    }\n    catch (error) {\n        try {\n            return fn.apply(null);\n        }\n        catch (error) {\n            if (typeof elseFn !== 'function') {\n                return elseFn;\n            }\n            return elseFn();\n        }\n    }\n}","linesDetailed":[{"startLine":0,"startColumn":15,"endLine":0,"endColumn":53,"snippet":"function Try(fn, elseFn = () => { }) {"},{"startLine":1,"startColumn":0,"endLine":1,"endColumn":9,"snippet":"    try {\n"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":20,"snippet":"        return fn();\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":5,"snippet":"    }\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":19,"snippet":"    catch (error) {\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":13,"snippet":"        try {\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":34,"snippet":"            return fn.apply(null);\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":9,"snippet":"        }\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":23,"snippet":"        catch (error) {\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":47,"snippet":"            if (typeof elseFn !== 'function') {\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":30,"snippet":"                return elseFn;\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":13,"snippet":"            }\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":28,"snippet":"            return elseFn();\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":9,"snippet":"        }\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":5,"snippet":"    }\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":1,"snippet":"}"}],"startPercent":0.04491017964071856,"endPercent":0.9970059880239521,"startLine":0,"startColumn":15,"startCharacter":15,"endLine":15,"endColumn":1,"endCharacter":333}]},{"name":"elseFn","isBlockCoverage":true,"ranges":[{"startOffset":41,"endOffset":50,"count":2,"snippet":"() => { }","linesDetailed":[{"startLine":0,"startColumn":41,"endLine":0,"endColumn":50,"snippet":"() => { }"}],"startPercent":0.12275449101796407,"endPercent":0.1497005988023952,"startLine":0,"startColumn":41,"startCharacter":41,"endLine":0,"endColumn":50,"endCharacter":50}]}]},"/dist/utils/checks/equals.js":{"source":"import IsNonCollection from \"../types/is-non-collection.js\";\nimport Type from \"../types/type.js\";\nexport default function Equals(value1, value2) {\n    const type = Type(value1);\n    if (Type(value2) !== type) {\n        return false;\n    }\n    if (IsNonCollection(value1)) {\n        if (type === 'date') {\n            let d = value1 === value2;\n            d = new Date(value1).getTime() === new Date(value2).getTime();\n            return d;\n        }\n        return value2 === value1;\n    }\n    if (type === 'boolean' && value1 !== value2) {\n        return false;\n    }\n    if (type === 'array' && value1.length !== value2.length) {\n        return false;\n    }\n    if (type === 'object' && Object.keys(value1).length !== Object.keys(value2).length) {\n        return false;\n    }\n    if (type === 'object' && value1.constructor !== value2.constructor) {\n        return false;\n    }\n    if (type === 'dom') {\n        return value1.isSameNode(value2);\n    }\n    if (type === 'array') {\n        let len = value1.length;\n        while (len--) {\n            if (!Equals(value1[len], value2[len])) {\n                return false;\n            }\n        }\n    }\n    if (type === 'object') {\n        const keys = Object.keys(value1);\n        let len = keys.length;\n        while (len--) {\n            if (!Equals(value1[keys[len]], value2[keys[len]])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n","lines":["import IsNonCollection from \"../types/is-non-collection.js\";\n","import Type from \"../types/type.js\";\n","export default function Equals(value1, value2) {\n","    const type = Type(value1);\n","    if (Type(value2) !== type) {\n","        return false;\n","    }\n","    if (IsNonCollection(value1)) {\n","        if (type === 'date') {\n","            let d = value1 === value2;\n","            d = new Date(value1).getTime() === new Date(value2).getTime();\n","            return d;\n","        }\n","        return value2 === value1;\n","    }\n","    if (type === 'boolean' && value1 !== value2) {\n","        return false;\n","    }\n","    if (type === 'array' && value1.length !== value2.length) {\n","        return false;\n","    }\n","    if (type === 'object' && Object.keys(value1).length !== Object.keys(value2).length) {\n","        return false;\n","    }\n","    if (type === 'object' && value1.constructor !== value2.constructor) {\n","        return false;\n","    }\n","    if (type === 'dom') {\n","        return value1.isSameNode(value2);\n","    }\n","    if (type === 'array') {\n","        let len = value1.length;\n","        while (len--) {\n","            if (!Equals(value1[len], value2[len])) {\n","                return false;\n","            }\n","        }\n","    }\n","    if (type === 'object') {\n","        const keys = Object.keys(value1);\n","        let len = keys.length;\n","        while (len--) {\n","            if (!Equals(value1[keys[len]], value2[keys[len]])) {\n","                return false;\n","            }\n","        }\n","    }\n","    return true;\n","}\n",""],"characterCount":939,"percentage":100,"nodes":[{"name":"Equals","isBlockCoverage":false,"ranges":[{"startOffset":113,"endOffset":1422,"count":2,"snippet":"function Equals(value1, value2) {\n    const type = Type(value1);\n    if (Type(value2) !== type) {\n        return false;\n    }\n    if (IsNonCollection(value1)) {\n        if (type === 'date') {\n            let d = value1 === value2;\n            d = new Date(value1).getTime() === new Date(value2).getTime();\n            return d;\n        }\n        return value2 === value1;\n    }\n    if (type === 'boolean' && value1 !== value2) {\n        return false;\n    }\n    if (type === 'array' && value1.length !== value2.length) {\n        return false;\n    }\n    if (type === 'object' && Object.keys(value1).length !== Object.keys(value2).length) {\n        return false;\n    }\n    if (type === 'object' && value1.constructor !== value2.constructor) {\n        return false;\n    }\n    if (type === 'dom') {\n        return value1.isSameNode(value2);\n    }\n    if (type === 'array') {\n        let len = value1.length;\n        while (len--) {\n            if (!Equals(value1[len], value2[len])) {\n                return false;\n            }\n        }\n    }\n    if (type === 'object') {\n        const keys = Object.keys(value1);\n        let len = keys.length;\n        while (len--) {\n            if (!Equals(value1[keys[len]], value2[keys[len]])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}","linesDetailed":[{"startLine":2,"startColumn":15,"endLine":2,"endColumn":48,"snippet":"function Equals(value1, value2) {"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":30,"snippet":"    const type = Type(value1);\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":32,"snippet":"    if (Type(value2) !== type) {\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":21,"snippet":"        return false;\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":5,"snippet":"    }\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":34,"snippet":"    if (IsNonCollection(value1)) {\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":30,"snippet":"        if (type === 'date') {\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":38,"snippet":"            let d = value1 === value2;\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":74,"snippet":"            d = new Date(value1).getTime() === new Date(value2).getTime();\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":21,"snippet":"            return d;\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":9,"snippet":"        }\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":33,"snippet":"        return value2 === value1;\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":5,"snippet":"    }\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":50,"snippet":"    if (type === 'boolean' && value1 !== value2) {\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":21,"snippet":"        return false;\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":5,"snippet":"    }\n"},{"startLine":18,"startColumn":0,"endLine":18,"endColumn":62,"snippet":"    if (type === 'array' && value1.length !== value2.length) {\n"},{"startLine":19,"startColumn":0,"endLine":19,"endColumn":21,"snippet":"        return false;\n"},{"startLine":20,"startColumn":0,"endLine":20,"endColumn":5,"snippet":"    }\n"},{"startLine":21,"startColumn":0,"endLine":21,"endColumn":89,"snippet":"    if (type === 'object' && Object.keys(value1).length !== Object.keys(value2).length) {\n"},{"startLine":22,"startColumn":0,"endLine":22,"endColumn":21,"snippet":"        return false;\n"},{"startLine":23,"startColumn":0,"endLine":23,"endColumn":5,"snippet":"    }\n"},{"startLine":24,"startColumn":0,"endLine":24,"endColumn":73,"snippet":"    if (type === 'object' && value1.constructor !== value2.constructor) {\n"},{"startLine":25,"startColumn":0,"endLine":25,"endColumn":21,"snippet":"        return false;\n"},{"startLine":26,"startColumn":0,"endLine":26,"endColumn":5,"snippet":"    }\n"},{"startLine":27,"startColumn":0,"endLine":27,"endColumn":25,"snippet":"    if (type === 'dom') {\n"},{"startLine":28,"startColumn":0,"endLine":28,"endColumn":41,"snippet":"        return value1.isSameNode(value2);\n"},{"startLine":29,"startColumn":0,"endLine":29,"endColumn":5,"snippet":"    }\n"},{"startLine":30,"startColumn":0,"endLine":30,"endColumn":27,"snippet":"    if (type === 'array') {\n"},{"startLine":31,"startColumn":0,"endLine":31,"endColumn":32,"snippet":"        let len = value1.length;\n"},{"startLine":32,"startColumn":0,"endLine":32,"endColumn":23,"snippet":"        while (len--) {\n"},{"startLine":33,"startColumn":0,"endLine":33,"endColumn":52,"snippet":"            if (!Equals(value1[len], value2[len])) {\n"},{"startLine":34,"startColumn":0,"endLine":34,"endColumn":29,"snippet":"                return false;\n"},{"startLine":35,"startColumn":0,"endLine":35,"endColumn":13,"snippet":"            }\n"},{"startLine":36,"startColumn":0,"endLine":36,"endColumn":9,"snippet":"        }\n"},{"startLine":37,"startColumn":0,"endLine":37,"endColumn":5,"snippet":"    }\n"},{"startLine":38,"startColumn":0,"endLine":38,"endColumn":28,"snippet":"    if (type === 'object') {\n"},{"startLine":39,"startColumn":0,"endLine":39,"endColumn":41,"snippet":"        const keys = Object.keys(value1);\n"},{"startLine":40,"startColumn":0,"endLine":40,"endColumn":30,"snippet":"        let len = keys.length;\n"},{"startLine":41,"startColumn":0,"endLine":41,"endColumn":23,"snippet":"        while (len--) {\n"},{"startLine":42,"startColumn":0,"endLine":42,"endColumn":64,"snippet":"            if (!Equals(value1[keys[len]], value2[keys[len]])) {\n"},{"startLine":43,"startColumn":0,"endLine":43,"endColumn":29,"snippet":"                return false;\n"},{"startLine":44,"startColumn":0,"endLine":44,"endColumn":13,"snippet":"            }\n"},{"startLine":45,"startColumn":0,"endLine":45,"endColumn":9,"snippet":"        }\n"},{"startLine":46,"startColumn":0,"endLine":46,"endColumn":5,"snippet":"    }\n"},{"startLine":47,"startColumn":0,"endLine":47,"endColumn":16,"snippet":"    return true;\n"},{"startLine":48,"startColumn":0,"endLine":48,"endColumn":1,"snippet":"}"}],"startPercent":0.07940969782150387,"endPercent":0.9992972593113141,"startLine":2,"startColumn":15,"startCharacter":113,"endLine":48,"endColumn":1,"endCharacter":1422}]}]},"/dist/utils/types/is-non-collection.js":{"source":"const nonCollections = ['string', 'number', 'null', 'undefined', 'function', 'boolean', 'date'];\nexport default function IsNonCollection(value) { return nonCollections.indexOf(typeof value) > -1 || value === null || value instanceof Date; }\n","lines":["const nonCollections = ['string', 'number', 'null', 'undefined', 'function', 'boolean', 'date'];\n","export default function IsNonCollection(value) { return nonCollections.indexOf(typeof value) > -1 || value === null || value instanceof Date; }\n",""],"characterCount":224,"percentage":57.14285714285714,"nodes":[{"name":"IsNonCollection","isBlockCoverage":false,"ranges":[{"startOffset":112,"endOffset":240,"count":8,"snippet":"function IsNonCollection(value) { return nonCollections.indexOf(typeof value) > -1 || value === null || value instanceof Date; }","linesDetailed":[{"startLine":1,"startColumn":15,"endLine":1,"endColumn":143,"snippet":"function IsNonCollection(value) { return nonCollections.indexOf(typeof value) > -1 || value === null || value instanceof Date; }"}],"startPercent":0.46473029045643155,"endPercent":0.995850622406639,"startLine":1,"startColumn":15,"startCharacter":112,"endLine":1,"endColumn":143,"endCharacter":240}]}]},"/dist/utils/types/is-dom.js":{"source":"var isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\nexport default function IsDom(value) {\n    if (!isBrowser()) {\n        return false;\n    }\n    return (value instanceof Element) || (value instanceof Node);\n}\n","lines":["var isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\n","export default function IsDom(value) {\n","    if (!isBrowser()) {\n","        return false;\n","    }\n","    return (value instanceof Element) || (value instanceof Node);\n","}\n",""],"characterCount":202,"percentage":58.415841584158414,"nodes":[{"name":"IsDom","isBlockCoverage":false,"ranges":[{"startOffset":100,"endOffset":243,"count":4,"snippet":"function IsDom(value) {\n    if (!isBrowser()) {\n        return false;\n    }\n    return (value instanceof Element) || (value instanceof Node);\n}","linesDetailed":[{"startLine":1,"startColumn":15,"endLine":1,"endColumn":38,"snippet":"function IsDom(value) {"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":23,"snippet":"    if (!isBrowser()) {\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":21,"snippet":"        return false;\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":5,"snippet":"    }\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":65,"snippet":"    return (value instanceof Element) || (value instanceof Node);\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":1,"snippet":"}"}],"startPercent":0.4098360655737705,"endPercent":0.9959016393442623,"startLine":1,"startColumn":15,"startCharacter":100,"endLine":6,"endColumn":1,"endCharacter":243}]}]},"/dist/utils/types/is-date.js":{"source":"export default function IsDate(value) {\n    if (typeof value === 'string' && parseFloat(value).toString() === value) {\n        return false;\n    }\n    const tempValue = new Date(Date.parse(value));\n    return (tempValue !== 'Invalid Date'\n        && !isNaN(tempValue)\n        && tempValue instanceof Date);\n}\n","lines":["export default function IsDate(value) {\n","    if (typeof value === 'string' && parseFloat(value).toString() === value) {\n","        return false;\n","    }\n","    const tempValue = new Date(Date.parse(value));\n","    return (tempValue !== 'Invalid Date'\n","        && !isNaN(tempValue)\n","        && tempValue instanceof Date);\n","}\n",""],"characterCount":245,"percentage":100,"nodes":[{"name":"IsDate","isBlockCoverage":false,"ranges":[{"startOffset":15,"endOffset":308,"count":2,"snippet":"function IsDate(value) {\n    if (typeof value === 'string' && parseFloat(value).toString() === value) {\n        return false;\n    }\n    const tempValue = new Date(Date.parse(value));\n    return (tempValue !== 'Invalid Date'\n        && !isNaN(tempValue)\n        && tempValue instanceof Date);\n}","linesDetailed":[{"startLine":0,"startColumn":15,"endLine":0,"endColumn":39,"snippet":"function IsDate(value) {"},{"startLine":1,"startColumn":0,"endLine":1,"endColumn":78,"snippet":"    if (typeof value === 'string' && parseFloat(value).toString() === value) {\n"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":21,"snippet":"        return false;\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":5,"snippet":"    }\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":50,"snippet":"    const tempValue = new Date(Date.parse(value));\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":40,"snippet":"    return (tempValue !== 'Invalid Date'\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":28,"snippet":"        && !isNaN(tempValue)\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":38,"snippet":"        && tempValue instanceof Date);\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":1,"snippet":"}"}],"startPercent":0.04854368932038835,"endPercent":0.9967637540453075,"startLine":0,"startColumn":15,"startCharacter":15,"endLine":8,"endColumn":1,"endCharacter":308}]}]},"/dist/utils/conversion/set-valid.js":{"source":"const validSymbol = Symbol('__valid');\nconst SetValid = (element, valid) => {\n    if (element === undefined || element === null) {\n        return;\n    }\n    try {\n        element.constructor.prototype[validSymbol] = valid === true;\n    }\n    catch (error) { }\n    return element;\n};\nexport const IsValid = (element) => {\n    if (element === undefined || element === null) {\n        return;\n    }\n    try {\n        return typeof element.constructor.prototype == 'undefined' || (element.constructor.prototype[validSymbol] === undefined || element.constructor.prototype[validSymbol] === true);\n    }\n    catch (error) { }\n    return false;\n};\nexport default SetValid;\n","lines":["const validSymbol = Symbol('__valid');\n","const SetValid = (element, valid) => {\n","    if (element === undefined || element === null) {\n","        return;\n","    }\n","    try {\n","        element.constructor.prototype[validSymbol] = valid === true;\n","    }\n","    catch (error) { }\n","    return element;\n","};\n","export const IsValid = (element) => {\n","    if (element === undefined || element === null) {\n","        return;\n","    }\n","    try {\n","        return typeof element.constructor.prototype == 'undefined' || (element.constructor.prototype[validSymbol] === undefined || element.constructor.prototype[validSymbol] === true);\n","    }\n","    catch (error) { }\n","    return false;\n","};\n","export default SetValid;\n",""],"characterCount":541,"percentage":32.71719038817005,"nodes":[{"name":"SetValid","isBlockCoverage":false,"ranges":[{"startOffset":56,"endOffset":281,"count":1,"snippet":"(element, valid) => {\n    if (element === undefined || element === null) {\n        return;\n    }\n    try {\n        element.constructor.prototype[validSymbol] = valid === true;\n    }\n    catch (error) { }\n    return element;\n}","linesDetailed":[{"startLine":1,"startColumn":17,"endLine":1,"endColumn":38,"snippet":"(element, valid) => {"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":52,"snippet":"    if (element === undefined || element === null) {\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":15,"snippet":"        return;\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":5,"snippet":"    }\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":9,"snippet":"    try {\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":68,"snippet":"        element.constructor.prototype[validSymbol] = valid === true;\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":5,"snippet":"    }\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":21,"snippet":"    catch (error) { }\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":19,"snippet":"    return element;\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":1,"snippet":"}"}],"startPercent":0.08421052631578947,"endPercent":0.42255639097744363,"startLine":1,"startColumn":17,"startCharacter":56,"endLine":10,"endColumn":1,"endCharacter":281}]}]},"/dist/utils/conversion/from-entities.js":{"source":"import SetValid from \"./set-valid.js\";\nexport default function FromEntities(value) {\n    if (typeof value == 'string') {\n        return SetValid(value\n            .replace(/&amp;/g, '&')\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&quot;|&#8220;|&#8221;|&ldquo;|&rdquo;/g, '\"')\n            .replace(/&apos;|&lsquo;|&rsquo;|&#8216;/g, '\\''), true);\n    }\n    return SetValid(value, false);\n}\n","lines":["import SetValid from \"./set-valid.js\";\n","export default function FromEntities(value) {\n","    if (typeof value == 'string') {\n","        return SetValid(value\n","            .replace(/&amp;/g, '&')\n","            .replace(/&lt;/g, '<')\n","            .replace(/&gt;/g, '>')\n","            .replace(/&quot;|&#8220;|&#8221;|&ldquo;|&rdquo;/g, '\"')\n","            .replace(/&apos;|&lsquo;|&rsquo;|&#8216;/g, '\\''), true);\n","    }\n","    return SetValid(value, false);\n","}\n",""],"characterCount":294,"percentage":89.79591836734694,"nodes":[{"name":"FromEntities","isBlockCoverage":true,"ranges":[{"startOffset":54,"endOffset":438,"count":1,"snippet":"function FromEntities(value) {\n    if (typeof value == 'string') {\n        return SetValid(value\n            .replace(/&amp;/g, '&')\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&quot;|&#8220;|&#8221;|&ldquo;|&rdquo;/g, '\"')\n            .replace(/&apos;|&lsquo;|&rsquo;|&#8216;/g, '\\''), true);\n    }\n    return SetValid(value, false);\n}","linesDetailed":[{"startLine":1,"startColumn":15,"endLine":1,"endColumn":45,"snippet":"function FromEntities(value) {"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":35,"snippet":"    if (typeof value == 'string') {\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":29,"snippet":"        return SetValid(value\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":35,"snippet":"            .replace(/&amp;/g, '&')\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":34,"snippet":"            .replace(/&lt;/g, '<')\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":34,"snippet":"            .replace(/&gt;/g, '>')\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":68,"snippet":"            .replace(/&quot;|&#8220;|&#8221;|&ldquo;|&rdquo;/g, '\"')\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":69,"snippet":"            .replace(/&apos;|&lsquo;|&rsquo;|&#8216;/g, '\\''), true);\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":5,"snippet":"    }\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":34,"snippet":"    return SetValid(value, false);\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":1,"snippet":"}"}],"startPercent":0.12300683371298406,"endPercent":0.9977220956719818,"startLine":1,"startColumn":15,"startCharacter":54,"endLine":11,"endColumn":1,"endCharacter":438},{"startOffset":401,"endOffset":437,"count":0,"snippet":"\n    return SetValid(value, false);\n","linesDetailed":[{"startLine":9,"startColumn":5,"endLine":9,"endColumn":5,"snippet":""},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":35,"snippet":"    return SetValid(value, false);\n"}],"startPercent":0.9134396355353075,"endPercent":0.9954441913439636,"startLine":9,"startColumn":5,"startCharacter":401,"endLine":10,"endColumn":35,"endCharacter":437}]}]},"/dist/utils/dom/select-all.js":{"source":"import ArrayFrom from \"../conversion/array-from.js\";\nexport default function SelectAll(selector, root = document.body) {\n    return ArrayFrom(root.querySelectorAll(selector));\n}\n","lines":["import ArrayFrom from \"../conversion/array-from.js\";\n","export default function SelectAll(selector, root = document.body) {\n","    return ArrayFrom(root.querySelectorAll(selector));\n","}\n",""],"characterCount":103,"percentage":100,"nodes":[{"name":"SelectAll","isBlockCoverage":true,"ranges":[{"startOffset":68,"endOffset":177,"count":3,"snippet":"function SelectAll(selector, root = document.body) {\n    return ArrayFrom(root.querySelectorAll(selector));\n}","linesDetailed":[{"startLine":1,"startColumn":15,"endLine":1,"endColumn":67,"snippet":"function SelectAll(selector, root = document.body) {"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":54,"snippet":"    return ArrayFrom(root.querySelectorAll(selector));\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":1,"snippet":"}"}],"startPercent":0.38202247191011235,"endPercent":0.9943820224719101,"startLine":1,"startColumn":15,"startCharacter":68,"endLine":3,"endColumn":1,"endCharacter":177}]}]},"/dist/utils/objects/set.js":{"source":"export default function Set(source, path, value) {\n    const paths = path ? path.split('.') : [];\n    paths.reduce(function (accumulator, currentValue) {\n        if (!accumulator) {\n            accumulator = {};\n        }\n        if (!accumulator[currentValue]) {\n            accumulator[currentValue] = {};\n        }\n        if (currentValue) {\n            if (currentValue === paths[paths.length - 1]) {\n                accumulator[currentValue] = value;\n            }\n            return accumulator[currentValue];\n        }\n        else {\n            accumulator[currentValue] = null;\n            return accumulator;\n        }\n    }, source);\n    return source;\n}\n","lines":["export default function Set(source, path, value) {\n","    const paths = path ? path.split('.') : [];\n","    paths.reduce(function (accumulator, currentValue) {\n","        if (!accumulator) {\n","            accumulator = {};\n","        }\n","        if (!accumulator[currentValue]) {\n","            accumulator[currentValue] = {};\n","        }\n","        if (currentValue) {\n","            if (currentValue === paths[paths.length - 1]) {\n","                accumulator[currentValue] = value;\n","            }\n","            return accumulator[currentValue];\n","        }\n","        else {\n","            accumulator[currentValue] = null;\n","            return accumulator;\n","        }\n","    }, source);\n","    return source;\n","}\n",""],"characterCount":450,"percentage":100,"nodes":[{"name":"Set","isBlockCoverage":false,"ranges":[{"startOffset":15,"endOffset":666,"count":4,"snippet":"function Set(source, path, value) {\n    const paths = path ? path.split('.') : [];\n    paths.reduce(function (accumulator, currentValue) {\n        if (!accumulator) {\n            accumulator = {};\n        }\n        if (!accumulator[currentValue]) {\n            accumulator[currentValue] = {};\n        }\n        if (currentValue) {\n            if (currentValue === paths[paths.length - 1]) {\n                accumulator[currentValue] = value;\n            }\n            return accumulator[currentValue];\n        }\n        else {\n            accumulator[currentValue] = null;\n            return accumulator;\n        }\n    }, source);\n    return source;\n}","linesDetailed":[{"startLine":0,"startColumn":15,"endLine":0,"endColumn":50,"snippet":"function Set(source, path, value) {"},{"startLine":1,"startColumn":0,"endLine":1,"endColumn":46,"snippet":"    const paths = path ? path.split('.') : [];\n"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":55,"snippet":"    paths.reduce(function (accumulator, currentValue) {\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":27,"snippet":"        if (!accumulator) {\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":29,"snippet":"            accumulator = {};\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":9,"snippet":"        }\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":41,"snippet":"        if (!accumulator[currentValue]) {\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":43,"snippet":"            accumulator[currentValue] = {};\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":9,"snippet":"        }\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":27,"snippet":"        if (currentValue) {\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":59,"snippet":"            if (currentValue === paths[paths.length - 1]) {\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":50,"snippet":"                accumulator[currentValue] = value;\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":13,"snippet":"            }\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":45,"snippet":"            return accumulator[currentValue];\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":9,"snippet":"        }\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":14,"snippet":"        else {\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":45,"snippet":"            accumulator[currentValue] = null;\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":31,"snippet":"            return accumulator;\n"},{"startLine":18,"startColumn":0,"endLine":18,"endColumn":9,"snippet":"        }\n"},{"startLine":19,"startColumn":0,"endLine":19,"endColumn":15,"snippet":"    }, source);\n"},{"startLine":20,"startColumn":0,"endLine":20,"endColumn":18,"snippet":"    return source;\n"},{"startLine":21,"startColumn":0,"endLine":21,"endColumn":1,"snippet":"}"}],"startPercent":0.022488755622188907,"endPercent":0.9985007496251874,"startLine":0,"startColumn":15,"startCharacter":15,"endLine":21,"endColumn":1,"endCharacter":666}]},{"name":"","isBlockCoverage":false,"ranges":[{"startOffset":115,"endOffset":635,"count":4,"snippet":"function (accumulator, currentValue) {\n        if (!accumulator) {\n            accumulator = {};\n        }\n        if (!accumulator[currentValue]) {\n            accumulator[currentValue] = {};\n        }\n        if (currentValue) {\n            if (currentValue === paths[paths.length - 1]) {\n                accumulator[currentValue] = value;\n            }\n            return accumulator[currentValue];\n        }\n        else {\n            accumulator[currentValue] = null;\n            return accumulator;\n        }\n    }","linesDetailed":[{"startLine":2,"startColumn":17,"endLine":2,"endColumn":55,"snippet":"function (accumulator, currentValue) {"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":27,"snippet":"        if (!accumulator) {\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":29,"snippet":"            accumulator = {};\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":9,"snippet":"        }\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":41,"snippet":"        if (!accumulator[currentValue]) {\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":43,"snippet":"            accumulator[currentValue] = {};\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":9,"snippet":"        }\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":27,"snippet":"        if (currentValue) {\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":59,"snippet":"            if (currentValue === paths[paths.length - 1]) {\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":50,"snippet":"                accumulator[currentValue] = value;\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":13,"snippet":"            }\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":45,"snippet":"            return accumulator[currentValue];\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":9,"snippet":"        }\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":14,"snippet":"        else {\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":45,"snippet":"            accumulator[currentValue] = null;\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":31,"snippet":"            return accumulator;\n"},{"startLine":18,"startColumn":0,"endLine":18,"endColumn":9,"snippet":"        }\n"},{"startLine":19,"startColumn":0,"endLine":19,"endColumn":5,"snippet":"    }"}],"startPercent":0.1724137931034483,"endPercent":0.952023988005997,"startLine":2,"startColumn":17,"startCharacter":115,"endLine":19,"endColumn":5,"endCharacter":635}]}]},"/dist/utils/conversion/array-from.js":{"source":"export default function ArrayFrom(elements) {\n    if (Array.isArray(elements)) {\n        return elements.slice();\n    }\n    const result = [];\n    if (elements && elements.length) {\n        const length = elements.length;\n        let index = 0;\n        while (index < length) {\n            result.push(elements[index]);\n            index = index + 1;\n        }\n    }\n    else if (elements) {\n        result.push(elements);\n    }\n    return result;\n}\n","lines":["export default function ArrayFrom(elements) {\n","    if (Array.isArray(elements)) {\n","        return elements.slice();\n","    }\n","    const result = [];\n","    if (elements && elements.length) {\n","        const length = elements.length;\n","        let index = 0;\n","        while (index < length) {\n","            result.push(elements[index]);\n","            index = index + 1;\n","        }\n","    }\n","    else if (elements) {\n","        result.push(elements);\n","    }\n","    return result;\n","}\n",""],"characterCount":313,"percentage":100,"nodes":[{"name":"ArrayFrom","isBlockCoverage":true,"ranges":[{"startOffset":15,"endOffset":449,"count":7,"snippet":"function ArrayFrom(elements) {\n    if (Array.isArray(elements)) {\n        return elements.slice();\n    }\n    const result = [];\n    if (elements && elements.length) {\n        const length = elements.length;\n        let index = 0;\n        while (index < length) {\n            result.push(elements[index]);\n            index = index + 1;\n        }\n    }\n    else if (elements) {\n        result.push(elements);\n    }\n    return result;\n}","linesDetailed":[{"startLine":0,"startColumn":15,"endLine":0,"endColumn":45,"snippet":"function ArrayFrom(elements) {"},{"startLine":1,"startColumn":0,"endLine":1,"endColumn":34,"snippet":"    if (Array.isArray(elements)) {\n"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":32,"snippet":"        return elements.slice();\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":5,"snippet":"    }\n"},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":22,"snippet":"    const result = [];\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":38,"snippet":"    if (elements && elements.length) {\n"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":39,"snippet":"        const length = elements.length;\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":22,"snippet":"        let index = 0;\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":32,"snippet":"        while (index < length) {\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":41,"snippet":"            result.push(elements[index]);\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":30,"snippet":"            index = index + 1;\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":9,"snippet":"        }\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":5,"snippet":"    }\n"},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":24,"snippet":"    else if (elements) {\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":30,"snippet":"        result.push(elements);\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":5,"snippet":"    }\n"},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":18,"snippet":"    return result;\n"},{"startLine":17,"startColumn":0,"endLine":17,"endColumn":1,"snippet":"}"}],"startPercent":0.03333333333333333,"endPercent":0.9977777777777778,"startLine":0,"startColumn":15,"startCharacter":15,"endLine":17,"endColumn":1,"endCharacter":449},{"startOffset":79,"endOffset":119,"count":2,"snippet":"{\n        return elements.slice();\n    }","linesDetailed":[{"startLine":1,"startColumn":33,"endLine":1,"endColumn":34,"snippet":"{"},{"startLine":2,"startColumn":0,"endLine":2,"endColumn":32,"snippet":"        return elements.slice();\n"},{"startLine":3,"startColumn":0,"endLine":3,"endColumn":5,"snippet":"    }"}],"startPercent":0.17555555555555555,"endPercent":0.2644444444444444,"startLine":1,"startColumn":33,"startCharacter":79,"endLine":3,"endColumn":5,"endCharacter":119},{"startOffset":119,"endOffset":178,"count":5,"snippet":"\n    const result = [];\n    if (elements && elements.length","linesDetailed":[{"startLine":3,"startColumn":5,"endLine":3,"endColumn":5,"snippet":""},{"startLine":4,"startColumn":0,"endLine":4,"endColumn":22,"snippet":"    const result = [];\n"},{"startLine":5,"startColumn":0,"endLine":5,"endColumn":35,"snippet":"    if (elements && elements.length"}],"startPercent":0.2644444444444444,"endPercent":0.39555555555555555,"startLine":3,"startColumn":5,"startCharacter":119,"endLine":5,"endColumn":35,"endCharacter":178},{"startOffset":180,"endOffset":366,"count":2,"snippet":"{\n        const length = elements.length;\n        let index = 0;\n        while (index < length) {\n            result.push(elements[index]);\n            index = index + 1;\n        }\n    }","linesDetailed":[{"startLine":5,"startColumn":37,"endLine":5,"endColumn":38,"snippet":"{"},{"startLine":6,"startColumn":0,"endLine":6,"endColumn":39,"snippet":"        const length = elements.length;\n"},{"startLine":7,"startColumn":0,"endLine":7,"endColumn":22,"snippet":"        let index = 0;\n"},{"startLine":8,"startColumn":0,"endLine":8,"endColumn":32,"snippet":"        while (index < length) {\n"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":41,"snippet":"            result.push(elements[index]);\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":30,"snippet":"            index = index + 1;\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":9,"snippet":"        }\n"},{"startLine":12,"startColumn":0,"endLine":12,"endColumn":5,"snippet":"    }"}],"startPercent":0.4,"endPercent":0.8133333333333334,"startLine":5,"startColumn":37,"startCharacter":180,"endLine":12,"endColumn":5,"endCharacter":366},{"startOffset":276,"endOffset":360,"count":6,"snippet":"{\n            result.push(elements[index]);\n            index = index + 1;\n        }","linesDetailed":[{"startLine":8,"startColumn":31,"endLine":8,"endColumn":32,"snippet":"{"},{"startLine":9,"startColumn":0,"endLine":9,"endColumn":41,"snippet":"            result.push(elements[index]);\n"},{"startLine":10,"startColumn":0,"endLine":10,"endColumn":30,"snippet":"            index = index + 1;\n"},{"startLine":11,"startColumn":0,"endLine":11,"endColumn":9,"snippet":"        }"}],"startPercent":0.6133333333333333,"endPercent":0.8,"startLine":8,"startColumn":31,"startCharacter":276,"endLine":11,"endColumn":9,"endCharacter":360},{"startOffset":366,"endOffset":428,"count":3,"snippet":"\n    else if (elements) {\n        result.push(elements);\n    }","linesDetailed":[{"startLine":12,"startColumn":5,"endLine":12,"endColumn":5,"snippet":""},{"startLine":13,"startColumn":0,"endLine":13,"endColumn":24,"snippet":"    else if (elements) {\n"},{"startLine":14,"startColumn":0,"endLine":14,"endColumn":30,"snippet":"        result.push(elements);\n"},{"startLine":15,"startColumn":0,"endLine":15,"endColumn":5,"snippet":"    }"}],"startPercent":0.8133333333333334,"endPercent":0.9511111111111111,"startLine":12,"startColumn":5,"startCharacter":366,"endLine":15,"endColumn":5,"endCharacter":428},{"startOffset":428,"endOffset":448,"count":5,"snippet":"\n    return result;\n","linesDetailed":[{"startLine":15,"startColumn":5,"endLine":15,"endColumn":5,"snippet":""},{"startLine":16,"startColumn":0,"endLine":16,"endColumn":19,"snippet":"    return result;\n"}],"startPercent":0.9511111111111111,"endPercent":0.9955555555555555,"startLine":15,"startColumn":5,"startCharacter":428,"endLine":16,"endColumn":19,"endCharacter":448}]}]}},"group":"/components/field-text"}]}