import { ObserverInstance } from '../../utils/observe/observer';
declare type PropertyValues = {
    autocomplete: 'on' | 'off' | boolean | string;
    autofocus: boolean;
    count: boolean;
    disabled: boolean;
    error: string | HTMLElement;
    help: string | HTMLElement;
    iconleft: string | HTMLElement;
    iconright: string | HTMLElement;
    input: string | HTMLElement;
    inputid: string;
    label: string | HTMLElement;
    max: null | number;
    min: null | number;
    name: string;
    pattern: null | string;
    required: boolean;
    type: string;
    value: null | string;
};
export default class FieldText extends HTMLElement {
    static get observedAttributes(): string[];
    state: {
        [key: string]: ObserverInstance;
    };
    get autocomplete(): PropertyValues['autocomplete'];
    set autocomplete(v: PropertyValues['autocomplete']);
    get autofocus(): PropertyValues['autofocus'];
    set autofocus(v: PropertyValues['autofocus']);
    get count(): PropertyValues['count'];
    set count(v: PropertyValues['count']);
    get disabled(): PropertyValues['disabled'];
    set disabled(v: PropertyValues['disabled']);
    get error(): PropertyValues['error'];
    set error(v: PropertyValues['error']);
    get help(): PropertyValues['help'];
    set help(v: PropertyValues['help']);
    get iconleft(): PropertyValues['iconleft'];
    set iconleft(v: PropertyValues['iconleft']);
    get iconright(): PropertyValues['iconright'];
    set iconright(v: PropertyValues['iconright']);
    get input(): HTMLInputElement | null;
    set input(v: HTMLInputElement | null);
    get inputid(): PropertyValues['inputid'];
    set inputid(v: PropertyValues['inputid']);
    get label(): PropertyValues['label'];
    set label(v: PropertyValues['label']);
    get max(): PropertyValues['max'];
    set max(v: PropertyValues['max']);
    get min(): PropertyValues['min'];
    set min(v: PropertyValues['min']);
    get name(): PropertyValues['name'];
    set name(v: PropertyValues['name']);
    get pattern(): PropertyValues['pattern'];
    set pattern(v: PropertyValues['pattern']);
    get required(): PropertyValues['required'];
    set required(v: PropertyValues['required']);
    get type(): PropertyValues['type'];
    set type(v: PropertyValues['type']);
    get value(): PropertyValues['value'];
    set value(v: PropertyValues['value']);
    get countElement(): Element | null;
    get focused(): boolean;
    get form(): HTMLFormElement | null;
    get isempty(): boolean;
    get validity(): ValidityState | undefined;
    get validationMessage(): string;
    set validationMessage(error: string);
    events: {
        [key: string]: ObserverInstance;
    };
    constructor();
    setLabelPosition(): string | boolean;
    attributeChangedCallback(name: string, _oldValue: string, newValue: string): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
export {};
